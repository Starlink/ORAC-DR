# -*-cperl-*-

=head1 NAME

_SCUBA2_HELLO_ - Mandatory introductory primitive

=head1 SYNOPSIS

 _SCUBA2_HELLO_

=head1 DESCRIPTION

This primitive should be called at the start of all SCUBA-2 DR
recipes. Its primary purpose is to provide some introductory messages
and to check and set a handful of uhdr entries. Dark frames are
removed from the input if necessary (for DREAM/STARE data).

=head1 ARGUMENTS

None.

=head1 EXTERNAL TASKS

None.

=head1 OUTPUT DATA

The Frame uhdr has a number of new entries:

=over 2

=item OBSEND

Set to 1 if the Frame contains the last data file in the observation,
or if the observation is a SCAN pointing.

=item PERCENT_CMP

Retrieved from the last value in the state structure.

=back

The current Frame is tagged as C<dark> if it only contains dark data.

=head1 OUTPUT FILES

None.

=head1 NOTES

Probably not required for offline instances of the pipeline.

=head1 AUTHOR

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>,
Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005 Particle Physics and Astronomy Research Council.
Copyright (C) 2009-2014 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# duration in seconds
my $duration = $Frm->duration_science;
my $duration_minutes = sprintf("%.1f",$duration/60);
$Frm->uhdr("DURATION_SCIENCE", $duration);

# Do we have just darks? These checks are only really relevant for the
# QL and SUMMIT pipelines. First check that there are no SHUTTER
# subheaders which would indicate a mix of open/closed shutter data in
# the Frame. If the shutter is closed (0.0) then mark as dark only,
# and mark the Frame as bad for all observations except flatfield and
# noise.
my $do_fastflat = 0;
if ((defined $Frm->hdr("SHUTTER")) && ($Frm->hdr("SHUTTER") == 0.0)) {
  $Frm->tagset("dark");
  # Set the fastflat flag if we have (dark) fastflat data
  $do_fastflat = 1 if (defined $Frm->hdr("SEQ_TYPE") &&
	               lc($Frm->hdr("SEQ_TYPE")) eq "fastflat");
} elsif ( defined $Frm->hdr("SEQ_TYPE")
          && lc($Frm->hdr("SEQ_TYPE")) ne lc($Frm->hdr("OBS_TYPE")) ) {
  # This check is to catch `dark' data taken when the shutter is open
  # throughout the observation. Set the fastflat flag and mark as `dark'.
  $do_fastflat = 1;
  $Frm->tagset("dark");
} else {
  # If we're here we have data with mixed shutter and/or
  # seq_types. That's OK if we're throwing it all at the map-maker,
  # but for offline FOCUS processing, we will have a Frame that
  # contains dark and fastramp data only, and in this case we should
  # tag it as dark.
  if ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "focus" &&
      (!defined $Frm->hdr("SEQ_TYPE") || !defined $Frm->hdr("SHUTTER")) ) {
    $do_fastflat = 1;
    # Loop over the subheaders and check to see if we have on-sky data
    # in this mixed-sequence Frame
    for my $i (0 .. $Frm->nfiles - 1) {
      if ($Frm->hdrval("SEQ_TYPE", $i) eq $Frm->uhdr("ORAC_OBSERVATION_TYPE")) {
	$do_fastflat = 0;
	# Stop as soon as we identify the Frame with on-sky data
	last;
      }
    }
    $Frm->tagset("dark") if ($do_fastflat);
  }
}

# Mark the data as fastflat if appropriate
$Frm->tagset("fastflat") if ($do_fastflat);

# Print welcome message
orac_print "Obs #".$Frm->uhdr("ORAC_OBSERVATION_NUMBER").
    " Observing mode: ". $Frm->uhdr("ORAC_OBSERVATION_MODE").
    ( $Frm->hdr("STANDARD") ? " / standard":  "" ) .
  " / Observation duration: $duration_minutes min\n";

if ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "focus") {
  orac_print "Focus axis ". $Frm->hdrval("FOCAXIS").
    " and focus position ". $Frm->hdr("FOCPOSN") ." mm\n"
      unless ( $Frm->tagexists("dark") );
}

# Tell user if the data consists of darks only or fastflat ramps
my $extra = "";
if ($Frm->tagexists("fastflat")) {
  $extra = " - processing fastflat ramp data";
} elsif ($Frm->tagexists("dark")) {
  $extra = " - dark frame only";
}

orac_print "This is an observation of ".$Frm->uhdr("ORAC_OBJECT")."$extra\n"
  if ( defined $Frm->uhdr("ORAC_OBJECT") ) ;

# Obtain the percent_complete value from the state structure
$Frm->uhdr("PERCENT_CMP", $Frm->jcmtstate("TCS_PERCENT_CMP", "end") );

# See if the OBSEND flag is set
my $obsend = ( $Frm->hdrval("OBSEND",-1) ) ? 1 : 0;

# Pass this value on to the current Frame
$Frm->uhdr("OBSEND", $obsend);

if ($Frm->hdr("SIMULATE")) {
  orac_warn(" *** This observation is simulated data! ***\n");
}

# Define the default makemap config file - blank field processing will
# get an override from the recipe layer, as will JLS data.
# The default makemap config type is the 'jsa_generic' option. 'base' can
# be used if you really want to get the base dimmconfig share/dimmconfig.lis.
# This is not set by default -- this is to let recipes use a different
# 'default' dimmconfig by checking to see if the uhdr MAKEMAP_CONFIG_TYPE has
# been set.
my $conftype;

# Use the pointing config file for pointing and focus observations,
# bright_compact for calibrators otherwise. Very short observations of
# planets require their own specialist config, as does the moon.
if ($Frm->hdr("OBJECT") && $Frm->hdr("OBJECT") =~ /moon/i) {
  $conftype = "moon";
} elsif ( lc($Frm->hdr("OBS_TYPE")) eq "science" &&
	  $Cal->iscalsource( $Frm->hdr("OBJECT")) ) {
  $conftype = "bright_compact";
} elsif ( $Frm->hdr("OBS_TYPE") =~ /focus|pointing/i) {
  $conftype = "pointing";
} elsif ( $duration < 15 && $Cal->isplanet( $Frm->hdr("OBJECT")) ) {
  $conftype = "veryshort_planet";
}
if ( defined $conftype) {
  $Frm->uhdr("MAKEMAP_CONFIG_TYPE", $conftype);
  orac_say("Setting default config type to $conftype based on observation.");
}

# We may need to insert a new flatfield (this will have no
# effect on stare/dream data without reprocessing but this primitive
# only triggers for older archive data)
_ASSIGN_REPROCESSED_FLAT_
