# -*-cperl-*-

=head1 NAME

_WRITE_MAPSTATS_LOGFILE_ - write logfile with results from image analysis

=head1 SYNOPSIS

 _WRITE_MAPSTATS_LOGFILE_

=head1 DESCRIPTION

Write out a log file with results obtained from analyzing a reduced
map. The log file includes the RMS noise, NEFD and exposure time.

=head1 ARGUMENTS

None.

=head1 EXTERNAL TASKS

=over 4

=item ORAC-DR PRIMITIVES:

_ADD_LOG_ENTRY_, _FIND_IMAGE_STATISTICS_, _GET_PIXEL_SCALE_

=back

=head1 OUTPUT DATA

None.

=head1 OUTPUT FILES

The log file, C<log.mapstats> is created.

=head1 LOGFILE FORMAT

The log file contains the following additional entries (see
L<_ADD_LOG_ENTRY_|_ADD_LOG_ENTRY_> for details of the common entries):

=over 4

=item t_elapsed

Elapsed time for observation (sec)

=item t_exp

Median exposure time over mapped area (sec)

=item rms

Median noise over mapped area obtained from the error component (mJy/beam)

=item nefd

Median Noise Equivlanet Flux Density over mapped area (mJy/beam sec**0.5)

=item mapsize

Requested map height/width (arcsec)

=item pixscale

Pixel scale (arcsec)

=item project

Project ID

=back

=head1 NOTES

Only runs on C<reduced> data files.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2014 University of British Columbia.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Default settings
my $proceed = 1;
my $group = 0;
my $tag = "reduced";

# Specific overrides
if ($Frm->uhdr("SUMMIT")) {
  $group = 1;
  $proceed = 0 if ($Grp->product && $Grp->product eq "oldimage");
  $tag = "newimage";
} elsif ($Frm->uhdr("PICARD")) {
  # PICARD always uses the Frame object - calib or newimage tags
  $tag = ($Frm->tagexists("calib")) ? "calib" : "newimage";
}
my $Obj = ($group) ? $Grp : $Frm;
# Need the check for proceed in here to make sure that Grp processing
# in the SUMMIT pipeline works as intended
$proceed = 0 if ($proceed && !$Obj->tagexists($tag));

if ($proceed) {
  orac_print "\nCalling _WRITE_MAPSTATS_LOGFILE_: write logfile with results from image analysis\n", "yellow"
    if ($Frm->uhdr("PICARD"));

  orac_print "Writing results to log.mapstats...\n";
  $Obj->tagset("mapstats");
  $Obj->tagretrieve($tag);
  # All checks should be carried out on the reduced file or the new
  # image in the SUMMIT pipeline
  _GET_PIXEL_SCALE_ VERBOSE=0 GROUP=$group
  my $pixscale = $_GET_PIXEL_SCALE_{PIXSCALE};
  my $mapsize = $Frm->hdr("MAP_HGHT");
  my $pixregion = sprintf "%d", ($mapsize / $pixscale);
  _FIND_IMAGE_STATISTICS_ REGION=$pixregion COMP=ERR VERBOSE=0 GROUP=$group
  my $rms = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEDIAN};
  orac_say("RMS is $rms\n");
  my $image = $Obj->file .".more.smurf.exp_time";
  _FIND_IMAGE_STATISTICS_ IMAGE=$image REGION=$pixregion VERBOSE=0 GROUP=$group
  my $texp = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEDIAN};
  _COMPONENT_EXISTS_ COMPONENT=more.smurf.nefd FILE=$Obj->file
  if (!$_COMPONENT_EXISTS_{EXISTS}) {
    _CALCULATE_NEFD_ GROUP=$group LOGFILE=0
  }
  $image = $Obj->file .".more.smurf.nefd";
  _FIND_IMAGE_STATISTICS_ IMAGE=$image REGION=$pixregion VERBOSE=0 GROUP=$group
  my $nefd = $_FIND_IMAGE_STATISTICS_{RESULTS}->{MEDIAN};

  my $printval = sub {
    my $value = shift;
    my $n = (@_) ? $_[0]."f" : "4f";
    use NDF;
    $value = "NaN" if (!defined $value ||
		       (defined $value && $value == &NDF::VAL__BADD()));
    return (sprintf "%.$n", $value);
  };

  my $t_elapsed = $Obj->uhdr("DURATION_SCIENCE");
  # Fall back on the DATE-OBS/DATE-END headers if no science duration stored
  unless ($t_elapsed) {
    use DateTime::Format::ISO8601;
    my $st = DateTime::Format::ISO8601->parse_datetime($Frm->hdr("DATE-OBS"));
    my $en = DateTime::Format::ISO8601->parse_datetime($Frm->hdr("DATE-END"));
    my $duration = $en - $st;
    $t_elapsed = ($duration->in_units("minutes") * 60) +
      $duration->in_units("seconds");
    # This block is only reached in PICARD so check to see if the
    # given file is a coadd
    my $task = "wcsmosaic,makemos";
    _CHECK_HISTORY_ TASK=$task GROUP=0 VERBOSE=0
    if ($_CHECK_HISTORY_{HAS_TASK}) {
      orac_err "Input file appears to be a coadd: t_elapsed will be incorrect\n";
    }
  }

  # Obtain out the correct units to write into the log file
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=".$Obj->file);
  my ($ORAC_STATUS, $units) = $Mon{ndfpack_mon}->get("ndftrace","units");
  # Get the NEFD units
  $Mon{ndfpack_mon}->obeyw("ndftrace","ndf=".$Obj->file . ".more.smurf.nefd");
  ($ORAC_STATUS, my $nefdunits) = $Mon{ndfpack_mon}->get("ndftrace","units");


  # Strip out spaces from the units strings (replace with . for mulitplication)
  $units =~ s/\s/./g;
  $nefdunits=~ s/\s/./g;

  # Replace ** with ^ for easier reading.
  $nefdunits=~ s/\Q**\E/^/;
  $units =~ s/\Q**\E/^/;

  # Default number of significant figures.
  my $ndp = 6;
  if ($units =~ /beam/i) {
    $units =~ s/beam/bm/i;
  } elsif ($units =~ /arcsec/i) {
    $units =~ s/arcsec/asec/i;
  } elsif ($units =~ /pixel/i) {
    $units =~ s/pixel/px/i;
  } elsif ($units =~ /pw/i) {
    $ndp = 6;
  }

  my @unitstring = split("/",$units);
  my $rms_units = $units;
  my $nefd_units = $nefdunits;
  my $logtype = "mapstats";
  my $recipe = "UNKNOWN";
  if (defined $Frm->hdr("RECIPE")){
    $recipe = $Frm->hdr("RECIPE");
  }

  my $file = $Frm->file;

  my @params = qw/ t_elapsed t_exp rms rms_units nefd nefd_units mapsize pixscale project recipe filename/;
  my @units =  ("(s)", "(s)", "()", "()", "()", "()", '(")', '(")', '()', '()', '()');

 my @values = ( $t_elapsed, $printval->($texp, 2),
                 sprintf("%.3E",$rms), $rms_units,
                 sprintf("%.3E",$nefd), $nefd_units,
		 $mapsize, $printval->($pixscale, 1),
		 $Frm->hdr("PROJECT"),
                 $recipe,
                 $file
	       );
  _ADD_LOG_ENTRY_ PARLIST=FULLER PARAMS=\@params ENTRIES=\@values UNITS=\@units GROUP=$group LOGFILE=$logtype

  $Obj->tagretrieve("mapstats");
}
