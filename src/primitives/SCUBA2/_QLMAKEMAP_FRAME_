# -*-cperl-*-

=head1 NAME

_QLMAKEMAP_FRAME_ - make a map as quickly as possible

=head1 SYNOPSIS

_QLMAKEMAP_FRAME_

=head1 DESCRIPTION

This primitive takes raw time-series data for the current Frame and
constructs an image as quickly as possible. This is achieved by
reducing the number of iterations and downsampling the data.

This is a many to one operation, with only a single output file
created.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<SYSTEM>

Coordinate system for output image. May be any supported by
B<AST>. Default is C<TRACKING>.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item SMURF:

MAKEMAP

=item ORAC-DR PRIMITIVES

_CHECK_IMAGE_FOR_TARGET_, _GET_MAKEMAP_ARGS_, _GET_MAKEMAP_CONFIG_,
_RETRIEVE_GOOD_DATA_FRAME_

=back

=head1 OUTPUT DATA

The Frame uhdr entries C<SKY_SUBTRACTION> and C<EXTINCTION> are set to
1 on success.

=head1 OUTPUT FILES

Creates a single output file with a C<_fmos> suffix.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2006-2013 University of British Columbia.
Copyright (C) 2017 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

my @out;

# What checks should we carry out?

# Do not continue if this is not the QL pipeline
return ORAC__OK unless ($Frm->uhdr("QUICKLOOK"));

# Check for dark-only Frames and set a few uhdr flags so that
# subsequent primitives are skipped
if ($Frm->tagexists("dark")) {
  # Do not calibrate these data
  $Frm->uhdr("NOCALIB",1);
  # Force the sky subtraction and extinction flags to unity so that
  # these steps are not attempted on non-image data
  $Frm->uhdr("SKY_SUBTRACTION",1);
  $Frm->uhdr("EXTINCTION",1);
  return ORAC__OK;
}

my $system = uc(get_prim_arg( $_PRIM_ARGS_, "SYSTEM", "TRACKING"));

# Retrieve files from subarrays that have good flatfields before making a map
_RETRIEVE_GOOD_DATA_FRAME_
my $infiles = $_RETRIEVE_GOOD_DATA_FRAME_{FILES_SUB};
# Retrieve the full list of files - override this list for POINTING
# and FOCUS observations below
my @infiles = @{$_RETRIEVE_GOOD_DATA_FRAME_{FILES}}
  if (defined $_RETRIEVE_GOOD_DATA_FRAME_{FILES});
my @subarrays = sort keys %{$infiles} if ($infiles);
if ($Frm->uhdr("NOFASTFLATS")) {
  orac_warn "No fastflats could be retrieved: map will be made using internal flatfield and is likely to be sub-optimal\n";
}

# For POINTING and FOCUS observations, where the instrument aperture
# may be defined, select only those files needed to make a map if
# possible.
if ($Frm->uhdr("ORAC_OBSERVATION_TYPE") =~ /point/i ||
    $Frm->uhdr("ORAC_OBSERVATION_TYPE") =~ /focus/i) {

  my $nsubs = scalar(keys %{$infiles});
  my $these_arrays = "all $nsubs good arrays";
  if (defined $Frm->hdr("INSTAP")) {
    my $instap_subarray = $Frm->instap_subarray;
    if (defined $infiles->{$instap_subarray}) {
      $these_arrays = "subarray $instap_subarray only...";
      @infiles = @{$infiles->{$instap_subarray}};
    } else {
      # Otherwise the only option is to use *all* the remaining data
      orac_warn "Flatfield failed for INSTAP array - using all available data\n";
    }
  } elsif ($nsubs > 2 && !$Cal->isplanet($Frm->hdr("OBJECT"))) {
    # Use only two arrays if at least three are present, except for
    # planets which need all the available data (especially for very
    # short observations) to make good estimates of the common
    # mode. Choose opposite subarrays for a (presumably) better map.
    my $prefix = "s".($Frm->hdr("FILTER") =~ /850/ ? 8 : 4);
    @subarrays = map { $prefix.$_} qw/b d/;
    if (!$infiles->{$subarrays[0]} || !$infiles->{$subarrays[-1]}) {
      # OK one of the target subarrays has a bad flatfield, so pick the other two
      @subarrays = map { $prefix.$_} qw/a c/;
      if (!$infiles->{$subarrays[0]} || !$infiles->{$subarrays[-1]}) {
        @subarrays = undef;
        orac_warn "Unable to select two opposite subarrays - using all available data\n";
      }
    }
    if (@subarrays == 2) {
      $these_arrays = "subarrays ". (join(" and ", @subarrays))." only...";
      @infiles = map { @{$infiles->{$_}} } @subarrays;
    }
  }
  orac_print "Selecting files from $these_arrays\n";
}

# Quit processing if there is no data to make a map
my $object = $Frm->hdr("OBJECT");
my $obsnum = $Frm->hdr("OBSNUM");
my $subscan = $Frm->hdr("NSUBSCAN");
orac_term "No good data for $object from obs $obsnum / scan $subscan with which to make a map\n"
  unless (@infiles);

# Write list of filenames to a temp file
my $inlist = write_file_list( @infiles );

# Set output filename
my ($in, $out) = $Frm->inout("_fmos");
$out = $Frm->rewrite_outfile_subarray( $out );

# Define makemap argument list - mandatory arguments
_GET_MAKEMAP_CONFIG_
my $config = $_GET_MAKEMAP_CONFIG_{CONFIG};
my $args = "in=^$inlist out=$out config='^$config' ";

# Define the remaining arguments to makemap
my %makemapargs = ( method => "iterate" );
_GET_MAKEMAP_ARGS_ SYSTEM=$system
my %newmakemapargs = %{$_GET_MAKEMAP_ARGS_{ARGS}};
# Store these new arguments in the hash - existing entries will be
# overriden
foreach my $arg (keys %newmakemapargs) {
  $makemapargs{$arg} = $newmakemapargs{$arg};
}
$args .= join(" ", map { "$_=$makemapargs{$_}" } keys %makemapargs);

# Call makemap - really must have some sort of feedback to user
orac_print "Calling makemap using iterate method - ";

# Error message text
my $msg;
my $fault_msg = "If this failure is not associated with a bad observation please file a fault\n";

my $nfiles = scalar(@infiles);
# Now create output map
orac_print "making map from $nfiles input files\n";
my $SMURF_STATUS = $Mon{smurf_mon}->obeyw("makemap","$args");

# Check for SMF__NOMEM return status
if ( $SMURF_STATUS == ORAC__OK ) {
  # Check that an output file was actually created - in some
  # instances bad data can be dealt with by makemap which then exits
  # with good status and no output file.
  my $fullout = File::Spec->catfile($ENV{ORAC_DATA_OUT}, $out);
  $fullout .= ".sdf" unless ($fullout =~ /.sdf$/); # hack...
  if ( -e $fullout ) {
    # Register the new file name
    $Frm->force_product_update("makemap", $out);
    $Frm->tagset("makemap");
    # Re-read the header as the number of files has changed
    $Frm->readhdr();
    # Use the newimage tag/product for pipeline checks
    $Frm->product("newimage");
    $Frm->tagset("newimage");

    # Set the title to include the source name and add the observation
    # number for running the QL at the telescope.  Place Parameter TITLE
    # before Parameter NDF to prevent object names containing parentheses
    # from confusing the command-line parser, which attributes the
    # parentheses to the NDF.
    my $title = "$object / $obsnum #$subscan";
    my $quoted_title = filter_quoted_string($title, 1);
    $Mon{ndfpack_mon}->obeyw("settitle","title='$quoted_title' ndf=$out");

    my $nbol = sprintf "%d", $Frm->hdr("NBOLOEFF");
    my $nsub = scalar(@subarrays);
    my $nbolave = ($nsub > 0) ? sprintf "%d", ($Frm->hdr("NBOLOEFF") / $nsub) : 0;
    orac_print "Thank you for waiting: image $out created\n  using $nbol bolometers from $nsub subarrays ($nbolave bolometers per subarray)\n", "green";
    if ($nbol > 0) {
      orac_warn "Map created from only $nbol bolometers: check map quality\n"
        if ($nbol < 100);

      # And of course sky subtraction and extinction correction have been
      # applied, though there really isn't much point to setting these
      # other than a desire for consistency.
      $Frm->uhdr("SKY_SUBTRACTION",1);
      $Frm->uhdr("EXTINCTION",1);

      # Mark current frame as good now that we have a map
      $Frm->isgood(1);

      # Now that a new map has been created, the existing pointing
      # flag file can be deleted
      if ( $Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "pointing" &&
           (defined $Grp->uhdr("FLAGFILE")) && (-e $Grp->uhdr("FLAGFILE")) ) {
        orac_print "Deleting old pointing flag file - a new one will be written shortly\n", "yellow";
        unlink $Grp->uhdr("FLAGFILE");
        $Grp->uhdr("FLAGFILE",undef);
      }
    } else {
      # Mark this frame as BAD since every bolometer was flagged
      $Frm->isgood(0);
      $msg = "Makemap created a blank map: data from this Frame will be ignored.\n$fault_msg";
    }

  } else {
    # Mark this frame as BAD. The only reason we would be here is
    # that the data are bad/corrupt.
    $Frm->isgood(0);
    $msg = "Makemap failed to create an output file (corrupt data): data from this Frame will be ignored.\n\n$fault_msg";
  }
} else {
  # OK we have bad exit status - check for known reasons
  if ( $SMURF_STATUS == 235176770 ) {
    # SMF__NOMEM: Memory allocation error
    $msg = "Output image will exceed maximum size 2 GB - will not continue\n";
  } elsif ( $SMURF_STATUS == 235176794 ) {
    # SMF__INSMP: insufficient samples for statistics
    $msg = "All data flagged bad: insufficient samples available for calculating statistics - will not continue\n";
  } elsif ( $SMURF_STATUS == 235176858 ) {
    # SMF__NOSCI: no science data found
    $msg = "No science data found: data from this Frame will be ignored\n";
  } elsif ( $SMURF_STATUS == 235176866 ) {
    # SMF__TELSTAT: telescope is stationary
    $msg = "Telescope is stationary or moving very slowly: data from this Frame will be ignored\n";
  } elsif ( $SMURF_STATUS == ORAC__BADENG ) {
    # ORAC__BADENG - indicates SMURF has crashed
    orac_err "***** SMURF has crashed - aborting recipe *****\n";
    delete $Mon{smurf_mon};
    return $SMURF_STATUS;
  } else {
    # Everything else...
    $msg = "Makemap failed for an unknown reason: data from this Frame will be ignored\n$fault_msg";
  }
  $Frm->isgood(0);
}

# If no new image was created issue an error saying why
unless ($Frm->tagexists("newimage")) {
  $Frm->uhdr("NOCALIB",1);
  # Terminate the recipe unless we're processing the last member and
  # have more than one member in the group, in which case we still
  # want a Group file to be created if possible.
  my @members = $Grp->allmembers;
  if ($Grp->lastmember($Frm) && @members > 1) {
    orac_err $msg;
  } else {
    orac_termerr $msg;
  }
}

# Check the image to see if the target is covered by good pixels
_CHECK_IMAGE_FOR_TARGET_
