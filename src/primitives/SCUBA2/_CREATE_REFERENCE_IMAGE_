# -*-cperl-*-

=head1 NAME

_CREATE_REFERENCE_IMAGE_ - Create image aligned to chosen coordinate frame

=head1 SYNOPSIS

 _CREATE_REFERENCE_IMAGE SYSTEM=EQUATORIAL

=head1 DESCRIPTION

This primitive creates a blank NDF image to be used in aligning and
mosaicking individual DREAM/STARE images in a common coordinate
frame. The user has the option of specifying the desired SKY frame. If
none is specified then FK5 equatorial coordinates with a mean equinox
J2000.0 is assumed.

The reference position and pixel scale are determined from the most
recent image added to the current Frame.

=head2 MOVING SOURCES

Creating a reference image for a moving source is more complex,
especially as SETSKY is not aware of the GAPPT coordinate system. The
procedure is as follows. If the input data have system=GAPPT and/or
the output system is GAPPT then the reference image is also created
with system=GAPPT.

=over 2

=item Step 1

Create template reference image;

=item Step 2

Retrieve and store System and Epoch WCS attributes from input data
file;

=item Step 3

Set system on input data file to ICRS, retrieve and store SkyRef (now
in ICRS coordinates);

=item Step 4

Use SETSKY to add an ICRS SkyFrame to the reference image using
equinox = 2000.0, the input epoch and SkyRef in ICRS coordinates;

=item Step 5

Set the system for the reference image to GAPPT - SkyRef is now in
GAPPT coordinates.

=back

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<ADDWCS>

Flag to indicate whether a WCS component should be added to the
file. Default is 1 (yes).

=item B<BOUNDS>

An array reference containing the lower and upper bounds for the
reference image respectively. The array should contain 4 elements:
Xmin, Ymin, Xmax and Ymax in that order. Default is (-1,-1,1,1).

=item B<COORDS>

An optional Astro::Coords object with the desired coordinates. No
default.

=item B<GROUP>

A flag to denote whether to use the current Frame or Group file should
be used to obtain WCS information.

=item B<PIXEL_SCALE>

The pixel scale for the reference image, in arcsec. It may also take
the special value 0 to indicate that the pixel scale should be derived
from the input image instead. If a single value is given, the X and Y
scales are set equal. Default is 0 (derive from input image).

=item B<SYSTEM>

The name of the sky coordinate system for the reference image. May be
ICRS, FK5, EQUATORIAL, GAPPT or GALACTIC.  Default is to use the same
as the current Frame.

=item B<VERBOSE>

Flag to indicate whether informational messages should be given to the
user. Default is true.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA:

CREFRAME, HISSET

=item ORAC-DR PRIMITIVES

_ADD_WCS_TO_IMAGE_, _GET_PIXEL_SCALE_

=back

=head1 NOTES

The AZEL coordinate frame is not supported. Only EQUATORIAL (in its
FK5 and ICRS guises), GAPPT and GALACTIC coordinate systems are
supported.

This primitive should be called only if a suitable reference image
does not already exist (e.g. a Group file).

=head1 OUTPUT DATA

On completion the primitive hash C<%_CREATE_REFERENCE_IMAGE_> contains
the following key:

=over 4

=item REFIMAGE

Name of reference image, also stored in the calibration system.

=back

=head1 OUTPUT FILES

Creates a single file with name derived from the group file name with
suffix C<_ref>.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2005-2011,2013-2014 University of British Columbia.
Copyright (C) 2017 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either Version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Check for arguments...
# Should I be verbose? (default to yes)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);
$verbose = 1;
my $lbound = "-1,-1";
my $ubound = "1,1";
my $bounds = get_prim_arg($_PRIM_ARGS_, "BOUNDS", undef);
if ($bounds && ref($bounds) eq "ARRAY") {
  # What if @$bounds doesn't contain 4 elements?
  $lbound = join(",",@{$bounds}[0..1]);
  $ubound = join(",",@{$bounds}[2..3]);
}

my $group = get_prim_arg($_PRIM_ARGS_, "GROUP", 1);
$group = 0 unless ($Grp->file_exists);
my $Obj = ($group) ? $Grp : $Frm;

# Tell the user what's going on
orac_print "Creating reference image: " if $verbose;

# Create the blank reference NDF
my $refimage = $Obj->inout("_ref");
my $title = ($Obj->hdr('OBJECT')) ? $Obj->hdr('OBJECT') : "Reference";

# Ensure that the embedded quotation marks are propagated to the TITLE
# component of the reference NDF.
$title = filter_quoted_string($title, 1);

# Place Parameter TITLE before Parameter OUT to prevent object names
# containing parentheses from confusing the command-line parser, which
# attributes the parentheses to the NDF.
my $imgargs = "lbound=\[$lbound\] ubound=\[$ubound\] mode=bl title='$title' out=$refimage";
$Mon{kappa_mon}->obeyw("creframe","$imgargs");
orac_print "create blank NDF, " if $verbose;

my $add_wcs = get_prim_arg($_PRIM_ARGS_, "ADDWCS", 1);

if ( $add_wcs ) {
  # Calculate the pixel scale. Use default values if not set.
  my $pixelscale = get_prim_arg($_PRIM_ARGS_, "PIXEL_SCALE", 0);

  # Check for desired OUTPUT coordinate frame
  my $cosys_out = get_prim_arg($_PRIM_ARGS_, "SYSTEM", "");

  my $coords = get_prim_arg($_PRIM_ARGS_, "COORDS", undef);

  _ADD_WCS_TO_IMAGE_ IMAGE=$refimage PIXEL_SCALE=$pixelscale COORDS=$coords SYSTEM=$cosys_out GROUP=$group

  if ($pixelscale == 0) {
    _GET_PIXEL_SCALE_ VERBOSE=0 IMAGE=$refimage
    $pixelscale = $_GET_PIXEL_SCALE_{RESULTS};
  }
  $pixelscale = (ref($pixelscale)) ? "(".join(",",map{sprintf "%.2f", $_}@$pixelscale).")"
    : sprintf "%.2f", $pixelscale;

  orac_print "done\nReference image created in $cosys_out coordinate system with pixel scale = $pixelscale arcsec\n" if $verbose;
} else {
  # All done - let the user know
  orac_print "done. \n" if $verbose;
}

# Now add a FITS header, copy from current object
my $fitshdr = $Obj->fits;
$fitshdr->writehdr( File => $refimage );

# Store the reference image name in the primitive hash
$_CREATE_REFERENCE_IMAGE_{REFIMAGE} = $refimage;

# Store the name in the object intermediates array so that we can
# clean up at the end of the recipe
$Obj->push_intermediates( $refimage );

# Create HISTORY component
$Mon{ndfpack_mon}->obeyw("hisset","ndf=$refimage mode=normal");
