# -*-cperl-*-

=head1 NAME

_REDUCE_SCAN_STEER_ - set up steering parameters for reducing SCAN-mode data

=head1 SYNOPSIS

 _REDUCE_SCAN_STEER_

 _REDUCE_SCAN_STEER_ FAKEMAP=1

=head1 DESCRIPTION

This primitive checks for the presence of recipe parameters specific
to SCAN mode data and sets entries in the Frame uhdr accordingly.

An error is reported if the Frame contains no science data.

=head1 ARGUMENTS

This primitive supports a single argument:

=over 4

=item B<FAKEMAP>

A flag to denote whether fake maps are being added to the
data. Default is 0 (no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item ORAC-DR PRIMITIVES

_FAKEMAP_STEER_, _GET_RECPAR_CONFIG_

=back

=head1 OUTPUT DATA

Parameters are stored in the Frame uhdr using the naming convention
C<RECPAR_PARAMETER> where PARAMETER is the name of the recipe
parameter.

See the documentation for the L<REDUCE_SCAN|REDUCE_SCAN> recipe and
L<ORAC::Frame::SCUBA2|ORAC::Frame::SCUBA2> for a list of supported
parameters.

The Frame is marked as bad if it contains no science data.

=head1 OUTPUT FILES

None.

=head1 NOTES

None.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2014 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut


return ORAC__OK unless ($Frm->uhdr("ORAC_OBSERVATION_MODE") =~ /scan/i);

# Check that the Frame contains science data (include pointing
# observations too)
unless (map {$_} grep {$_ =~ /science|point/i} $Frm->hdrvals("SEQ_TYPE")) {
  $Frm->isgood(0);
  orac_err "Frame contains no science data\n";
}

# Is the recipe adding fake maps to the data?
my $fakemap = get_prim_arg($_PRIM_ARGS_, "FAKEMAP", 0);

my $add_scanpar = sub {
  my $prefix = shift;
  my $list = shift;
  return map { $prefix ."_". uc($_) } @{$list};
};

# Define basic recipe parameter names - push any additional parameters
# onto this array
my @scanpar = $add_scanpar->("MAKEMAP", [$Frm->makemap_args]);

# White-noise spatial filter
push(@scanpar, $add_scanpar->("WHITEN", ["BOX", "THRESH", "ESTIMATOR"]));

# Subscan noise assessment
push(@scanpar, $add_scanpar->("SUBSCAN", ["METHOD","ESTIMATOR"]));

# Define fakemap recipe parameter names if necessary
if ($fakemap) {
  my @fakepars = ("MAP", "SCALE", "REGRID", "OFFSET", "FWHM", "CONSTSNR");
  push(@scanpar, $add_scanpar->("FAKEMAP", \@fakepars));
}

# Findclumps, resistor config files
push(@scanpar, "FINDCLUMPS_CFG", "RESIST_CFG");

# Calibration
push(@scanpar, "CALUNITS");

# PSF box for jack-knife analysis
push(@scanpar, "PSF_BOX");

# Thresholding
push(@scanpar, $add_scanpar->("STATS", ["COMP", "ESTIMATOR", "THRESH"]));

# Map size
push(@scanpar, $add_scanpar->("MAP", ["HEIGHT", "RADIUS", "WIDTH"]));
push(@scanpar, "CROP_METHOD");

# Background removal
push(@scanpar, "REMOVE_BACKGROUND");

# Files to keep after processing
push(@scanpar, "KEEPFILES");

# Split output into JSA Tiles?
push(@scanpar, 'JSA_TILES', 'TILE_PREVIEWS');

# Check if the map-maker needs to chunk and abort of so
push(@scanpar, "NOCHUNKING");

# Verify recipe parameters.
ORAC::Recipe::Parameters::verify_parameters( \%RECPARS, \@scanpar );

# Loop over MAKEMAP parameters
foreach my $par ( grep {"MAKEMAP"} keys %RECPARS ) {
  my $recpar = "RECPAR_" . $par;
  $Frm->uhdr($recpar, $RECPARS{$par}) if defined $RECPARS{$par};
}

# Tell user if a new makemap config file is being used
orac_say( "User has used recpars to request override of default config file with  $RECPARS{'MAKEMAP_CONFIG'}",
	  "yellow" ) if defined $Frm->uhdr("RECPAR_MAKEMAP_CONFIG");

### Calibration units ###
if (defined $RECPARS{CALUNITS}) {
  my $calunits = uc($RECPARS{CALUNITS});
  if ($calunits =~ /^ARCSEC/ || $calunits eq "BEAM" || $calunits eq "BEAMMATCH") {
    $Frm->uhdr("RECPAR_CALUNITS", $calunits);
    my $extra = ($calunits =~ /^ARCSEC/) ? "/arcsec**2" :
      (($calunits eq "BEAM") ? "/beam" : "");
    orac_print "Output maps will be calibrated in mJy".$extra."\n";
  } else {
    orac_warn "Unknown calibration units given, $calunits - using default for current recipe\n";
  }
}

### Statistics estimators for thresholding
# Component: variance, error or exposure time
if (defined $RECPARS{STATS_COMP}) {
  my $comp = lc($RECPARS{STATS_COMP});
  $Frm->uhdr("RECPAR_STATS_COMP", $comp)
    if ($comp =~ /^[var|err|texp]/);
}
# Estimator: mean/median/mode/min/max
if (defined $RECPARS{STATS_ESTIMATOR}) {
  my $estimator = uc($RECPARS{STATS_ESTIMATOR});
  $Frm->uhdr("RECPAR_STATS_ESTIMATOR", $RECPARS{STATS_ESTIMATOR})
    if ($estimator eq "MEAN" || $estimator eq "MODE" || $estimator eq "MEDIAN" ||
	$estimator eq "MIN" || $estimator eq "MAX");
}
# Threshold - multiplier for the estimator
if (defined $RECPARS{STATS_THRESH}) {
  $Frm->uhdr("RECPAR_STATS_THRESH", $RECPARS{STATS_THRESH});
}

### Map size parameters
# Crop method - only check map size parameters if the crop method is given
if (defined $RECPARS{CROP_METHOD}) {
  my $crop_method = lc($RECPARS{CROP_METHOD});
  $crop_method = ($crop_method =~ /^rect/) ? "rectangle" : "circle";
  $Frm->uhdr("RECPAR_CROP_METHOD", $crop_method);

  # New map radius or width and height
  if ($crop_method eq "circle") {
    $Frm->uhdr("RECPAR_MAP_RADIUS", $RECPARS{MAP_RADIUS})
      if (defined $RECPARS{'MAP_RADIUS'});
  } else {
    $Frm->uhdr("RECPAR_MAP_WIDTH", $RECPARS{MAP_WIDTH})
      if (defined $RECPARS{'MAP_WIDTH'});
    $Frm->uhdr("RECPAR_MAP_HEIGHT", $RECPARS{MAP_HEIGHT})
      if (defined $RECPARS{'MAP_HEIGHT'});
  }
}

# If OMC-1 has been used as a pointing source, set the makemap config
# type to bright_extended, unless the user has given their own
unless (defined $Frm->uhdr("RECPAR_MAKEMAP_CONFIG")) {
  $Frm->uhdr("MAKEMAP_CONFIG_TYPE", "bright_extended")
    if ($Frm->hdr("OBS_TYPE") =~ /point/ && $Frm->hdr("OBJECT") eq "OMC1");
}

# Findclumps config file
_GET_RECPAR_CONFIG_ CONFIG=FINDCLUMPS

# Additional processing for fake maps
if ($fakemap) {
  _FAKEMAP_STEER_
}

# Use new resistor config file if given
_GET_RECPAR_CONFIG_ CONFIG=RESIST

# JSA tiling -- set a uhdr entry if the JSA_TILES recipe
# parameter is given.
$Frm->uhdr('JSA_TILES', $RECPARS{'JSA_TILES'})
  if (defined $RECPARS{'JSA_TILES'});
$Frm->uhdr('TILE_PREVIEWS', $RECPARS{'TILE_PREVIEWS'})
  if (defined $RECPARS{'TILE_PREVIEWS'});

# Chunking check
$Frm->uhdr("RECPAR_NOCHUNKING", $RECPARS{'NOCHUNKING'})
  if (defined $RECPARS{'NOCHUNKING'});
