# -*-cperl-*-

=head1 NAME

_FTS2_APPLY_PHASE_CORRECTIONDS_

=head1 SYNOPSIS

_FTS2_APPLY_PHASE_CORRECTIONDS_

=head1 DESCRIPTION

When FTS2 is in the beam, the phase introduced to the resulting interferogram
by FTS2 needs to be accounted for. This task performs the phase correction. It
assumes that the interferograms in the cube are double-sided.

=head1 OUTPUT FILES

Creates output files with a C<_phs> extension.
The Frame is updated with the output files.

=head1 NOTES

This primitive will operate on interferogram cubes.

=head1 AUTHOR

Coskun Oba E<lt> josh.oba@uleth.ca E<gt>

=head1 COPYRIGHT

Copyright (C) 2010, University of Lethbridge.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

orac_say "\nApplying Phase Correction [Double-Sided]...";

my $ext = "_phs";

# PARAMS
my $degree   = 1;
my ($wnLBound, $wnUBound);

if ($Frm->hdr('FILTER') eq '850') {
  ($wnLBound, $wnUBound) = (11, 12.5); # cm^-1
}
elsif ($Frm->hdr('FILTER') eq '450') {
  ($wnLBound, $wnUBound) = (21, 24); # cm^-1
}
else {
  orac_termerr('No bounds for filter ' . $Frm->hdr('FILTER'));
}

my @outFiles;
for my $i (1..$Frm->nfiles) {
  my ($in, $out) = $Frm->inout($ext, $i);
  my $args  = "in=$in out=$out ";
     $args .= "degree=$degree wnlbound=$wnLBound wnubound=$wnUBound";

  orac_say "Processing " . $out . "...: ";
  my $status = $Mon{smurf_mon}->obeyw("fts2phasecorrds","$args");

  if($status == ORAC__OK) {
    orac_say "DONE\n";
  } else {
    orac_say "FAILED\n";
  }
  push(@outFiles, $out);
}
$Frm->files(@outFiles);
