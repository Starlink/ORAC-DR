# -*-cperl-*-

=head1 NAME

_MAKE_MOSAIC_GROUP_BATCH_ - Create group mosaic in batch mode

=head1 SYNOPSIS

 _MAKE_MOSAIC_GROUP_BATCH_

 _MAKE_MOSAIC_GROUP_BATCH_ METHOD=NEAREST

 _MAKE_MOSAIC_GROUP_BATCH_ MOSTAG=new

=head1 DESCRIPTION

This primitive creates a new Group mosaic from existing Frame
files. It is designed to be used in batch mode only.

The primitive waits until all Frames have been processed and creates a
Group file by combining images from all Frames marked as good. The
images are combined with KAPPA wcsmosaic using variance weighting (so
input images must have variances). It is assumed that the images were
created in the desired output coordinate system, so the first image in
the list is used as the reference.

A warning is issued if the Group contains no good Frames.

=head1 ARGUMENTS

The following arguments are supported:

=over 4

=item B<METHOD>

The method to be used for resampling the images. Default value is
C<nearest>.

=item B<MOSAIC_TASK>

Task to use for combining files. Must be either C<wcsmosaic> or
C<makemos>. Default is C<wcsmosaic>.

=item B<MOSTAG>

Optional name of a tag for which data can be retrieved. No coadd will
be created if the given tag does not exist. No default: will use all
files from all good Frame objects in current Group if not specified.

=item B<VERBOSE>

Flag to denote whether to display extra information. Default is 0
(no).

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 4

=item KAPPA

NDFCOPY, WCSMOSAIC

=item ORAC-DR PRIMITIVES

_ADD_IMAGE_COMPS_, _ALIGN_IMAGES_, _CHECK_MAP_BOUNDS_

=back

=head1 NOTES

=over 4

=item *

It is assumed that all of the input images are aligned to the same
coordinate frame.

=item *

This primitive must not be used in the QL or SUMMIT pipelines.

=back

=head1 OUTPUT DATA

The uhdr entry C<NMOSFILES> will contain the number of files in the
coadd.

=head1 OUTPUT FILES

Creates a single output Group image with a suffix of C<_mos> (or the
input tag if given).

=head1 AUTHORS

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2014 University of British Columbia.
Copyright (C) 2017 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Should I be verbose (default to no)
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Image combination method. Default to nearest neighbour
my $method = get_prim_arg($_PRIM_ARGS_, "METHOD", "nearest");

# Files tagged with this value will be coadded
my $mostag = get_prim_arg($_PRIM_ARGS_, "MOSTAG", undef);

# Proceed if the current Frame is the last member of the Group
if ( $Grp->lastmember($Frm) ) {
  # Select all good Frame files
  my @frmfiles = map { $_->files } grep { (($mostag) ? $_->tagretrieve($mostag) : 1) && $_->tagexists("newimage") } $Grp->members;
  my $nfiles = scalar(@frmfiles);
  $Grp->uhdr("NMOSFILES",$nfiles);

  if ( $nfiles > 0 ) {
    my $suffix = ($mostag) ? $mostag : "mos";
    my $out = $Grp->inout("_$suffix");

    # With only a single file, just ndfcopy the input file to the
    # output, otherwise combine with wcsmosaic
    if ( $nfiles == 1 ) {
      orac_print "Creating Group file from single input file... ";
      $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$frmfiles[0] out=$out");
    } elsif ( $nfiles > 1 ) {
      my $mostask = lc(get_prim_arg($_PRIM_ARGS_, "MOSAIC_TASK", "wcsmosaic"));
      my $use_makemos = ($mostask eq "makemos") ? 1 : 0;

      # If using makemos, the images should be aligned to a common
      # world coordinate system
      if ($use_makemos) {
        my $tmpfrm = $Frm->new;
        $tmpfrm->files(@frmfiles);
        _ALIGN_IMAGES_ METHOD=nearest FRAME=$tmpfrm REFIMAGE=! EXTEN=smurf COMPS=exp_time,weights
        @frmfiles = $tmpfrm->files;
        # Store in the Frame object to delete later
        $Frm->push_intermediates(@frmfiles);
      }

      orac_print "Mosaicking Group file with $mostask combining $nfiles files..."
          if ($verbose);

      # Calculate the relative offsets of each source and shift the
      # WCS to align the peaks for better mosaicking but only for
      # sources processed with the bright_compact config file or from
      # pointing observations, and even then only if the WCS has not
      # already been adjusted.
      if ( ($Frm->uhdr("MAKEMAP_CONFIG_TYPE") =~ /bright_compact/
            || $Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "pointing") &&
           !$Frm->tagexists("wcsslide") ) {

        # Let the user know whats going on.
        orac_print "\nAttempting to register images:\n";

        # if in debug mode, include more info about why this is being done..
        if ($Frm->uhdr("MAKEMAP_CONFIG_TYPE") =~ /bright_compact/){
          orac_debug "(because reduction is using BRIGHT COMPACT config.)\n ";
        }
        elsif ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "pointing"){
          orac_debug "(because its a pointing observation.)\n";
        }

        # Attempt to register the images (will continue if it couldn't succeed).
        _SHIFT_IMAGES_ IMAGES=\@frmfiles VERBOSE=1 INPLACE=1
      }

      my $moslist = write_file_list(@frmfiles);
      my @bounds;
      # Check image is not too large
      my $bounds = "lbnd=! ubnd=!";
      _CHECK_MAP_BOUNDS_ IN=$moslist TASK=WCSMOSAIC VERBOSE=$verbose
      if ( $_CHECK_MAP_BOUNDS_{NEWBOUNDS} == 1 ) {
        my @lbound = @{ $_CHECK_MAP_BOUNDS_{LBOUND} };
        my @ubound = @{ $_CHECK_MAP_BOUNDS_{UBOUND} };
        # Only store the X, Y bounds for later use
        push (@bounds, @lbound[0..1]);
        push (@bounds, @ubound[0..1]);
        $bounds = "lbnd=[".join(",",@lbound)."] ubnd=[".join(",",@ubound)."]";
      } elsif ( $_CHECK_MAP_BOUNDS_{NEWBOUNDS} == -1 ) {
        orac_print "\n";
        orac_termerr "Bounds check failed when making group mosaic - no group file created\n";
      }

      if ($use_makemos) {
        my $args = "in=^$moslist genvar usevar method=mean out=$out logto=neither";
        $Mon{ccdpack_reg}->obeyw("makemos", $args );
      } else {
        # Keep things simple - use first image as reference. Set genvar
        # to null to ensure some sort of variance is generated even if
        # one of the input files has no variance.
        my $args = "in=^$moslist genvar=! variance $bounds method=$method"
          ." out=$out ref=!";
        $Mon{kappa_mon}->obeyw("wcsmosaic","$args");
      }

      # Set a title. The object name needs to be quoted for SETTITLE
      # to deal with spaces.  Place Parameter TITLE before Parameter NDF
      # to prevent object names containing parentheses from confusing the
      # command-line parser, which attributes the parentheses to the NDF.
      my $object = $Frm->uhdr("ORAC_OBJECT");
      my $quoted_title = filter_quoted_string($object, 1);
      $Mon{ndfpack_mon}->obeyw("settitle","title='$quoted_title' ndf=$out");

      my $newbounds = ( scalar(@bounds) == 4 ) ? \@bounds : undef;
      _ADD_IMAGE_COMPS_ INLIST=\@frmfiles OUT=$out COMPS=EXP_TIME,WEIGHTS EXTEN=smurf BOUNDS=$newbounds VERBOSE=0
    }
    $Grp->force_product_update("coadd", $out);
    $Grp->readhdr;
    $Grp->tagset("coadd");
    $Grp->product("newimage");
    $Grp->tagset("newimage");
    if ($verbose) {
      orac_print "done.\n";
      my $nfilestxt = ($nfiles == 1) ? "$nfiles file" : "$nfiles files";
      orac_print "Group file $out created from $nfilestxt\n", "green";
    }
  } else {
    # Error or warning?
    orac_print "\n";
    orac_warn "All Frames in Group marked as bad - no Group file created\n";
  }

} else {
  # Something useful to do here is to store the name of the first map
  # in the Group and use it as a reference for all subsequent Frame
  # maps.
  $Grp->refimage("SKY", $Frm->file)
    if ($Frm->isgood && !$Grp->refimage);

  orac_print "Delaying creation of Group image until last Frame is processed\n"
    if $verbose;
}
