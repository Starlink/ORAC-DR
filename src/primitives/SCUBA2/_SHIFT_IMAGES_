# -*-cperl-*-

=head1 NAME

_SHIFT_IMAGES_ - shift the WCS of images to a common position

=head1 SYNOPSIS

 _SHIFT_IMAGES_ IMAGES=\@images

 _SHIFT_IMAGES_ FRAME=$Frm INITPOS=\@radec

=head1 DESCRIPTION

This primitive shifts the input images so that the source position is
the same in each. The reference position is defined as follows:

=over 2

=item *

For calibrators, the images are shifted to coincide with the SkyRef
attribute in the WCS.

=item *

For other sources, the peak position of the first file is located and
all subsequent images are shifted to that. Processing is terminated
immediately if no peak could be located near the image centre.

=item *

Alternatively the images are shifted to a given reference position
(passed in via recipe parameters).

=item *

For images in offset coordinate systems, the images are shifted to
(0,0).

=back

Copies of the original files are made unless the B<INPLACE> flag is
true.

=head1 ARGUMENTS

The following arguments are supported:

=over 2

=item B<FRAME>

An ORAC-DR Frame object containing the images to shift. Default is the
current Frm.

=item B<IMAGES>

Reference to an array of file names. No default. Overrides the use of
B<FRAME>.

=item B<INPLACE>

Flag to denote that the WCS should be modified in place. Default is 0
(do not modify in place).

=item B<VERBOSE>

Flag to indicate whether the shifts should be reported. Default is 0
(no reporting).

=item B<USE_SKYREF>

Force use of the SkyRef attribute even if the object is not a
recognised calibrator.

=back

=head1 EXTERNAL TASKS

The following external tasks are used:

=over 2

=item KAPPA

NDFCOPY, WCSSLIDE

=item ORAC-DR PRIMITIVES:

_ADD_LOG_ENTRY_, _FIND_MAP_PEAK_

=back

=head1 OUTPUT DATA

The given Frame object is updated with the shifted files provided the
shift could be determined for multiple files.

The fitted peak information is written to the primitive hash
as the entry B<FITPEAKS>.

=head1 OUTPUT FILES

If a Frame object is given, it will contain only those files for which
a solution could be found. The WCS is amended for those files.

If the user requested that the original files not be shifted, then the
shifted (registered) files will have the suffix C<_reg>.

=head1 NOTES

=over 2

=item *

The list of files should be of the same source and all should be in
the same coordinate system. The WCS info for the first file in the
list is used to obtain the reference position.

=item *

If used C<blind> (i.e. with B<INITPOS> unset) then the brightest
object in each image must be the same source. B<INITPOS> must be given
if this cannot be guaranteed.

=item *

The B<INPLACE> parameter should be true for the pipeline, false for
PICARD to preserve the original input files.

=item *

If both B<IMAGES> and B<FRAME> are given, the images will be stored in
the given Frame object.

=back

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2010-2011,2013-2014 University of British Columbia. All
Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# List of input images
my $imageref = get_prim_arg($_PRIM_ARGS_, "IMAGES", undef);

# Input Frame object
my $Frmobj = get_prim_arg($_PRIM_ARGS_, "FRAME", $Frm);

# Are the images to be shifted `in place' or are copies to be made?
my $modify_in_place = get_prim_arg($_PRIM_ARGS_, "INPLACE", 0);

# Force use of SkyRef?
my $use_skyref = get_prim_arg($_PRIM_ARGS_, 'USE_SKYREF', 0);

# Sanity check for inputs
my $have_data = 0;
if ($imageref) {
  if (ref($imageref) eq "ARRAY") {
    $have_data = 1;
    $Frmobj->files(@$imageref); # Avoid calling configure() method
  } else {
    orac_err "IMAGES given a reference but not of an array\n";
  }
} else {
  $have_data = 1 if ($Frmobj->isa("ORAC::Frame"));
}

# Quit if there are no images to shift
unless ($have_data) {
  orac_warn "No images to shift - returning to caller\n";
  return ORAC__OK;
}

# Make a copy of each input file if INPLACE is false
unless ( $modify_in_place ) {
  my @out;
  foreach my $i (1 .. $Frmobj->nfiles) {
    my ($in, $out) = $Frmobj->inout("_reg", $i);
    $Mon{ndfpack_mon}->obeyw("ndfcopy","in=$in out=$out");
    push(@out, $out);
  }
  $Frmobj->files(@out);
}

# Verbosity flag - default to false
my $verbose = get_prim_arg($_PRIM_ARGS_, "VERBOSE", 1);

# Assumptions:
# - images are all of same source
# - the brightest source in the images is the one to register to
# - images have same wcs info so only need to use one
# - images are all in same coordinate system

# Obtain WCS from first image
my $wcs = $Frmobj->read_wcs( $Frmobj->file(1) );
my $isoffset = $wcs->Get("AlignOffset");
my $system = lc($wcs->Get("System(1)"));
# Treat GAPPT as J2000 for our purposes
my $cosys = ($system eq "fk5" || $system eq "gappt") ? "J2000" : $system;
my $units = ($cosys eq "J2000") ? "sexagesimal" : "degrees";

my (@shifted, @refpos);

# Define the reference position from WCS, given reference position, or
# by finding the peak in the first file
my ($refcoords, $register_to_first);
my $refcosys = $cosys;
if ( $isoffset ) {
  orac_print "Shifting images relative to (0,0)\n";
  @refpos = ($units eq "sexagesimal") ? ("00:00:00.0","00:00:00.0") : (0,0);
} else {
  # Use the SkyRef position for calibrators since they are known
  if ( $Cal->iscalsource($Frm->hdr("OBJECT")) or $use_skyref ) {
    my $skyref = $wcs->Get("SkyRef");
    $skyref =~ s/,//g;
    @refpos = split(/\s+/, $skyref);
    orac_print "Shifting images relative to sky reference position: $refpos[0], $refpos[1]\n"
      if ($verbose);
  } else {
    # Otherwise use the peak position of the first file, assumed to
    # be close to the map centre
    if (defined $Frm->uhdr("RECPAR_REGISTER_XY")) {
      @refpos = @{$Frm->uhdr("RECPAR_REGISTER_XY")};
      $refcosys = $Frm->uhdr("REGISTER_COSYS");
      orac_print "Registering to given reference position: $refpos[0], $refpos[1] ($refcosys)\n"
	if ($verbose);
    } else {
      # Find the peak in the first image - assume it will be the same
      # in all images!
      my $image = $Frmobj->file(1);
      _FIND_MAP_PEAK_ GAUSSIAN=0 IMAGE=$image VERBOSE=0
      my $posn = $_FIND_MAP_PEAK_{POSITION};
      if ( @$posn ) {
	@refpos = @{$posn};
	$register_to_first = 1;
	orac_print "Shifting images relative to $image\n"
	          ."Registering to peak found at $refpos[0], $refpos[1]\n"
	    if ($verbose);
	push(@shifted, $image);
      } else {
	# Try next file or give up?
	orac_err "Unable to locate a peak to register images\n";
	return ORAC__OK;
      }
    }
  }
  if ($refcosys eq "J2000") {
    $refcoords = Astro::Coords->new( ra => $refpos[0], dec => $refpos[1],
				     type => $refcosys, units => "sexagesimal");
  } else {
    $refcoords = Astro::Coords->new( long => $refpos[0], lat => $refpos[1],
				     type => $refcosys, units => "degrees");
  }
  if ($refcosys ne $cosys) {
    @refpos = ($cosys eq "J2000") ? ($refcoords->ra(format => 's'),
				     $refcoords->dec(format => 's'))
      : ($refcoords->glong(format => 'deg'), $refcoords->glat(format => 'deg'));
  }
}

# Create a hash to store the fit results, indexed by file name - begin
# with the reference position
my %fitpeaks = (refpos => {x0 => $refpos[0], y0 => $refpos[1], dx => 0, dy => 0});

use Astro::PAL qw/:constants/;
my $calc_offsets = sub {
  my $coords = shift;
  my (@dpos_as, $ycoord);
  if ($cosys eq "J2000") {
    # Calculate the distance between this position and the reference
    my ($deltax, $deltay) = $refcoords->distance( $coords );
    # Retrieve offsets in arcsec
    @dpos_as = ($deltax->arcsec, $deltay->arcsec);
    $ycoord = $coords->dec;
  } else {
    @dpos_as = (DR2AS*($coords->glong - $refcoords->glong),
		DR2AS*($coords->glat  - $refcoords->glat));
    $ycoord = $coords->glat;
  }
  # The shift in Dec is +ve or -ve depending on the sign of the Dec
  $dpos_as[1] = -$dpos_as[1] if ($ycoord < 0);
  return @dpos_as;
};

# Now shift images to reference position determined above
my (@dx, @dy);
foreach my $image ($Frmobj->files) {
  # Skip the first file if it's used to register the others
  if ($register_to_first) {
    $register_to_first = 0;
    next;
  }

  # Need to slide the WCS for the exp_time and weights components as
  # well. Test that these components exist before adjusting the WCS.
  my @comps = ("data");
  foreach my $ndfcomp ("exp_time", "weights", "nefd") {
    my $fullcomp = "more.smurf.$ndfcomp";
    _COMPONENT_EXISTS_ COMPONENT=$fullcomp FILE=$image
    push(@comps, ".".$fullcomp) if ($_COMPONENT_EXISTS_{EXISTS});
  }

  # Find the peak nearest the reference position
  _FIND_MAP_PEAK_ GAUSSIAN=0 IMAGE=$image INITPOS=\@refpos
  my $posn = $_FIND_MAP_PEAK_{POSITION};

  # Store name of file if it has a peak, otherwise skip to next file
  if (defined $posn) {
    push(@shifted, $image);
  } else {
    $fitpeaks{$image} = { x0 => $refpos[0], y0 => $refpos[1],
			  dx => 0, dy => 0 };
    orac_warn "Unable to find a peak for $image - will not shift WCS\n";
    next;
  }

  # Shift image and all sub-components from current position to new
  # position
  my ($dx, $dy, $dxas, $dyas);
  if ($isoffset) {
    # In offset coord systems we can shift by the fitted offsets directly
    my $centre = ( $units eq "sexagesimal" ) ? "00:00:00.0,00:00:00.0"
      : "0.0,0.0";
    foreach my $comp (@comps) {
      my ($ndf, $dz) = ($image, ",0");
      if ($comp ne "data") {
	$ndf .= $comp;
	$dz = "";
      }
      my $args = "ndf=$ndf stype=relative fid='".$centre."$dz' obj='"
	.$posn->[0].",".$posn->[1]."$dz'";
      $Mon{kappa_mon}->obeyw("wcsslide","$args");
    }
    $fitpeaks{$image} = { x0 => $posn->[0], y0 => $posn->[1],
			  dx => $posn->[0], dy => $posn->[1] };
  } else {
    my $coords;
    if ($cosys eq "J2000") {
      $coords = Astro::Coords->new( ra => $posn->[0], dec => $posn->[1],
				      type => $cosys, units => $units );
    } else {
      $coords = Astro::Coords->new( long => $posn->[0], lat => $posn->[1],
				    type => $cosys, units => $units );
    }
    ($dxas, $dyas) = $calc_offsets->($coords);
    foreach my $comp (@comps) {
      my ($ndf, $dz) = ($image, ",0");
      if ($comp ne "data") {
	$ndf .= $comp;
	$dz = "";
      }
      my $args = "ndf=$ndf stype=absolute abs=[$dxas,$dyas,$dz]";
      $Mon{kappa_mon}->obeyw("wcsslide","$args");
    }
    $fitpeaks{$image} = { x0 => $posn->[0], y0 => $posn->[1],
			  dx => (sprintf "%.3f", $dxas),
			  dy => (sprintf "%.3f", $dyas) };
  }

  # Report the shifts for each image if requested
  if ( $verbose ) {
    if ( $isoffset ) {
      my $x_off = ( $units eq "sexagesimal" ) ?
	Astro::Coords::Angle::Hour->new($posn->[0], units => $units)
	  : Astro::Coords::Angle->new($posn->[0], units => $units);
      my @off = ( $x_off,
		  Astro::Coords::Angle->new($posn->[1], units => $units) );
      use Astro::Coords::Offset;
      my $coords = Astro::Coords::Offset->new( @off, system => $cosys );
      ($dx, $dy) = $coords->offsets;
      ($dxas, $dyas) = ($dx->arcsec, $dy->arcsec);
    }
    orac_print " Shifting $image by ".(sprintf "%4.2f", -$dxas).", "
      .(sprintf "%4.2f", -$dyas)." arcsec ($cosys)\n", "green";
  }
}

if (@shifted) {
  if (@shifted == 1 && $Frmobj->nfiles > 1) {
    orac_warn "Only 1 of ".($Frmobj->nfiles)." images shifted - check other input images for sources\n";
    orac_warn "Frame object will not be updated\n" if ($verbose);
  } else {
    # Store the number of shifted files in the global Frame object
    $Frm->uhdr("NSHIFT", scalar(@shifted));
    # Store the shifted files in the given Frame object
    $Frmobj->files(@shifted);
    $Frmobj->tagset("wcsslide");
  }
  # Write a log file with the shifts if requested
  if ($Frm->uhdr("RECPAR_LOGFILE")) {
    my $logfile = "fitpos";
    my @params = sort (keys %{$fitpeaks{refpos}});
    my $params = ["File", @params];
    foreach my $file (sort keys %fitpeaks) {
      my $peak = $fitpeaks{$file};
      my @values = ($file);
      push(@values, map { $peak->{$_} } @params);
      _ADD_LOG_ENTRY_ LOGFILE=$logfile PARAMS=$params ENTRIES=\@values PARLIST=NONE
    }
  }
} else {
  orac_warn "No images were shifted: check input images for source(s)\n";
}

$_PRIM_ARGS_->{FITPEAKS} = \%fitpeaks;
