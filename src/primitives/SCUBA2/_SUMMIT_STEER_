# -*-cperl-*-

=head1 NAME

_SUMMIT_STEER_ - steering primitive for the Summit pipeline

=head1 SYNOPSIS

_SUMMIT_STEER_

=head1 DESCRIPTION

This primitive checks and sets a number of uhdr entries which dictate
the processing of data in the Summit pipeline.

If the percentage completion criteria are satisfied and a new Group
image has been created, no further processing will take place; the
recipe simply exits.

This primitive should ONLY be called in summit recipes (denoted by
the C<_SUMMIT> suffix).

=head1 OUTPUT DATA

The Frame has two new uhdr entries called C<SUMMIT> and C<TCS_INDEX>.
The former is a flag to indicate that the smmit pipeline is running;
the latter stores the final TCS index entry (in the JCMT state
structure) for data in the current Frame.

The Group uhdr has the entry C<LAST_INDEX> set to 1 if it a) does not
exist or b) exists but is less than the current TCS index indicating a
new observation has started. (This flag is later updated with the
value of the current Frame C<TCS_INDEX> when data are processed into a
map.)

If a new observation corresponding to an existing Group has started,
the C<OBSCOMP> and C<SCANCOMP> flags are reset to 0.

The Group uhdr also has an entry C<DURATION_SCIENCE> which tracks the
increase in integration time for a given target.

=head1 AUTHOR

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2012,2014 University of British Columbia.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# This is the summit pipeline
$Frm->uhdr("SUMMIT", 1);

# Issue a warning if the CSO tau values in the header are null
if ($Frm->hdr("TAUSRC") =~ /^\d/) {
  orac_warn "****  TAUSRC is 0 - CSO tau values are not defined ****\n"
    if ($Frm->hdr("TAUSRC") == 0);
}

# Check for a single SEQ_TYPE
if (!defined $Frm->hdr("SEQ_TYPE")) {
  if ($Frm->hdr("NSUBSCAN")) {
    # This is probably bad - the Frame contains data from different
    # sequences but the subscan number is the same for all files
    orac_err "************************************************************************\n";
    orac_err "Frame contains data from differing sequences - something has gone wrong\n";
    orac_err "************************************************************************\n";
    return ORAC__TERM;
  } else {
    # We have multiple sequence-types because the pipeline has fallen
    # behind
    if (!defined $Frm->hdr("SHUTTER")) {
      # If we have mixed shutter data, just pick out the open-shutter files
      orac_print "Dealing with mixed shutter data - ";
      my @nondarks = map { $Frm->file($_) } grep { $Frm->hdrval("SHUTTER",$_-1) > 0 } 1..$Frm->nfiles;
      $Frm->files(@nondarks);
      $Frm->readhdr;
      # If the Frame now contains only fastflats, they should be
      # tagged as dark to prevent them being treated as science data
      my $dark_only = (defined $Frm->hdr("SEQ_TYPE") &&
                       $Frm->hdr("SEQ_TYPE") =~ /fastflat/i) ? 1 : 0;
      $Frm->tagset("dark") if ($dark_only);
    }
  }
}

# Decide if this frame contains science data
my @sequences = $Frm->hdrval("SEQ_TYPE");
my $obstype = $Frm->hdr("OBS_TYPE");
my $is_sci = grep { $_ eq $obstype } @sequences;

# Record the sequence length of the most recent science frame
my @seqstarts = $Frm->hdrval("SEQSTART",-1);
my @seqends = $Frm->hdrval("SEQEND",-1);

if ($is_sci) {
  my $seqstart;
  my $seqend;
  if (@sequences == 1) {
    my $seq = $sequences[0];
    @sequences = map { $seq } scalar @seqstarts;
  }

  if (@sequences == @seqstarts) {
    # same number - we want the highest start and ends
    for my $i (0..$#sequences) {
      next unless $sequences[$i] eq $obstype;
      if (!defined $seqstart) {
        $seqstart = $seqstarts[$i];
        $seqend   = $seqends[$i];
        next;
      }

      if ($seqstarts[$i] > $seqstart) {
        $seqstart = $seqstarts[$i];
        $seqend   = $seqends[$i]
      }

    }
  } # else confusingly different sequence headers and seq_types

  if (defined $seqstart && defined $seqend) {
    my $seqlen = $seqend - $seqstart + 1;
    $Frm->uhdr("SEQLEN_FRAME", $seqlen );
  }

}

# Decide if we are looking at elapsed time or TCS index when
# processing maps. A DAISY will only have a TCS_INDEX value of 1 and 2
# and the 2 will be because of overrun.
my $use_tcs_index = 1;
if ($Frm->hdr("SAM_MODE") eq 'scan' &&
    $Frm->hdr("SCAN_PAT") =~ /daisy|liss/i &&
    $is_sci ) {
  # Work out the duration and add it to the current total
  my $duration = $Frm->duration_science();
  my $sofar = $Grp->uhdr("TIME_SINCE_LAST_MAP");
  $sofar += $duration;
  $Grp->uhdr("TIME_SINCE_LAST_MAP", $sofar );

  $use_tcs_index = 0;
}
$Grp->uhdr("USE_TCS_INDEX", $use_tcs_index );

if ($use_tcs_index) {
  # Store current TCS_INDEX - this will be VAL__BADI for dark data but
  # this shouldn't affect any of the decision making below.
  $Frm->uhdr("TCS_INDEX", $Frm->jcmtstate("TCS_INDEX", "end"));

  # Check and set the LAST_INDEX flag
  if ( defined $Grp->uhdr("LAST_INDEX") ) {
    # If it exists already check if a new observation has started and
    # reset it to the current value. A new obs has started if the
    # TCS_INDEX is now less than the LAST_INDEX. Note that this will not
    # store a new value of LAST_INDEX if it is already 1, but if that's
    # the case then it won't matter.
    if ( $Frm->uhdr("TCS_INDEX") < $Grp->uhdr("LAST_INDEX") ) {
      $Grp->uhdr("LAST_INDEX",1);
      # Reset percentage and scan-pattern completion and new image flags
      # so we process data from a new observation
      $Grp->uhdr("OBSCOMP",0);
      $Grp->uhdr("SCANCOMP",0);
    } elsif ($Frm->uhdr("TCS_INDEX") > $Grp->uhdr("LAST_INDEX")) {
      # If the TCS_INDEX has changed, unset OBSCOMP so that subsequent data won't be ignored

      # Unset the OBSCOMP flag except if we're near the end of a long
      # observation - no point leaving a few flatfielded data files
      # around
      if ($Frm->hdrval("NSUBSCAN") > 60) {
        $Grp->uhdr("OBSCOMP", 1);
      } else {
        $Grp->uhdr("OBSCOMP", 0);
      }
    }
  } else {
    # No pre-existing value so set it to 1
    $Grp->uhdr("LAST_INDEX", 1);
  }
}

# Reset all flags if the observation changes
if ( defined $Grp->uhdr("CURRENT_OBS") && $Grp->uhdr("CURRENT_OBS") != $Frm->hdr("OBSNUM")) {
  $Grp->uhdr("OBSCOMP",0);
  $Grp->uhdr("SCANCOMP",0);
  $Grp->uhdr("LAST_INDEX",1);
  $Grp->uhdr("USE_TCS_INDEX",0);
  $Grp->uhdr("TIME_SINCE_LAST_MAP",0);
  $Grp->uhdr("PREV_SEQLEN",undef);
  $Grp->uhdr("RUNNING_PREVIEW",undef);
}
$Grp->uhdr("CURRENT_OBS", $Frm->hdr("OBSNUM"));

# Now that we've checked for a new observation, ignore new data if a
# new Group image was created from SCAN data using the
# percentage-completion criterion - this is satisfied when the OBSCOMP
# header is true, and a new Group image was created on the previous
# pass through the recipe. The easiest option is just to terminate the
# recipe here.
if ( $Grp->product && $Grp->product eq "newimage" && $Grp->uhdr("OBSCOMP") ) {
  orac_warn "Percentage completion criteria satisfied - skipping remaining data\n";
  return ORAC__TERM;
}

# Accumulate the science duration
if ($Grp->uhdr("DURATION_SCIENCE")) {
  my $duration = $Grp->uhdr("DURATION_SCIENCE");
  $duration += $Frm->uhdr("DURATION_SCIENCE");
  $Grp->uhdr("DURATION_SCIENCE", $duration);
} else {
  $Grp->uhdr("DURATION_SCIENCE", $Frm->uhdr("DURATION_SCIENCE"));
}
