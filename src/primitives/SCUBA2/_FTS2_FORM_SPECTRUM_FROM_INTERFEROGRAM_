# -*-cperl-*-

=head1 NAME

_FTS2_FORM_SPECTRUM_FROM_INTERFEROGRAM_ - forms spectrum from interferogram

=head1 SYNOPSIS

_FTS2_SPECTRUM_

=head1 DESCRIPTION

Computes the spectrum from the interferogram.

=head1 OUTPUT FILES

Creates output files with a C<_spc> extension.
The Frame is updated with the output files.

=head1 NOTES

This primitive will operate on interferogram cubes.

=head1 AUTHOR

Coskun Oba E<lt> josh.oba@uleth.ca E<gt>

=head1 COPYRIGHT

Copyright (C) 2010, University of Lethbridge.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA

=cut

orac_say "\nComputing Spectrum...\n";

my $ext = "_spec";
my $zeropad    = 1;
my $resolution = 0.0;

my @outFiles;
for my $i (1..$Frm->nfiles) {
  my ($in, $out) = $Frm->inout($ext, $i);
  my $args = "in=$in out=$out ";

  my $ba = $in;   # i.e. 's8c...'
  my $b = '';
  my $a = '';
  $b = substr($ba,1,1);
  $a = substr($ba,2,1);

  # Set band and subarray specific Spectral Filter Profile (SFP) calibration file
  my $sfp = "$ENV{'ORAC_DATA_CAL'}/fts/sfp_s$b$a.sdf";
  my $doSfp = 0;

  if (-e $sfp) {
    orac_say "Using Spectral Filter Profile calibration file: " . $sfp;
    $doSfp = 1;
  } else {
    orac_say "Spectral Filter Profile calibration file: " . $sfp . " not found!  Skipping filter..."
  }

  $args .= "sfp=" . ( $doSfp ? $sfp : "!" ) . " ";
  $args .= "zeropad=$zeropad ";
  $args .= "resolution=$resolution ";
  if ($doSfp) {
    $args .= "wnsfpfirst=! ";
    $args .= "wnsfplast=! ";
  }

  orac_say "Processing " . $out . "...: ";
  my $status = $Mon{smurf_mon}->obeyw("fts2spectrum","$args");

  if($status == ORAC__OK) {
    orac_say "DONE\n";
  } else {
    orac_say "FAILED\n";
  }
  push(@outFiles, $out);
}
$Frm->files(@outFiles);
