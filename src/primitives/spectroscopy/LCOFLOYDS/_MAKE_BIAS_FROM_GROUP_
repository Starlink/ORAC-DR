#+
# Name:
#    _MAKE_BIAS_FROM_GROUP_
#
# Purpose:
#    Makes masterbias from the current group of frames.
#
# Language:
#    Perl5
#
# Description:
#    This primitive makes a masterbias from the current group. It uses a
#    median to combine the frames pixel by pixel.  The primitive
#    files the resultant masterbias in its calibration index.
#
# Arguments:
#    METHOD = CHARACTER (Given)
#       The method used to combine frames to form the bias.  See
#       parameter METHOD of CCDPACK/MAKEBIAS (SUN/139) for the options.
#       The main two in practice will be "median" or "mode".  The
#       former is an weighted median.
#       The "mode" option uses an iteratively "sigma clipped" mean which
#       approximates to the modal value.  ["median"]
#
# Notes:
#    -  This primitive is suitable for optical imaging instruments.
#    -  Processing only occurs for bias frames, and when the steering
#       header MAKE_BIAS is true.
#    -  The bias is displayed.
#
# Tasks:
#    CCDPACK: MAKEBIAS; KAPPA: FITSMOD, NDFCOPY.
#
# Output Data:
#    The masterbias.  It is called
#    "bias_<instrument>_<UT night>_bin<Xbin>x<Ybin>" where <instrument> is the
#    LCOGT instrument identifier and <Xbin>,<Ybin> are the binning factors
#    in X and Y.
#
#
# Authors:
#    TAL: Tim Lister (LCOGT)
#
# Copyright:
#    Copyright (C) 2012 Las Cumbres Observatory Global Telescope Inc.
#    All Rights Reserved.
#
#-
use File::Copy;

# Selection
# =========
#
# This should only be performed on OBJECT, SKY or calibration LAMP
# frames, when it's time make a bias.
    my $obstype = $Frm->uhdr( "ORAC_OBSERVATION_TYPE");
    my $stuff = "N/A";
    if ( defined $Frm->uhdr( "MAKE_BIAS" ) ) {
        $stuff = $Frm->uhdr( "MAKE_BIAS" );
    }
#    print "SVN DBG:$obstype $stuff\n";
    if (  $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) eq "BIAS" &&
           $Frm->uhdr( "MAKE_BIAS" ) ) {

# Record the current file, to be restored at the conclusion.
# The current frame will normally be the last group member, but
# this may not be the Frm needed if there are multiple filters
# represented.
        my $inputfile = $Frm->file;

# Get the cycle number.  Supply a default for recipes not supporting
# this yet.  Defined because the default is zero.
#       my $cycleno = $Frm->uhdr( "CYCLE_NUMBER" );
#       $cycleno = defined( $cycleno ) ? $cycleno : 0;

# Arguments
# =========

# Obtain the value for the combination method.
        my $method = ( $_MAKE_BIAS_FROM_GROUP_{METHOD} || "median" );

# Make a bias for each filter within the group.
        orac_print "Making masterbias\n";

# Extract from the main group those frames belonging to this group.
#          my $cycleGrp = $Grp->subgrp( CYCLE_NUMBER => $cycleno,
#                                       ORAC_FILTER => $filter );

# Make this the main group for this context.
#             my $Grp = $cycleGrp;

# Form a list of input file names for MAKEBIAS from the other members
# of the group.  This is not as obvious as it sounds since we are
# trying to do this by looking at the current file values for each
# Frame object in the loop.  First time around everything is fine.
# Second time around we realise that the previous frames now have the
# wrong names since they have been bias-fielded etc.  We now have to
# construct the input names from the template.  The template is the
# current frame name.
# XXX. TAL 2011/11/03. template() currently breaks things by assigning
# all Group members the same filename...
#             $Grp->template( $Frm->file );

# Set a new current file with the same filter.
        my $Frm = $Grp->frame( 0 );

# Make lists of files to process
# ==============================

# Form a list of input file names for CCDPACK tasks.  Set up the object
# list assuming that everything in the Group members list contains the
# file pointer to pre-biasfielded data.
        my @objects = $Grp->membernames;
        my $objlist = join( ",", @objects );

# Create text file to hold the list of input files, one per line.  This
# is needed because expanded lists of files may make the command line too
# long for the ADAM message system.
        unlink( "makebias.inlist$$" );
        open( my $fh_inlist, ">makebias.inlist$$" ) ||
          orac_throw "Unable to open makebias.inlist$$ to create a list of frames to process.  Error: $!.\n";
        print $fh_inlist join( "\n", @objects ), "\n";
        close( $fh_inlist );

# Generate the bias's name.
# =========================

# Form the bias name, from the group number. If it gets more complicated later
# we can add a new primitive as was done for _GET_DARK_NAME_.
#    _GET_BIAS_NAME_
#    my $bias = $_GET_BIAS_NAME_{NAME};
        my $groupname = $Frm->findgroup;
#       print "Groupname1=$groupname\n";
        $groupname =~ s/BIAS//;
#       print "Groupname2=$groupname\n";
        my $out = "bias_" . $Frm->uhdr("ORAC_INSTRUMENT") . "_" . $Frm->uhdr( "ORAC_UTDATE") . $groupname;
#       print "biasname=$out\n";

# Make a master bias
# ======================

# Assign the other parameters.
        my $param1 = "method=$method zero=false";
        my $param2 = "in='^makebias.inlist$$' out=$out"; # title=\'Master bias\'";

# Median filter the raw biases to produce the biasframe.
        $Mon{ "ccdpack_red" }->obeyw( "makebias", "$param1 $param2" );
        unlink( "makebias.inlist$$" );

# Record and display the bias
# ===========================

# Set the current bias in the calibration object.
#       _FILE_BIAS_ FILE=$out
        $Frm->file( $out );

        $Cal->bias( $Frm->file );
# Report the processing status.
        orac_print $Frm->file . " filed as the current bias\n";

# Add this frame to the index of bias frames, along with its headers and
# user headers.
        $Cal->biasindex->add( $Frm->file, { %{ $Frm->hdr }, %{ $Frm->uhdr } } );

# Report the processing status.
        orac_print $Frm->file . " added to index file\n\n";

# Report the status of the processing.
        orac_print "Frames $objlist used for bias\n";

# If we have a final destination environment var. set, convert to fits and copy
# files there.
        if ( defined $ENV{FINAL_DATA_OUT} ) {
          $Frm->file( $out );
          _ADD_PIPELINE_VERSION_
          my $file = $Frm->file( $out );
          my $bias_used = 'N/A';
          my $dark_used = 'N/A';
          my $flat_used = 'N/A';
          my $shut_used = 'N/A';
          my $mask_used = $Cal->mask;
#          print "mask=$mask_used\n";
# Check for too long length (67 is max allowed by SUBPAR)
          if ( length($mask_used) > 50 ) {
            my @mask_values = split('oracdr/', $mask_used);
# No 'oracdr/' found in filename, must be local not from cal/. Resplit on '/'.
            if ( $#mask_values == 0 ) {
              @mask_values = split('/', $mask_used);
              $mask_used = $mask_values[-1];
            } else {
              $mask_used = $mask_values[1];
            }
            $mask_used =~ s/[.]sdf//;
#          print "mask=$mask_used\n";
          }
          my $fringe_used = 'N/A';
        #  print "bias=$bias_used, dark=$dark_used, flat=$flat_used, shut=$shut_used, mask=$mask_used\n";

# Determine processing steps done
          my $ovscan_correct = 0;
          $ovscan_correct = $Frm->uhdr( "OVSCAN_CORRECT")
                               if(defined $Frm->uhdr( "OVSCAN_CORRECT"));
          my $bias_removed = -1;
          $bias_removed = $Frm->uhdr( "BIAS_REMOVED")
                               if(defined $Frm->uhdr( "BIAS_REMOVED"));
          my $dark_removed = -1;
          $dark_removed = $Frm->uhdr( "DARK_REMOVED")
                               if(defined $Frm->uhdr( "DARK_REMOVED"));
          my $ovscan_removed = -1;
          $ovscan_removed = $Frm->uhdr( "OVSCAN_REMOVED")
                               if(defined $Frm->uhdr( "OVSCAN_REMOVED"));
          my $flat_removed = -1;
          my $fringe_removed = -1;

          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATOV VALUE=$ovscan_correct, COMMENT=Status|flag|for|overscan|correction
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATBI VALUE=$bias_removed, COMMENT=Status|flag|for|bias|frame|correction
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATDA VALUE=$dark_removed, COMMENT=Status|flag|for|dark|frame|correction
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATTR VALUE=$ovscan_removed, COMMENT=Status|flag|for|overscan|trimming
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATFL VALUE=$flat_removed, COMMENT=Status|flag|for|flat|frame|correction
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1STATFR VALUE=$fringe_removed, COMMENT=Status|flag|for|fringe|frame|correction

          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDBIAS VALUE=$bias_used, COMMENT=Id.|of|bias|frame|used
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDDARK VALUE=$dark_used, COMMENT=Id.|of|dark|frame|used
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDFLAT VALUE=$flat_used, COMMENT=Id.|of|flat|frame|used
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDSHUT VALUE=$shut_used, COMMENT=Id.|of|shutter|corr.|frame|used
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDMASK VALUE=$mask_used, COMMENT=Id.|of|mask|file|used
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1IDFRNG VALUE=$fringe_used, COMMENT=Id.|of|fringe|frame|used
# Set image quality flag (unassessed for now)
          my $img_status = -1;
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1QIMGST VALUE=$img_status, COMMENT=Image|taking|status|(bitmask;-1=Unknown,0=OK)

# Set public/private flag and release date
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1PUBPRV VALUE='public' COMMENT=Public|or|private|data?

          my $pubdate =  $Frm->hdr( "ORACDATETIME");
#      orac_print "$pubdate\n";
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=L1PUBDAT VALUE=$pubdate COMMENT=[UTC]|Date|the|frame|becomes|public

          _SET_FILE_FITS_ITEM_ FILE=$file KEY=ENGSTATE VALUE='OPERATIONAL'

# Set recipe used
          my $recipe = $Frm->recipe;
#      orac_print "Recipe=$recipe\n";
          _SET_FILE_FITS_ITEM_ FILE=$file KEY=PCRECIPE VALUE=$recipe COMMENT=Processing|Recipes|required/used

          _CONVERT_TO_FITS_
          my $fitsbiasframe = $_CONVERT_TO_FITS_{FILENAME};

          move($fitsbiasframe, $ENV{FINAL_DATA_OUT});
          orac_print "Moving ". $fitsbiasframe . " to final data place=" . $ENV{FINAL_DATA_OUT} . "\n";
        }
# Restore the original Frame file.
        $Frm->file( $inputfile );

        orac_print "\n";
    }


# Podule
# ======

=head1 NAME

_MAKE_BIAS_FROM_GROUP_ -- Makes a masterbias from the current group of frames.

=head1 DESCRIPTION

This primitive makes a master bias from the current group. The primitive
files the resultant bias in its calibration index.

=head1 ARGUMENTS

=over 4

=item METHOD = CHARACTER (Given)

The method used to combine frames to form the bias.  See
parameter METHOD of CCDPACK/MAKEBIAS (SUN/139) for the options.
The main two in practice will be "median" or "mode".  The
former is an weighted median.
The "mode" option uses an iteratively "sigma clipped" mean which
approximates to the modal value.  ["median"]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for optical imaging instruments.

=item *

Processing only occurs for bias frames, and when the steering header
MAKE_BIAS is true.

=item *

The bias is displayed.

=back

=head1 TASKS

CCDPACK: MAKEBIAS; KAPPA: FITSMOD, NDFCOPY.

=head1 OUTPUT DATA

The masterbias.  It is called
"bias_E<lt>instrumentE<gt>_E<lt>UT nightE<gt>_binE<lt>XbinE<gt>xE<lt>YbinE<gt>"
where E<lt>instrumentE<gt> is the LCOGT instrument identifier and E<lt>XbinE<gt>,
E<lt>YbinE<gt> are the binning factors in X and Y.

=head1 AUTHORS

Tim Lister (tlister@lcogt.net)

=head1 COPYRIGHT

Copyright (C) 2012, 2015 Las Cumbres Observatory Global Telescope Inc.
All Rights Reserved.

=cut
