=head1 NAME

_MAKE_RAW_FILE_ - Copies raw data to a _mraw file.

=head1 DESCRIPTION

Copies its input data (which is usually the raw data from
$ORAC_DATA_IN) data to a _mraw file in $ORAC_DATA_OUT, making it into a
single NDF if possible, retaining the HDS structure otherwise.

If a single NDF is being created, we call the display system to display
the _mraw file.

This is the first step in L<_SPECTROSCOPY_HELLO_>, and allows to to carry
out in-place manipulations of the "raw" files without needing write
access to $ORAC_DATA_IN or worrying about modifying the real raw data
files, which are considered, to the instrument scientist at least, to
be sacred.


=head1 ARGUMENTS

None.

=head1 TASKS

=over 4

=item KAPPA

C<NDFCOPY>

=back

=head1 OUTPUT FILES

C<_mraw> - Modifiable copies of the raw data, as single NDFs if possible.

=head1 AUTHOR

Aforementioned instrument scientist -

Paul Hirst E<lt>p.hirst@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

Based on code by Frossie Economou

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
Copyright (C) 2015 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use Starlink::HDSPACK qw/ copy_hdsobj /;

my $nfiles = $Frm->nfiles;

# If possible, make a single NDF.
if ( $nfiles == 1 ) {

   # A single integration file. Convert to an NDF file.
   my ($in, $out) = $Frm->inout("_mraw");
   $Mon{"ndfpack_mon"}->obeyw( "ndfcopy", "in=$in out=$out title=$out" );

   # Copy the primary input container file's HEADER FITS airlock to the
   # output NDF.  The HEADER NDF is separate from .In and .InBEAMA/B NDFs
   # that may be present in the HDS container file.
   my $headerin = $in;
   $headerin =~ s/\.I\d$//;
   $headerin =~ s/\.I\dBEAM[AB]$//;
   my $ORAC_STATUS = ( copy_hdsobj( "$headerin.HEADER.MORE.FITS", "$out.MORE.FITS") ? ORAC__OK : ORAC__ERROR );

   # Modify the frame object, to reflect that we now have a single NDF,
   # using the files (plural) method.
   $Frm->files( $out );
   $Frm->mergehdr;

   orac_print "$in to $out: Single NDF created for 1x1 sampled, single integration data.\n";

   # We only attempt to display _raw frames if they're single NDFs.
   # Need to think about whether this is desirable (PH).
   $Display->display_data( $Frm ) if ( defined $Display );

} else {

   # For a multiple-integration file copy all the components.
   foreach my $i (1 .. $nfiles) {
      (my $in, my $out) = $Frm->inout("_mraw", $i);
      $Mon{"ndfpack_mon"}->obeyw( "ndfcopy", "in=$in out=$out title=$out" );
      orac_print "$in to $out: Copied NDF component\n";

      # Update the frame object.
      $Frm->file($i, $out);
   }
}

# Display the frame.
$Display->display_data( $Frm ) if defined $Display;

# Keep logging tidy.
orac_print "\n";
