=head1 NAME

_REDUCE_BIAS_ - Reduces a spectroscopy BIAS frame.

=head1 DESCRIPTION

This averages together multiple integrations to make the output file data array.

If there are more than three integrations, a variance array is created as the
statistical variance of the individual input integrations.

Otherwise, the variance is simply from the readnoise added to the integrations
before averaging.

=head1 OUTPUT DATA

=over 4

=item *

Bias corrected frame which has a _bco suffix.

=back

=head1 TASKS

KAPPA: MATHS.

=head1 AUTHOR

Paul Hirst E<lt>p.hirst@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 1998-2003 Particle Physics and Astronomy Research Council.
Copyright (C) 2015 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Bring in Starlink::HDSPACK.
use Starlink::HDSPACK qw/ copy_hdsobj /;

# Sanity check
unless ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "BIAS") {

   # This isn't a BIAS frame.
   unless ($Frm->uhdr("DARK_AS_BIAS")) {
      orac_warn "This is not a BIAS frame - Running the wrong recipe?\n";
      orac_warn "Continuing anyway and assuming this is deliberate\n";

   # With Michelle it would be acceptable to run this on a DARK.
   } else {
      unless ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "DARK") {
         orac_warn "This Michelle data is not a BIAS or a DARK frame - Running the wrong recipe?\n";
         orac_warn "Continuing anyway and assuming this is deliberate\n";
      }
   }
}

my $nfiles = $Frm->nfiles;

my $tmpFrm = new $Frm;
$Frm->mergehdr;
$tmpFrm->files( $Frm->file );

my ($in, $out) = $tmpFrm->inout("_bco");

# Average together the integrations.  First form the MATHS command line.
# The IA -> IH are the names of tokens for NDFs within a MATHS expression.
my $add = "";
my $files = "";
my %hash = (1=>"IA", 2=>"IB", 3=>"IC", 4=>"ID", 5=>"IE", 6=>"IF", 7=>"IG", 8=>"IH");

foreach my $i (1..$nfiles) {
   my $file = $Frm->file($i);
   $files .= $hash{$i} . "=" . $file . " ";
   $add .= $hash{$i};
   $add .= " + " if($i != $nfiles);
}

my $param = sprintf("$files exp='(%s)/$nfiles' out=$out", $add);
$Mon{'kappa_mon'}->obeyw("maths", $param);

# Copy the primary inputcontainer file's HEADER FITS airlock to the
# output NDF.  The HEADER NDF is separate from .In and .InBEAMA/B NDFs
# that may be present in the HDS container file.
my $headerin = $in;
$headerin =~ s/\.I\d$//;
$headerin =~ s/\.I\dBEAM[AB]$//;
my $ORAC_STATUS = ( copy_hdsobj( "$headerin.HEADER.MORE.FITS", "$out.MORE.FITS" ) ? ORAC__OK : ORAC__ERROR );

my $tmp = new ORAC::TempFile;
my $tmpfile = $tmp->file;

orac_print "$out: bias frames coadded\n";

# Calculate the variance into the temporary file's data array.
if ($nfiles >= 3) {

   # Construct the variance frame.  $out contains the mean frame.
   # First form the command line for MATHS.
   my $mfile = $nfiles + 1;
   $files .= $hash{$mfile} . "=" . $out;
   $add = "";
   foreach my $i (1..$nfiles) {
      $add .= "((".$hash{$i}."-".$hash{$mfile}.")*(".$hash{$i}."-".$hash{$mfile}."))";
      $add .= " + " if ($i != $nfiles);
   }
   my $exp = "( $add ) / $nfiles";

   $param = sprintf("$files exp='(%s)' out=$tmpfile", $exp);

   $Mon{'kappa_mon'}->obeyw("maths", $param);

   # Copy the variance information to the destination NDF's VARIANCE component.
   $ORAC_STATUS = ( copy_hdsobj( "$tmpfile.DATA_ARRAY", "$out.VARIANCE" ) ? ORAC__OK : ORAC__ERROR );

   $Frm->files( $out );
   $Frm->mergehdr;

} elsif ($Frm->uhdr("ORAC_OBSERVATION_TYPE") eq "DARK") {

   # It's a Michelle DARK being used as a BIAS, therefore simply add the readnoise.
   $Frm->files( $out );
   _ADD_READNOISE_VARIANCE_

} else {
   orac_warn("Will not create BIAS variance as there are fewer than three integrations.\n");
}

# Display the frame.
$Display->display_data( $Frm ) if defined $Display;

# Keep the reporting tidy.
orac_print "\n";

