# -*-cperl-*-
#+
# Name:
#    DELETE_TEMP_FILES
#
# Purpose:
#    Removes a recipe's intermediate frames.
#
# Language:
#    Perl5
#
# Description:
#    Generic primitive to handle end of recipe tidy up of intermediate
#    files.
#
# Notes:
#    In some cases the GROUP primitives require certain intermediate
#    files to be available in order for the recipe to proceed (eg
#    recipes involving the recalculation of flatfields will want to
#    retain the pre-flatfielded data on disk so that the flatfielded
#    images can be regenerated).  This means that some care must be
#    taken when selecting files for removal.  If a recipe fails when
#    too many files have been marked for removal, simply add extensions
#    to the KEEP list until the recipe works or contact the person
#    responsible for the recipe for more clarification.
#
#    If the environment variable ORAC_KEEP is set, no files will be
#    deleted.
#
# Arguments:
#    ALSOGRP = LOGICAL (Read)
#       If true, $Grp will be read for intermediates in addition to $Frm.
#    FORCE = CHARACTER (Read)
#       Comma-separated list of patterns for which to force deletion even
#       if the file would otherwise be (incorrectly) thought to be a raw
#       file. []
#    KEEP = CHARACTER (Read)
#       Comma-separated list of suffices for files that are not to be
#       deleted. If extension _xxx is provided and a file has extension
#       _xxx1 then it will be retained. In order to only keep _xxx whilst
#       deleting _xxxN use _xxx\$ (ie terminate the pattern).
#
#       If KEEP is not supplied, *NO* files are removed.  Whilst the
#       logical behaviour for an undefined KEEP would be to remove all
#       files, in general this behaviour is probably not desirable (and
#       may indicate an error in the recipe---presumably the user requires
#       at least one file to be left over after the pipeline runs...).  For
#       this reason files are only deleted if some extensions are
#       explicitly requested.
#    VERBOSE = LOGICAL (Read)
#       Print out messages regarding decision making.

# Examples:
#    _DELETE_TEMP_FILES_ KEEP=_trn,_flat
#       This would erase all files associated with the current frame
#       (group files do not count) except for those ending in _trn and
#       _flat.
#
# Authors:
#    TJ: Tim Jenness (JAC)
#    MJC: Malcolm J. Currie (JAC)
#    BC: Brad Cavanagh (JAC)
#
# Copyright:
#    Copyright (C) 2008 Science and Technology Facilities Council.
#    Copyright (C) 1998-2003 Particle Physics and Astronomy Research
#    Council.  All Rights Reserved.
#
#-

# Enable verbose mode.
    my $verbose = get_prim_arg( $_PRIM_ARGS_, "VERBOSE", 1 );

# Check the environment variable ORAC_KEEP.
    if ( ! exists( $ENV{ORAC_KEEP} ) ) {

# Obtain the argument.
       my $keep = get_prim_arg( $_PRIM_ARGS_, "KEEP", "" );
       my $force = get_prim_arg( $_PRIM_ARGS_, "FORCE", "" );
       my @force = map {qr/$_/} split ',', $force;

# Generate array of extensions
       my @extensions = split(/,/,$keep);

# If the extensions array contains something proceed.
       if ( $#extensions > -1 ) {
          orac_print "Removing temporary files...\n" if $verbose;

# Create a code ref for handling the removal since we need to call
# it once for $Frm and once for $Grp. This is required because the
# file setting and erasing can trigger header updates that need
# to know the group vs frame.
          my $CleanUp = sub {
             my $Obj = shift;
             my @intermediates = $Obj->intermediates;

# Create temporary frame object to handle the deletion.
             my $tempFrm = new $Obj;

# Loop over intermediate files and compare with the list of
# extensions to be kept.
             foreach my $file ( @intermediates ) {
                orac_print "Checking $file...\t" if $verbose;

# Loop round if the filename ends in _number, since we will
# treat these as special e.g. raw data files.  Also preserve
# components of the raw data.
                if ( $file =~ /_\d+$/ || $file =~ /_\d+\.I\d+[A-Z]*$/ ) {
                   unless (grep {$file =~ $_} @force) {
                       orac_print "Keeping raw\n" if $verbose;
                       next;
                   }
                   orac_print '(forcing override of "raw" test) ' if $verbose;
                }

# May want to also check for special case of files having
# no extension at all (e.g. o65).

# Compare with the extensions.
                unless ( grep {$file =~ /$_(\d+)?$/} @extensions ) {
                   orac_print "Removing\n", 'red' if $verbose;

# This means the file can be removed.  The easiest thing is to
# ask the Frame to remove the file.
                   $tempFrm->allow_header_sync(0); # Do not write when we are deleting
                   $tempFrm->file( $file );
                   $tempFrm->erase;
                } else {
                   orac_print "Keeping extension\n", "green" if $verbose;
                }
             }

# Undefine the tempFrm object.
             undef $tempFrm;

# Frossie wants to save memory by clearing the intermediates
# array.  We don't need it anyway...
             @{$Obj->intermediates} = ();
          };

# Clean up frame files...
          $CleanUp->( $Frm );

# and the group.
          $CleanUp->( $Grp )
            if get_prim_arg( $_PRIM_ARGS_, "ALSOGRP" );

       } else {
          orac_warn "Primitive called without specifying any files to be kept\nNot deleting any temporary files....\n";
       }

    }

# Podule
# ======

=head1 NAME

_DELETE_TEMP_FILES_ -- Removes a recipe's intermediate frames

=head1 DESCRIPTION

Generic primitive to handle end of recipe tidy up of intermediate
files.

=head1 NOTES

In some cases the GROUP primitives require certain intermediate
files to be available in order for the recipe to proceed (eg
recipes involving the recalculation of flatfields will want to
retain the pre-flatfielded data on disk so that the flatfielded
images can be regenerated).  This means that some care must be
taken when selecting files for removal.  If a recipe fails when
too many files have been marked for removal, simply add extensions
to the KEEP list until the recipe works or contact the person
responsible for the recipe for more clarification.

If the environment variable ORAC_KEEP is set, no files will be
deleted.

=head1 ARGUMENTS

=over 4

=item ALSOGRP = LOGICAL (Read)

If true, $Grp will be read for intermediates in addition to $Frm.

=item KEEP = CHARACTER (Read)

Comma-separated list of suffices for files that are I<not> to be deleted.
If extension _xxx is provided and a file has extension _xxx1 then it will
be retained. In order to only keep _xxx whilst deleting _xxxN use
_xxx\$ (ie terminate the pattern).

If KEEP is not supplied, B<NO> files are removed.  Whilst the logical
behaviour for an undefined KEEP would be to remove all files,
in general this behaviour is probably not desirable (and may indicate
an error in the recipe---presumably the user requires at least
one file to be left over after the pipeline runs...).  For this reason
files are only deleted if some extensions are explicitly requested.

=item VERBOSE (Boolean)

Print out messages regarding decision making.

=back

=head1 EXAMPLES

=over 4

=item _DELETE_TEMP_FILES_ KEEP=_trn,_flat

This would erase all files associated with the current frame (group files
do not count) except for those ending in _trn and _flat.

=back

=head1 AUTHORS

TJ: Tim Jenness (JAC)
MJC: Malcolm J. Currie (JAC)
BC: Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2008-2009 Science and Technology Facilities Council.
Copyright (C) 1998-2003 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

