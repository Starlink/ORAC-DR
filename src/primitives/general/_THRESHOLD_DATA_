# -*-cperl-*-

=head1 NAME

_THRESHOLD_DATA_ - Threshold data lower and/or higher than given
values.

=head1 DESCRIPTION

This recipe thresholds data values that are lower and/or higher than
given values. It is essentially a wrapper around the KAPPA THRESH
application.

=head1 ARGUMENTS;

=over 4

=item CALCMEDIAN = BOOLEAN (Given)

If set to 1, the median is calculated, and the thresholding is performed
relative to the median, rather than around 0.  [0]

=item HIGH = REAL (Given)

The upper threshold value within the input array.  This can be
overridden by using the recipe parameter THRESHOLD_UPPER.  [0]

=item IGNORE = CHARACTER (Given)

If this is defined, the primitive returns without applying the threshold
whenever there is a match between any element of this parameter and the
object name given by the internal header ORAC_OBJECT.  Object names are
comma separated.  Matches are case insensitive.

=item LOW = REAL (Given)

The lower threshold value within the input array.  This can be
overridden by using the recipe parameter THRESHOLD_LOWER.  [0]

=item NEWHIGH = REAL (Given)

The value to which all input values greater than the upper threshold
(HIGH parameter) are set. This can be set to "bad", in which case the
bad value is substituted. [0]

=item NEWLOW = REAL (Given)

The value to which all input values smaller than the lower threshold
(LOW parameter) are set. This can be set to "bad", in which case the
bad value is substituted. [0]

=back

=head1 NOTES

=over 4

=item *

This primitive operates on all files in the current Frame object.

=back

=head1 OUTPUT DATA

=over 4

=item *

Data files with the _thr suffix appended.

=back

=head1 TASKS

KAPPA: THRESH.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2015, 2023 Science and Technology Facilities Council.
All Rights Reserved.

=cut

# Handle parameters.
my $low = get_prim_arg( $_PRIM_ARGS_, "LOW", 0 );
my $high = get_prim_arg( $_PRIM_ARGS_, "HIGH", 0 );
my $newlow = get_prim_arg( $_PRIM_ARGS_, "NEWLOW", 0 );
my $newhigh = get_prim_arg( $_PRIM_ARGS_, "NEWHIGH", 0 );
my $calc_median = get_prim_arg( $_PRIM_ARGS_, "CALCMEDIAN", 0 );
my $ignore = get_prim_arg( $_PRIM_ARGS_, "IGNORE", undef );

# Handle recipe parameter overrides.
$low  = ( defined( $Frm->uhdr( "RECPAR_THRESHOLD_LOWER" ) ) ?
          $Frm->uhdr( "RECPAR_THRESHOLD_LOWER" )          : $low );
$high = ( defined( $Frm->uhdr( "RECPAR_THRESHOLD_UPPER" ) ) ?
          $Frm->uhdr( "RECPAR_THRESHOLD_UPPER" )          : $high );

my $tlow = $low;
my $thigh = $high;

# Determine if the source is one not to be thresholded.
my $skip_thresh = 0;
if ( defined( $ignore ) ) {
   my @ignore_names = split( ",", uc( $ignore ) );
   my $object_name = $Frm->uhdr( "ORAC_OBJECT" );
   my $ucname = uc( $object_name );
   foreach ( @ignore_names ) {
      if ( m/$ucname/ ) {
         orac_say "Omit thresholding because object name $object_name " .
                  "has a match in the list to ignore (because of its\n" .
                  "exceptional brightness or dynamic range).\n";
         $skip_thresh = 1;
      }
   }
}

foreach my $i ( 1 .. $Frm->nfiles ) {

  my ( $in, $out ) = $Frm->inout( "_thr", $i );

  unless ($skip_thresh) {
    # First run stats to see if there are even any values to
    # threshold. Doing this will save us some time on larger files.
    $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$in order=true" );
    my ( $ORAC_STATUS, $min ) = $Mon{'kappa_mon'}->get( "stats", "minimum" );
    ( $ORAC_STATUS, my $max ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );
    ( $ORAC_STATUS, my $median ) = $Mon{'kappa_mon'}->get( "stats", "median" );

    unless ( $median != &NDF::VAL__BADD() &&
        lc( $median ) != "nan" && lc( $median ) !~ /inf/ ) {
      orac_print " Computed median value is bad - can not apply threshold.\n";
      $skip_thresh = 1;
    }
    else {
      if ( $calc_median ) {
        $tlow = $low + $median;
        $thigh = $high + $median;
        my $fs_median = sprintf( "%.3g", $median );
        orac_print "Thresholding about the median at $fs_median.\n";
      }

      unless ( $max > $thigh || $min < $tlow ) {
        orac_print " Thresholding between $low and $high is not required.\n";
        $skip_thresh = 1;
      }
    }
  }

  unless ($skip_thresh) {
    my $params = "in=$in out=$out thrhi=$thigh newhi=$newhigh thrlo=$tlow newlo=$newlow";
    $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

    # Report to user.
    orac_print "$in to $out:\n";
    my $fs_low = sprintf( "%.1f", $tlow );
    my $fs_high = sprintf( "%.1f", $thigh );
    orac_print " Thresholded. Values below $fs_low set to $newlow.\n";
    orac_print "              Values above $fs_high set to $newhigh.\n";
  }
  else {
    hardlink( "$in.sdf", "$out.sdf" ) or orac_throw "Could not create link between $in.sdf and $out.sdf: $!\n";

    # Report to user.
    orac_print "$in to $out:\n";
  }

  # Set the product.
  $Frm->product( "thr" );

  # Update the Frame object.
  $Frm->file( $i, $out );
}

# Display, if necessary.
$Display->display_data( $Frm ) if defined $Display;

# Tidy-up output.
orac_print "\n";
