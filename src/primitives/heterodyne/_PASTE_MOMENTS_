=head1 NAME

_PASTE_MOMENTS_ - Combines line moments into a single file and
extracts peak-value spectrum

=head1 DESCRIPTION

This primitive is used to paste the moments for individual emission
lines into a single file, one file per type of moment supplied.  It
tags each moment map.  Moment maps can be made one for each spectral
line if Argument PER_LINE is true.

It also extracts and tags the spectrum from the current spectral cube
(given by the OBJECT argument) corresponding to the peak in an
integ-moment map.  For jiggle or grid observations, this will be
reference spatial position (1,1), otherwise the image is smoothed to
obtain a more-robust peak location.

This primitive serves
l<_CREATE_MOMENTS_THROUGH_SMOOTHING_|_CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_>.

=head1 ARGUMENTS

=over 4

=item GROUP = INTEGER (Given)

How to process group files.  0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=item INPUTS = ARRAY REFERENCE (Given)

A reference to an associative array containing the collapsed-line
moment files that are to be pasted.  The keys are the moment names
given by Argument MOMENTS.

=item MOMENTS = ARRAY REFERENCE (Given)

A reference to the set of moment types created, each of which is to
have its respective collapsed-line moments combined into a single file
for that moment.

item OBJECT = ORAC::Frame/ORAC::Group object (Given)

The object whose emission lines are being being analysed into moments.
By default uses the current Frm object.  []

=item PER_LINE = BOOLEAN (Given)

Whether or not to create a moments map for each detected line.  [0]

=item PREVIEW_SUFFIX = STRING (Given)

The suffix to be given to the preview graphic file.  ["rimg"]

=item TAG = STRING (Given)

Which moment map to tag as a representative image. ['']

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS spectral cubes.

=item *

Internal header INTEG_MAX_POS records a reference to the spatial pixel
indices of the peak of the integ map.

=back

=head1 OUTPUT DATA

=over 4

=item *

The moments maps with names derived from the OBJ file with the suffix
equal to the moment name.  If PER_LINE is true, the suffix has a
prefix of "l" before the moment name, followed by a zero-padded
three-digit integer line counter starting at 001.

=item *

The peak spectrum if one of the moments supplied is "integ".
This has suffix _spNNN, where NNN is a zero-padded number
starting from 001.  See
L<_EXTRACT_MAXVALUE_SPECTRUM_|_EXTRACT_MAXVALUE_SPECTRUM_>.

=back

=head1 TASKS

KAPPA: BLOCK, NDFCOPY, STATS

=head1 SEE ALSO

_EXTRACT_MAXVALUE_SPECTRUM_, _MASK_AST_REGION_, _PASTE_FILES_,
SET_FILE_FITS_ITEM_, _TAG_AS_REPRESENTATIVE_.

None

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>,
Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>,
Sarah F. Graves E<lt>s.graves@eaobservatory.orgE<gt>,
Graham Bell E<lt>g.bell@eaobservatory.orgE<gt>

=head1 COPYRIGHT

Copyright (C) 2008-2009, 2011, 2013-2016, 2020, 2024 Science and
Technology Facilities Council.

Copyright (C) 2017 East Asian Observatory
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle parameters.
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $inputs = get_prim_arg( $_PRIM_ARGS_, "INPUTS", undef, 1 );
my $moments = get_prim_arg( $_PRIM_ARGS_, "MOMENTS", undef, 1 );
my $Obj = get_prim_arg( $_PRIM_ARGS_, "OBJECT", $Frm );
my $per_line = get_prim_arg( $_PRIM_ARGS_, "PER_LINE", 0 );
my $preview_suffix = get_prim_arg( $_PRIM_ARGS_, "PREVIEW_SUFFIX", "rimg" );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", undef );

if ( ! defined( $moments ) ) {
   orac_err( "_PASTE_MOMENTS_: Programming error.  Argument MOMENTS must" .
             " be supplied in the calling code.\n" );
}
if ( ! defined( $inputs ) ) {
   orac_err( "_PASTE_MOMENTS_: Programming error.  Argument INPUTS must" .
             " be supplied in the calling code.\n" ) ;
}

my $group2 = ( $group == 2 ? 0 : $group );
my $jsatile = defined( $Obj->uhdr( "JSA_TILES" ) ) ?
                       $Obj->uhdr( "JSA_TILES" )   :
                       0;

# Paste together the files given by the hash array for each moment.
my %paste_inputs = %$inputs;
foreach my $moment ( @$moments ) {

   if ( defined( $paste_inputs{$moment} ) ) {

      my $line_number = 0;
      foreach my $region ( sort keys %{$paste_inputs{$moment}} ) {

         # Obtain the file suffix for the moment file.
         my $suffix;
         if ( $per_line && $region != 0 ) {
            $suffix = sprintf( "_l%s%03d", $moment, $line_number );
         } else {
            $suffix = "_$moment";
         }

         my ( $in, $out ) = $Obj->inout( "$suffix" );

         # We need two temporary files at this point, one to hold the pasted
         # file pre-map masking, and another to hold an AST Region.
         my $temp10 = new ORAC::TempFile(0);

         if ( scalar( @{$paste_inputs{$moment}{$region}} ) == 1 ) {

            my $params = "in=${$paste_inputs{$moment}{$region}}[0] out=$temp10";
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

         } else {

            # Allow for apostrophes in the object name.
            my $title = $Frm->uhdr( "ORAC_OBJECT" );
            $title =~ s/'/''/g;

            orac_say "Pasting together temporary maps to form $moment map.";
            _PASTE_FILES_ FILES=$paste_inputs{$moment}{$region} OUT=$temp10 TITLE=$title

         }

         # Test to see if we actually got any emission.
         $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp10" );
         my ( $ORAC_STATUS, $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
         ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

         if ( $mean == 0 || $numgood == 0 ) {
            orac_say " Line in position $region has no detected emission. Skipping to next line.";
            next;
         }
         $line_number++;

         # Use a mask, if one is available.
         if ( defined $Frm->uhdr( "MAP_ASTREGION" ) ) {
            _MASK_AST_REGION_ IN=$temp10 OUT=$out GROUP=$group2

         } else {
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp10 out=$out" );
         }

         orac_say "Created " . ( $region == 0 ? "" : "line " ) . "$moment map in $out.";

         if ( $per_line && $region != 0 ) {
            _GET_DIMENSIONS_ FILE=$out
            my $flbound = $_GET_DIMENSIONS_{FLBOUND};
            my $fubound = $_GET_DIMENSIONS_{FUBOUND};
            orac_say sprintf( " Collapsed over velocity range: %.3f to %.3f km/s",
                              $flbound->[2], $fubound->[2] );
         }

         _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRODUCT VALUE=$moment
         $Obj->sync_headers;

         # Copy the output to a group file, if requested.
         if ( $group != 1 && $Grp->uhdr( "COPY_FRAME_CUBE" ) ) {
            ( undef, my $groupout ) = $Grp->inout( "_$moment" );

            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$out out=$groupout" );

            my $tGrp = new $Grp;
            $tGrp->groupid( $Grp->groupid );
            $tGrp->allow_header_sync(1);
            $tGrp->file( $groupout );

            orac_say "$out to $groupout:";
            orac_say " Copied to Group file.";

            if ( defined( $tag ) && $tag eq $moment && $region == 0 ) {
               _TAG_AS_REPRESENTATIVE_ FILE=$groupout UPDATE=0 GROUP=1 SUFFIX=$preview_suffix
            }
         }

         # Tag the moment map if the current moment is the requested one.
         # _TAG_AS_REPRESENTATIVE_ now accesses a header for product_ID, so
         # read in the headers to the temporary Frame.
         if ( defined( $tag ) && $tag eq $moment && $region == 0 ) {
            if ( $group == 2 ) {
               my $Frm = new $Obj;
               $Frm->file( $out );
               $Frm->readhdr();
               _TAG_AS_REPRESENTATIVE_ FILE=$out UPDATE=0 SUFFIX=$preview_suffix
            } else {

               # Specify JSA_TILES=0 because we are making a preview for a whole
               # plane and do not want to include the tile number.  This will need
               # to be changed if we also use this primitive in the co-add recipe.
               _TAG_AS_REPRESENTATIVE_ FILE=$out UPDATE=0 GROUP=$group SUFFIX=$preview_suffix JSA_TILES=0
            }
         }

         # Extract the peak's spectrum.
         # ============================

         # Find the position of the peak, then extract a spectrum from that
         # position, but only if the moment is 'integ'.

         # If the observation is a grid or jiggle, then the reference of the
         # observation should be used. This should be at pixel index 1,1
         # (this is where the OBSDEC and OBSRA fits header keywords are
         # defined to be in the output cube).

         # If there is no data at that position, then use the position
         # of the (unsmoothed) peak (unsmoothed because the smoothing assumes
         # a larger map than a small stare or jiggle).
         if ( $moment eq 'integ' && $region == 0 ) {

            # Get the type of the observation.
            my $obsmode = $Obj->uhdr( "ORAC_OBSERVATION_TYPE" );

            if ( $obsmode eq 'grid' || $obsmode eq 'jiggle' ){

               # Check there are data at the reference spatial position
               # (1,1).  There have been occasions when this was not the
               # case, but this currently seems to been fixed.  As there is
               # no straightforward way to determine if the grid is a stare,
               # we shall assume that it is a stare or that (1,1) will be
               # suitable.
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$out(1,1,)" );
               ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

               # If there is no datum at the defined map position, then use
               # the maximum of the unsmoothed integ map.
               if ( $numgood != 1 ) {
                  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$out" );
               }

               # Set INTEG_MAX_POS to be either the `(1,1)' map centre
               # position, or the position of the unsmoothed maximum.
               my ( $ORAC_STATUS,  @maxpos ) = $Mon{'kappa_mon'}->get( "stats", "maxpos" );
               $Obj->uhdr( "INTEG_MAX_POS", \@maxpos );

            } else {

               # For all other types of observation (not grid or jiggle)
               # smooth and then the find position of the maximum.
               my $tempfile = new ORAC::TempFile(0);

               # Do a smooth first.
               $Mon{'kappa_mon'}->obeyw( "block", "in=$out out=$tempfile box=3" );
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tempfile" );

               my ( $ORAC_STATUS, @maxpos ) = $Mon{'kappa_mon'}->get( "stats", "maxpos" );

               # Now set the maxixum's position into the internal header.
               $Obj->uhdr( "INTEG_MAX_POS", \@maxpos );
            }

            # Is it possible to tag the resulting maximum-value spectrum as
            # representative.
            my $tagspec = defined( $tag );

            # Form group members' peak spectra.  Note that the group argument of
            # _EXTRACT_MAXVALUE_SPECTRUM_ is boolean, not integer 0, 1, 2, so
            # use the default of 0 meaning the $Frm, and consequently form a
            # temporary Frame object to store the group members.
            if ( $group == 2 ) {
               my $maxpos = $Obj->uhdr( "INTEG_MAX_POS" );
               my $Frm = new $Obj;
               $Frm->files( $Obj->files );
               $Frm->uhdr( "INTEG_MAX_POS", $maxpos );
               $Frm->uhdr( "JSA_TILES", 1 ) if $jsatile;
               _EXTRACT_MAXVALUE_SPECTRUM_ TAG=$tagspec

            # Form the current Frame or Group file's peak spectrum.
            } else {
               _EXTRACT_MAXVALUE_SPECTRUM_ TAG=$tagspec GROUP=$group
            }
         }

         orac_say "";
      }
   }
}
