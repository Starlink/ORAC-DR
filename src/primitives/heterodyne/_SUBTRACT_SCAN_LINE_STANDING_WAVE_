=head1 NAME

_SUBTRACT_SCAN_LINE_STANDING_WAVE_

=head1 DESCRIPTION

This primitive takes the current spectral cube and forms the median
standing-wave pattern for each scan row, since the pattern comes from
the motion to the off position, once per scan row.  It then expand
these into the shape of the original spectral cube and subtracts from
the current spectral cube.

=head1 ARGUMENTS

=over 4

=item EMISSION_MASK = BOOLEAN (Given)

If set true, it will attempt to use the previously calculated
three-dimensional (PPV) emissions masks to exclude those regions
from forming the median background spectrum in each scan line.  [0]

=item EMISSION_REGIONS = STRING (Given)

A comma-separated list of velocity regions where there is emission. It
is only applied if EMISSION_MASK is 0.  This argument can be overridden
by the RECPAR_STANDING_WAVE_EMISSION_REGIONS uhdr via the recipe
parameter system.  [undef]

=item INTEG_MASK = STRING (Given)

The name of the file that has known emission masked.  It should either
contain zeroes for regions lacking emission and bad values in the
emission regions.  It is normally derived from the group integ map.
If this is undefind, no mask is used to select the spectra.  [undef]

=item INTERPOLATE = BOOLEAN (Given)

If set true, it will interpolate across scan rows, whose spectra all
contain emission.   This argument can be overridden by the
RECPAR_STANDING_WAVE_INTERPOLATE uhdr via the recipe parameter system.
[1]

=item SMOOTH_WIDTH = INTEGER (Given)

The size of the kernel in channels to block smooth the median spectra
in each row.  It should be at least 3, and and odd.  If this is
undefined or 0, no smoothing occurs unless EMISSION_REGIONS is
defined and EMISSION_MASK is false.  If a negative value or 1 or 2
is supplied, a default of 11 is used.  If an even-sized kernel is
supplied, 1 is added.  This argument can be overridden by the
RECPAR_STANDING_WAVE_SMOOTH uhdr via the recipe parameter system.
[undef]

=item SUFFIX = STRING (Given)

Generate the standing-wave subtracted cubes with this file suffix.
["_swc"]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=item *

This primitive will not run if the STANDING_WAVE uhdr in the
currentFrame object is defined and false.

=back

=head1 OUTPUT DATA

=over 4

=item  *

The spectral cube after the smoothed standing wave has been subtracted.

=back

=head1 TASKS

KAPPA: ADD, BLOCK, CHPIX, COLLAPSE, ERASE, FILLBAD, MANIC, NDFCOPY, NDFTRACE
       (via _GET_DIMENSIONS_), PASTE, ROTATE, STATS, SUB, WCSCOPY.

Also see _ROTATE_MAP_PA_TO_SYSTEM_.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2023-2024 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Has standing-wave correction been selected?
my $apply = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE" ) ) ?
            $Frm->uhdr( "RECPAR_STANDING_WAVE" )              :
            1 );
if ( ! $apply ) { goto RETURN }

orac_say "Standing-wave removal\n";
my $underline = "-" x 26;
orac_say "$underline\n";

# Obtain arguments and recipe parameter overrides.
# ================================================

my $spectral_mask = get_prim_arg( $_PRIM_ARGS_, "EMISSION_MASK", 0 );
my $image_mask = get_prim_arg( $_PRIM_ARGS_, "INTEG_MASK", undef );
my $interpolate =  get_prim_arg( $_PRIM_ARGS_, "INTERPOLATE", 1 );
my $em_regions = get_prim_arg( $_PRIM_ARGS_, "EMISSION_REGIONS", undef );
my $kernel = get_prim_arg( $_PRIM_ARGS_, "SMOOTH_WIDTH", undef );
my $suffix = get_prim_arg( $_PRIM_ARGS_, "SUFFIX", "swc" );


# Handle recipe parameter overrides.
$image_mask = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_MASK_FILE" ) ) ?
               $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_MASK_FILE" )              :
               $image_mask );
$em_regions = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_REGIONS" ) ) ?
              $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_REGIONS" )              :
              $em_regions );

$interpolate = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_INTERPOLATE" ) ) ?
               $Frm->uhdr( "RECPAR_STANDING_WAVE_INTERPOLATE" )              :
               $interpolate );

$kernel = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_SMOOTH" ) ) ?
          $Frm->uhdr( "RECPAR_STANDING_WAVE_SMOOTH" )              :
          $kernel );

# There may be a list of kernel widths.
my @boxes;
if ( ref( $kernel ) eq 'ARRAY' ) {
   @boxes = @{ $kernel };
} else {
   push @boxes, $kernel;
}

# Obtain and validate angular recipe parameters.  These angular recipe
# parameters may be removed if the transformation between the supplied and
# requested WCS works at the ASTANGLE step in _ROTATE_MAP_PA_TO_SYSTEM_.
my $map_pa = ( defined( $Frm->uhdr( "RECPAR_MAP_PA" ) ) ?
              $Frm->uhdr( "RECPAR_MAP_PA" )             :
              undef );
if ( defined( $map_pa ) ) {
   $map_pa = undef if ( $map_pa <= -90.0 || $map_pa >= 90.0 );
}

my $scan_pa = ( defined( $Frm->uhdr( "RECPAR_SCAN_PA" ) ) ?
              $Frm->uhdr( "RECPAR_SCAN_PA" )              :
              undef );
if ( defined( $scan_pa ) ) {
   $scan_pa = undef if ( $scan_pa <= 0.0 || $scan_pa >= 90.0 );
}

# Set some processing directives.  Masking emission across velocity
# ranges needs some smoothing to assist the interpolation.
my $mask_spatial = defined( $image_mask );
my $mask_emission = defined( $em_regions ) && ! $spectral_mask;
my $smooth = 1 if defined ( $boxes[0] );
$smooth = 0 if $boxes[0] == 0;
if ( $mask_emission ) {
   $smooth = 1;
   $boxes[0] = 11 if ! defined( $kernel );
}

# Make sure each smoothing kernel is a positive odd integer.
if ( $smooth ) {
   foreach ( @boxes ) {
      if ( $_ =~ /^-?\d+\z/ ) {
         $_ = 11 if $_ < 3;
         $_ = $_++ if $_ % 2 == 0;
      }
   }
}

# Store the emission regions in a text file for CHPIX.
# ====================================================

#  First store the emission regions in an array.
my ( $maskfile, @regions );
if ( $mask_emission ) {
   if ( ref( $em_regions ) eq 'ARRAY' ) {
      @regions = @{ $em_regions };
   } else {
      $regions[0] = $em_regions;
   }

# Validate emission-region syntax.
   foreach ( @regions ) {
      if ( /:/ ) {
         my ( $lowvel, $uppvel ) = split( ":", $_ );
         $mask_emission = 1;
      } else {
         $mask_emission = 0;
         last;
      }
   }

   if ( ! $mask_emission ) {
      orac_err "Supplied emission extents have invalid format/\n" .
                "Syntax is <lower1>:<upper1>,<lower2>:<upper2>,...\n";
   }

# Create a text file listing the emission regions for CHPIX.
   $maskfile = new ORAC::TempFile;

# Process each region range.
   for ( my $j = 0; $j <= $#regions; $j++ ) {

# Append the region and its new bad value to the text file.
      print {$maskfile->handle} ",,$regions[$j]  bad";
   }
}

# Obtain the orientation of the spectral cube and any rotation required.
# ======================================================================

# The scan may not be aligned with the Cartesian pixel axes.  There
# are two relevant position angles.  SCAN_PA specifies the orientation
# of the scan axis, and MAP_PA defines the orientation of the scan with
# respect to north.  A SCAN_PA of 0 degrees corresponds to scanning
# along the latitude axis, and 90 degrees indicates that the scan
# direction is along the longitude axis.  Neither header is currently
# (20230330) translated.  Now these are normally with respect to the
# tracking system, normally equatorial.  Until code is developed to
# convert these angles from tracking to other systems, especially
# galactic, there is an option to supply the values through recipe
# parameters when the WCS system is not tracking.
if ( !defined( $scan_pa ) ) {
    $scan_pa = defined( $Frm->hdr( "SCAN_PA" ) ) ? $Frm->hdr( "SCAN_PA" ) : 90.0;
}
if ( !defined( $map_pa ) ) {
    _ROTATE_MAP_PA_TO_SYSTEM_
    $map_pa = $_ROTATE_MAP_PA_TO_SYSTEM_{MAP_PA};
}

# We want to adjust the scan orientation to be parallel with the pixel axes
# in order to remove the standing waves.  Thus we want to rotate by
# the MAP_PA.  The sense of angle in KAPPA:ROTATE is reversed from the MAP_PA
# but this step is to reverse the rotation to have the map align with Cartesian
# axes.  Hence the rotation angle required is the MAP_PA.  Also defined the
# reverse rotation needed to restore the original orientation.
my $rotangle = $map_pa;
my $irotangle = - $rotangle;

# To decide which of the two pixel axes is the scan axis the map p.a. has to be
# subtracted from the scan_pa.
my $scanangle = $scan_pa - $map_pa;

my $modangle = abs( $rotangle );
my $rotate = $modangle > 0.01;

# The SCAN_PA header (not currently translated) specifies the scan axis.
# It is normally 0 or 90 degrees.  Also define other indexing variables.
# Set the collapse axis to the aprropriate pixel axis.  SKYLON and
# SKYLAT can be muddled for map position angles around +/- 45 degrees.
my $keepaxis = abs( $scanangle ) > 45.0 ? 2 : 1;
my $cubegrow = $keepaxis == 1 ? "[1,0,2]" : "[0,1,2]";
my $scanaxis = $keepaxis == 1 ? 2 : 1;
my $collapse_axis = $keepaxis == 1 ? 2 : 1;
my $growindex = $scanaxis - 1;
my $remove_axis =  $keepaxis == 1 ? "(,~1,)" : "(~1,,)";


# Generate the observation's spectral cube of standing-wave baselines.
# ====================================================================

# There are three main routes to correction of the standing waves:

# a) there are sufficient emission-free zones, use the spectral-cube
# emission mask to select those and form median spectra along the scan
# direction for those regions; or

# b) there are sufficient emission-free zones, use the group integ map
# to identify those and form median spectra along the scan direction
# for those regions; or

# c) form the median spectra for all spatial pixels along the scan axis,
# but mask the velocity ranges where there is evident emission, then
# interpolate across the gaps using a smooth function derived from
# improving approximations to a solutions of Laplace's Equation.
# The baselines should be smoothed for this option.

# If both an emission image mask and emission velocity ranges are
# supplied, the former takes priority.

# Obtain some work filenames.
my $temp = new ORAC::TempFile( 0 );
my $cube_mask = $temp->file;
my $temp2 = new ORAC::TempFile( 0 );
my $masked_cube = $temp2->file;
my $temp3 = new ORAC::TempFile( 0 );
my $tempwcs = $temp3->file;
my $temp4 = new ORAC::TempFile( 0 );
my $rotated_with_wcs = $temp4->file;
my $temp5 = new ORAC::TempFile( 0 );
my $baseline_cube = $temp5->file;
my $temp6 = new ORAC::TempFile( 0 );
my $rotated_cube = $temp6->file;
my $temp7 = new ORAC::TempFile( 0 );
my $derot_baseline_cube = $temp7->file;
my $temp9 = new ORAC::TempFile( 0 );
my $original_baselines = $temp9->file;
my $temp10 = new ORAC::TempFile( 0 );
my $rotated_untrimmed = $temp10->file;


my ( $in, $out, $baselines, $filled_baselines, $smoothed_baselines );

# Loop through all of the PPV subscans.
foreach my $i ( 1..$Frm->nfiles ) {
   my ( $params, $lbnd, $ubnd );
   my ( $ppvcube, $ppvcube_ssw );

# Find the bounds of the spectral cube.
   $ppvcube = $Frm->file( $i );
   _GET_DIMENSIONS_ FILE=$ppvcube
   $lbnd = $_GET_DIMENSIONS_{LBOUND};
   $ubnd = $_GET_DIMENSIONS_{UBOUND};

# Option a)
# ---------
   if ( $spectral_mask || ! ( $mask_spatial || $mask_emission ) ) {
      if ( ! defined ( $Grp->uhdr( "BASELINE_MASKS" ) ) ) {
         orac_err "BASELINE_MASKS is undefined; or either the image mask " .
                  "or the emission velocity ranges have not been set via " .
                  "STANDING_WAVE_MASK or STANDING_WAVE_EMISSION_REGIONS " .
                  "recipe parameters, respectively.  The image mask " .
                  "may have been selected but has no emission-free pixels.";
      }

      my $cube_mask = $Grp->uhdr( "BASELINE_MASKS" )->[1];
      _GET_DIMENSIONS_ FILE=$cube_mask

# Mask the input spectral cube.
      $params = "in1=$ppvcube in2=$cube_mask out=$masked_cube";
      $Mon{'kappa_mon'}->obeyw( "add", "$params" );
      orac_print "Used $cube_mask to exclude emission regions.\n";

# Option b)
# ---------

# Grow the image mask to match the input spectral cube.

   } elsif ( $mask_spatial ) {
      $params = "axes=[1,2,0] in=$image_mask out=$cube_mask lbound=";
      $params .= $lbnd->[2] . " ubound=" . $ubnd->[2];
      $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Mask the input spectral cube.
      $params = "in1=$ppvcube in2=$cube_mask out=$masked_cube";
      $Mon{'kappa_mon'}->obeyw( "add", "$params" );
      orac_print "Used $image_mask to exclude emission regions.\n";

# Option c)
# ---------

# Mask the input spectral cube using the supplied emission regions.
   } else {
      $params = "in=$ppvcube out=$masked_cube mode=file file=" . $maskfile->file;
      $Mon{'kappa_mon'}->obeyw( "chpix", "$params" );
   }

# Align the scan axis with the closer Cartesian axis.
# ---------------------------------------------------

# Perform the rotation so that the scan axes align with the pixel axes.
   if ( $rotate ) {
      $params = "in=$masked_cube out=$rotated_untrimmed angle=$rotangle ";
      $params .= "useaxis='1,2' variance";
      $Mon{'kappa_mon'}->obeyw( "rotate", "$params" );
      orac_print "Rotate spatial axes $rotangle degrees clockwise\n";

# ROTATE will make a bigger region than is needed, as it calculates the
# output bounds from the transformed input bounds, ignoring the fact that
# the rotation will align with the Cartesian axes, and thus will be
# smaller.  So trim the bad border pixels.
      $params = "in=$rotated_untrimmed out=$rotated_cube trimbad";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Find bounds of rotated cube.
      _GET_DIMENSIONS_ FILE=$rotated_cube
      $lbnd = $_GET_DIMENSIONS_{LBOUND};
      $ubnd = $_GET_DIMENSIONS_{UBOUND};

# For angles around +/-45 degress the WCS can be confused as to which
# axis is which when collapsing along the scan axis.  It's better to collapse
# using pixel axes, but that is insufficient, as it's possible to
# request Axis 1 and COLLAPSE to compress along Axis 2.  The solution
# is to remove the WCS from the NDF.  The WCS is restored after the
# the standing-wave-subtracted spectra are rotated back to the original
# position angle.
      $params = "object=$rotated_cube.wcs ok";
      $Mon{'ndfpack_mon'}->obeyw( "erase", "$params" );

   } else {
      $rotated_cube = $masked_cube;
   }

# Form the baselines from each unmasked spectrum along the scan direction.
# ------------------------------------------------------------------------
   ( undef, $baselines ) = $Frm->inout( "_scmd", $i );
   ( undef, $filled_baselines ) = $Frm->inout( "_scmdf", $i );
   ( undef, $smoothed_baselines ) = $Frm->inout( "_scmds", $i ) if $smooth;

# Keep the collapsed data three-dimensional in order to be able to restore
# the original WCS.
   $params = "axis=$collapse_axis estimator=median in=$rotated_cube out=$baselines trim=f";
   $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Copy the original WCS lost during the above operation.
   if ( $rotate ) {
      $params = "ndf=$baselines like=$rotated_cube confirm=f";
      $Mon{'ndfpack_mon'}->obeyw( "wcscopy", "$params" );

# Now reduce to two dimensions using a temporary NDF, and then copy
# back into the original name.
      $params = "in=$baselines out=$tempwcs trim";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
      $params = "in=$tempwcs out=$baselines";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
   }

# Are there scan-direction columns or rows that are devoid of
# background?
   $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$baselines" );
   my ( $ORAC_STATUS, $numbad ) = $Mon{'kappa_mon'}->get( "stats", "numbad" );

# Repeat for the original PPV cube in case there are scan rows or
# columns that have emission across them, giving rise to bad columns
# or rows.
#   $params = "axes=[" . $keepaxis . ",3] estimator=median in=$ppvcube out=$original_baselines";
#   $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Where the entire scan direction has emission for all pixels along
# the other spatial axis, it will leave blank data in the final PPV.
# To overcome this, paste the spectral cube with the bad rows or columns
# on to the original PPV cube, but bad data are transparent, so the
# blank spectra are replaced by the original counterparts.
#   $params = "in=$original_baselines p1=baselines out=filled_baselines transp";
#   $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

# Smooth the spectra with user-specified multiscale smoothing.
# ------------------------------------------------------------
   if ( $smooth ) {
      $params = "box=[1,$boxes[0]] estimator=mean in=$baselines out=$smoothed_baselines";
      $Mon{'kappa_mon'}->obeyw( "block", "$params" );
      $Grp->push_intermediates( $baselines );
   } else {
      $smoothed_baselines = $baselines;
   }

# Fill bad pixels (Option b)
# --------------------------

# The number of iterations and size might become parameters.
# Interpolate across bad pixels, i.e. where there is known emission
# (Option b).
   if ( $mask_emission && $interpolate ) {
      $params = "in=$smoothed_baselines out=$filled_baselines niter=10 size=5";
      $Mon{'kappa_mon'}->obeyw( "fillbad", "$params" );

# Option a) may require bad pixels to be filled.
   } else {

# Interpolate across the case where there are a few contiguous scan
# lines devoid of background.  The waves patterns adjust smoothly
# between adjacent scan lines, so interpolation ought to provide a
# reasonable approximation.
      if ( $numbad > 0 && $interpolate ) {
         $params = "in=$smoothed_baselines out=$filled_baselines niter=10 size=5";
         $Mon{'kappa_mon'}->obeyw( "fillbad", "$params" );
      } else {
         $filled_baselines = $smoothed_baselines;
      }
   }

# Grow the baselines to the bounds of the input spectral cube.
   $params = "in=$filled_baselines out=$baseline_cube axes=" . $cubegrow;
   $params .= " lbound=" . $lbnd->[$growindex] . " ubound=" . $ubnd->[$growindex];
   $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Copy the original WCS lost during the above operations.
   $params = "ndf=$baseline_cube like=$rotated_cube confirm=f";
   $Mon{'ndfpack_mon'}->obeyw( "wcscopy", "$params" );

# Rotate the PPV to its original orientation.
# -------------------------------------------
   if ( $rotate ) {
      $params = "in=$baseline_cube out=$derot_baseline_cube angle=$irotangle useaxis='1,2' variance";
      $Mon{'kappa_mon'}->obeyw( "rotate", "$params" );

   } else {
      $derot_baseline_cube = $baseline_cube;
   }

# Subtract the baselines for each subscan.
# ----------------------------------------
    ( undef, $ppvcube_ssw ) = $Frm->inout( "_" . $suffix, $i );
    $params = "in1=$ppvcube in2=$derot_baseline_cube out=$ppvcube_ssw";
    $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

    orac_print "Subtracted standing wave along scan axis ($scanaxis) in $ppvcube to make $ppvcube_ssw.\n";

# Update the frame subscan to be the corrected file.
    $Frm->file( $i, $ppvcube_ssw );

    $Grp->push_intermediates( $ppvcube_ssw );

# Display, if necessary.
    $Display->display_data( $Frm ) if defined $Display;

}

# Tidy-up output.
orac_print "\n";

RETURN:
