# -*-cperl-*-

=head1 NAME

_QA_SYSTEM_TEMPERATURE_ - Run system temperature QA checks.

=head1 DESCRIPTION

This primitive tests raw ACSIS time-series data for variation in the
Tsys of the data. It first finds the mean Tsys for the entire
observation, then calculates the Tsys for each receptor. These values
are then printed and stored for later use.

=head1 ARGUMENTS

None.

=head1 OUTPUT DATA

None.

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS time-series data.

=item *

The receptor Tsys values are stored in the QA_TSYS_VALUES uhdr as a
hash reference, with the key being the OBSIDSS header value and the
value being a further hash reference, where keys are the receptor name
and values are the corresponding Tsys.

=back

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array, Starlink::HDSPACK, Statistics::Descriptive.

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council. All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use Statistics::Descriptive;
use Starlink::HDSPACK qw/ create_hdsobj copy_hdsobj /;
use JCMT::ACSIS::Array;

my %tsys;
my %receptor_tsys;
my %receptor_stats;

my $key = $Frm->uhdr( "ORAC_OBSERVATION_ID" ) . "_" . $Frm->hdr( $Frm->uhdr( "ORAC_SUBSYSTEM_IDKEY" ) );

my $array_stats = new Statistics::Descriptive::Sparse;

foreach my $i ( 1 .. $Frm->nfiles ) {

  my $infile = $Frm->file( $i );

  orac_say "Retrieving Tsys values from $infile.";

  my $tmptsys = new ORAC::TempFile( 0 );

  # Copy the Tsys array out to a temporary NDF.
  my $ORAC_STATUS = ( create_hdsobj( "$tmptsys", 'NDF' ) ? ORAC__OK : ORAC__ERROR );
  $ORAC_STATUS = ( copy_hdsobj( "$infile.MORE.ACSIS.TSYS", "$tmptsys.DATA_ARRAY" ) ? ORAC__OK : ORAC__ERROR );

  # Get stats on the Tsys array.
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tmptsys" );

  ( $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

  $array_stats->add_data( $mean );

  # Get stats for each receptor.
  my $array = new JCMT::ACSIS::Array( File => $infile );
  my @receptors = $array->receptors;

  foreach my $receptor ( @receptors ) {
    my $pixel = $array->pixel( $receptor );
    $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tmptsys($pixel,)" );
    ( $ORAC_STATUS, my $pixmean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

    if( ! defined( $receptor_stats{$receptor} ) ) {
      $receptor_stats{$receptor} = new Statistics::Descriptive::Sparse;
    }
    if( $pixmean > 0 ) {
      $receptor_stats{$receptor}->add_data( $pixmean );
    }
  }
}

my $array_tsys = $array_stats->mean();
foreach my $receptor ( keys %receptor_stats ) {
  if( $receptor_stats{$receptor}->count != 0 ) {
    $receptor_tsys{$receptor} = $receptor_stats{$receptor}->mean();
  } else {
    $receptor_tsys{$receptor} = 'bad';
  }
}

orac_say sprintf( " Tsys for entire array:   %7.2f K", $array_tsys );

_PRETTYPRINT_RECEPTOR_QA_ HASH=\%receptor_tsys TYPE=Tsys

$tsys{$key} = \%receptor_tsys;

# Store the hash of Tsys values.
$Frm->uhdr( "QA_TSYS_VALUES", \%tsys );

# Tidy-up output.
orac_print "\n";
