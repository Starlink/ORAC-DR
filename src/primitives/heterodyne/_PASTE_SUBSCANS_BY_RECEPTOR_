=head1 NAME

_PASTE_SUBSCANS_BY_RECEPTOR_

=head1 DESCRIPTION

This primitive pastes the time-series cubes' subscans for a single
receptor into a single file.  A subsection along the dispersion axis
may be provided through the SECTION argument.

When all the subscans have the same number of spectra, only one call
to paste is needed, otherwise each subscan is pasted individually.
(Another approach would be to shift the origins.)

The concatenated bounds corresponding to each original subsccan is
returned through Argument BOUNDS.

=head1 ARGUMENTS

=over 4

=item BOUNDS = REFERENCE (Given & Returned)

The lower then upper temporal-axis bounds of each subscan within the
output file.  If supplied on input these will be the bounds used to
form the concatenated cube, and should comprise twice the number of
subscans.  The intention is to compute this once for the first receptor
and reuse for the remainder.

=item FILE = STRING (Given)

The name of the file in which to store the concatenated cube.
An error will result if this is not supplied.

=item JCMTSTATE = BOOLEAN (Given)

Whether or not the JCMTSTATE information needs to be manipulated
to concatenate over the subscans, and also slice to propagate
such information for the single receptor.  [0]

=item RECEPTOR = STRING (Given)

The name of the receptor, e.g. H00, whose subscans are to be
concatenated.  An error will result if this argument is not defined.

=item SAMESIZE = BOOLEAN (Given & Returned)

Whether or not the subscans are of equal dimension along the temporal
axis.  The intention is to compute this once for the first receptor
and reuse for the remainder.

=item SECTION = STRING (Given)

The NDF section along the spectral axis to permit, for example, the
trimming of the noisy ends.  ["~85%"]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS time-series data, but not hybrid
observations.

=back

=back

=head1 TASKS

KAPPA: NDFCOPY, PASTE;
SMURF: TIMESORT.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2014-2015 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;

# Handle arguments.
# =================

my $pasted = get_prim_arg( $_PRIM_ARGS_, "FILE", undef );
if ( ! defined( $pasted ) ) {
   orac_err "_PASTE_SUBSCANS_BY_RECEPTOR_: FILE not supplied (programming error)\n";
}

my $receptor = get_prim_arg( $_PRIM_ARGS_, "RECEPTOR", undef );
if ( ! defined( $receptor ) )  {
   orac_err "_PASTE_SUBSCANS_BY_RECEPTOR_: RECEPTOR not supplied (programming error)\n";
}
my $section = get_prim_arg( $_PRIM_ARGS_, "SECTION", "~85%" );
my $refbound = get_prim_arg( $_PRIM_ARGS_, "BOUNDS", undef );
my $samesize = get_prim_arg( $_PRIM_ARGS_, "SAMESIZE", undef );
my $preserve = get_prim_arg( $_PRIM_ARGS_, "JCMTSTATE", 0 );

# Other preparatory stuff
# =======================

my ( $in, $params, $ORAC_STATUS );
my ( $size, @time_bounds, $time_origin );

$in = $Frm->file;
my $tempfile = new ORAC::TempFile( 0 );

# Get the object that permits tranlation between receptor name and
# index in the second dimension of the time-series cube.
my $array = new JCMT::ACSIS::Array( File => $in );
my $pixel = $array->pixel( $receptor );

# Form array of temporal bounds for the subscans.
# ===============================================

my $no_times = 0;
if ( ! ( defined( $refbound ) && defined( $samesize ) ) ) {

# This is to enable pasting into one file for the chosen receptor.
   $samesize = 1;
   my $lastsize;

# Store the temporal bounds for each subscan within the pasted cube.
   foreach my $i ( 1 .. $Frm->nfiles ) {
      $in = $Frm->file( $i );
      _GET_DIMENSIONS_ FILE=$in
      my $lbnd = $_GET_DIMENSIONS_{LBOUND};
      my $ubnd = $_GET_DIMENSIONS_{UBOUND};
      push @time_bounds, $lbnd->[2] + $no_times, $ubnd->[2] + $no_times;

# For efficiency determine if all the subscans have the same number
# of spectra.
      $size = $ubnd->[2] - $lbnd->[2] + 1;
      $samesize = ( $size == $lastsize ) if ( $i > 1 );
      $lastsize = $size;
      $no_times += $size;
   }

} else {
   @time_bounds = @$refbound;
   $no_times = $time_bounds[-1] - $time_bounds[0] + 1;
}

# Single file
# ===========

# No pasting required, just copy the section.
if ( $Frm->nfiles == 1 ) {
   $params = "in=$in($section,$pixel,) out=$pasted";
   $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Paste and extract the receptor slice for the full observation.
# ==============================================================

# Use TIMESORT when we care about pasting and slicing the JCMTSTATE
# information.
} elsif ( $preserve ) {

# The spectral dimensions must match, otherwise TIMESORT warns about
# this without generating an error, but yields an NDF full of bad
# values.  Form the intersection of the bounds.
   my $maxlower = -100000000;
   my $minupper = 100000000;
   foreach my $i ( 1 .. $Frm->nfiles ) {
      my $file = $Frm->file( $i );
      $file .= "($section,$pixel,)";
      _GET_DIMENSIONS_ FILE=$file
      my @lbnd = @{$_GET_DIMENSIONS_{LBOUND}};
      my @ubnd = @{$_GET_DIMENSIONS_{UBOUND}};
      $maxlower = max( $lbnd[0], $maxlower );
      $minupper = min( $ubnd[0], $minupper );
   }

# Add a sanity check, although this should not fail, as we normally take
# a percentage section, where the spectral bounds may vary by a few
# pixels at each end.
   if ( $minupper > $maxlower ) {
      orac_err "_PASTE_SUBSCANS_BY_RECEPTOR_ (probable programming error): " .
               "spectral bounds of the time series being concatenated do " .
               "not overlap.";
   }
   $section = "$maxlower:$minupper";

# When the JCMTSTATE extensions need to be retained.  Form list of input
# files for TIMESORT, using the overlap bounds.
   my $inlist;
   my @files;
   foreach my $i ( 1 .. $Frm->nfiles ) {
      my $file = $Frm->file( $i );
      push @files, "$file($section,$pixel,)";
   }
   $inlist = write_file_list( @files );

# Set up parameters for TIMESORT.
   $params = "in=^$inlist out=$pasted detectors=$receptor ";
   $params .= "limittype=spectra sizelimit=$no_times merge";

# Run TIMESORT.
   $Mon{'smurf_mon'}->obeyw( "timesort", "$params" );

# Find out how many output files there were.
   my ( $ORAC_STATUS, $nout ) = $Mon{'smurf_mon'}->get( "timesort", "nout" );
   if ( $nout > 1 ) {
      orac_err "Pasting for Receptor $receptor generates more than one file.\n";
   } else {
      my $timeout = $pasted . "_1";
      $params = "in=$timeout out=$pasted";
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
   }

# Single paste
# ============

# When all the shifts are the same we only need to call PASTE once
# and without any NDFCOPYing.  Thus it is more efficient.
} elsif ( $samesize ) {
   my @files;
   foreach my $i ( 1 .. $Frm->nfiles ) {
      my $file = $Frm->file( $i );
      push @files, "$file($section,$pixel,)";
   }
   my $inlist = write_file_list( @files );

# Shift the origin on the time axis during concatenation.
   $time_origin = $time_bounds[1] - $time_bounds[0] + 1;
   $params = "in=^$inlist out=$pasted shift=[0,0,$time_origin]";
   $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

# Incremental pastes
# ==================

} else {

# Concatenate the subscans for the current receptor.
   foreach my $i ( 1 .. $Frm->nfiles ) {
      $in = $Frm->file( $i );

# Form a profile for each receptor throughout a whole observation.  The
# whole gives a better handle on the normal non-linearity level.
      if ( $i == 1 ) {
         $params = "in=$in($section,$pixel,) out=$pasted";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

       } else {

# Shift the origin on the time axis during concatenation.
         $time_origin = $time_bounds[2 * ( $i - 1 ) - 1];
         $params = "shift=[0,0,$time_origin] ";
         $params .= "in=$pasted p1=$in($section,$pixel,) out=$tempfile";
         $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

# Ready for the next subscan to concatenate.  Another, but brave, way
# is to to make the input and output the same on PASTE.
         $params = "in=$tempfile out=$pasted";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
      }
   }
}

# Returned arguments for the next receptor.
$_PASTE_SUBSCANS_BY_RECEPTOR_{BOUNDS} = \@time_bounds;
$_PASTE_SUBSCANS_BY_RECEPTOR_{SAMESIZE} = $samesize;


RETURN:
