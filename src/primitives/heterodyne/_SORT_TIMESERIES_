# -*-cperl-*-

=head1 NAME

_SORT_TIMESERIES_ - Sort timeseries data in time order.

=head1 DESCRIPTION

This primitive takes a set of timeseries cubes and sorts the time
slices into increasing time order. This has the chief advantage of
ensuring that the data has a defined transformation from WCS
coordinates to pixel coordinates. A beneficial side-effect is that the
size of the data files can reduced by purging bad detectors.

=head1 ARGUMENTS

=over 4

=item GENVAR = LOGICAL (Given)

Whether or not to generate a variance component based on Tsys, using the radiometer formula. [0]

=item MASK = LOGICAL (Given)

Whether or not to mask bad detectors. [1]

=item PURGE = LOGICAL (Given)

Whether or not to purge detectors that have no good data values in
them. [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS timeseries data.

=item *

The list of bad receptors to mask is obtained via the bad_receptor_list() accessor of the current Cal object.

=back

=head1 OUTPUT DATA

=over 4

=item *

The time-sorted timeseries data with _ts suffix.

=back

=head1 TASKS

SMURF: TIMESORT.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Retrieve parameters.
my $genvar = get_prim_arg( $_PRIM_ARGS_, "GENVAR", 0 );
my $mask = get_prim_arg( $_PRIM_ARGS_, "MASK", 1 );
my $purge = get_prim_arg( $_PRIM_ARGS_, "PURGE", 1 );

# Write a heading to structure the commentary.
orac_say "\nSorting time-series data in time order...";
my $underline = "-" x 54;
orac_say "$underline\n";

# Form two files, one holding input filenames and one holding output
# filenames.
my $infile = new ORAC::TempFile;
my $infilename = $infile->file;
my $outfile = new ORAC::TempFile;
my $outfilename = $outfile->file;

foreach my $i ( 1 .. $Frm->nfiles ) {

  my ( $in, $out ) = $Frm->inout( "_ts", $i );
  print {$infile->handle} "$in\n";
  print {$outfile->handle} "$out\n";
}

# Set up parameters for TIMESORT.
my $tsout = ORAC::TempFile->new(OPEN => 0, SUFFIX => '.lis');
my $params = "in='^$infilename' out='^$outfilename' outfiles=$tsout";
$params .= " sizelimit=! merge ";
$params .= " genvar=" . ( $genvar ? "true" : "false" );
$params .= " detpurge=" . ( $purge ? "true" : "false" );

# Retrieve a list of detectors to not use, but only if we've been
# asked to mask bad detectors.
my @baddets;
if( $mask ) {
  @baddets = $Cal->bad_receptors_list;
  if( defined( $baddets[0] ) ) {
    $params .= " detectors='-" . ( join ",",@baddets ) . "'";
  }
}

# Run TIMESORT.
$Mon{'smurf_mon'}->obeyw( "timesort", "$params" );

# Find out how many output files there were.
my( $ORAC_STATUS, $nout ) = $Mon{'smurf_mon'}->get( "timesort", "nout" );

my $tsout_files = read_file_list($tsout->file)
  or die "Could not find TIMESORT output file list";

# Update the Frm object.
foreach my $i ( 1 .. $nout ) {

  my ( $in, $out ) = $Frm->inout( "_ts", $i );

  $out =~ s/_\d{4}_/_/;

  # We need to rename the output files, as TIMESORT creates _N, and
  # we've already told it to create files with the correct suffix
  # (_tsNNN), so just remove the _N.
  my $timesort_output = $tsout_files->[$i-1];
  $timesort_output .= ".sdf";
  my $outfile = "$out.sdf";
  rename( $timesort_output, $outfile );
  $outfile =~ s/\.sdf$//;

  # Set the product.
  $Frm->product( "ts" );

  $Frm->file( $i, $outfile );

  orac_print "$in to $out:\n Sorted time slices in increasing time.\n";

  if( defined( $baddets[0] ) ) {
    orac_print " Masked detectors " . ( join ",",sort @baddets ) . ".\n";
  }

  if( $genvar ) {
    orac_print " Generated variance array based on Tsys values.\n";
  }

}

# Tidy-up output.
orac_print "\n";
