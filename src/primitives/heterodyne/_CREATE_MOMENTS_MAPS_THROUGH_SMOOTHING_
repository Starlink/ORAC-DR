# -*-cperl-*-

=head1 NAME

_CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_ - Create moments maps by
smoothing and detecting emission regions using various methods.

=head1 DESCRIPTION

This primitive is used to create moments maps. It first smooths the
cube along the frequency axis, then in the spatial axes. It then masks
out emission regions using a previously determined mask (see
_CREATE_BASELINE_MASK_), and then calculates the RMS in the
emission-free regions. This RMS is used to set a threshold for the
various emission-selection methods. Selected regions are then turned
into an emission mask (masking out non-emission) to be applied to the
original resolution cube which is then collapsed to form the moment
maps.

Three emission selection methods are available:
  CUPID::Clumpfind: selects emission by walking down peaks to lower
        intensities.
  CUPID::Fellwalker: selects emission by walking up along line of
        steepest accent until a peak or a previous found clump is
        found.
  KAPPA:Thresh: selects emission by simply accepting all data
        above a specified RMS threshold.

=head1 ARGUMENTS

=over 4

=item FREQUENCY_SMOOTH = INTEGER (Given)

The number of channels to smooth in the frequency axis when smoothing
to determine baselines. This number should be small (~10) for
narrow-line observations and large (~25) for broad-line
observations.  This argument can be overridden by the
RECPAR_FREQUENCY_SMOOTH uhdr via the recipe parameter system.  [25]

=item GROUP = INTEGER (Given)

How to process group files. 0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=item LOWER_VELOCITY = REAL (Given)

An optional lower velocity in km/s, below which no data will be used
when creating the moments map. This argument can be overridden by the
RECPAR_MOMENTS_LOWER_VELOCITY uhdr via the recipe parameter system.
[undef]

=item METHOD = STRING (Given)

Method to use to find emission in the data: 'clumpfind', 'fellwalker',
or 'thresh'.  This argument can be overridden by the
RECPAR_CLUMP_METHOD uhdr via the recipe parameter system.  ['clumpfind']

=item MOMENTS = STRING (Given)

The moment maps to create. These are any of the values allowed for the
ESTIMATOR parameter to the COLLAPSE method, but in reality this should
probably be 'integ', 'iwc', and/or 'itd'. Any number of moments can be
given in a comma-separated string. This argument can be overridden by
the RECPAR_MOMENTS uhdr via the recipe parameter system. ['integ']

=item ORDER = INTEGER (Given)

The polynomial order that will be used when estimating baselines.  This
argument can be overridden by the RECPAR_BASELINE_ORDER uhdr via the
recipe parameter system.  [1]

=item PER_LINE = LOGICAL (Given)

Whether or not to create a moments map for each detected line. [0]

=item RMS_THRESHOLD = REAL (Given)

The RMS threshold above which emission will be considered to be a
clump. A separate threshold can be specified for each moments map
requested. The last specified number will be applied to any further
moments requested. Typically 'integ' can tolerate a rms of 3-sigma,
but the higher order moments need a higher threshold. Comma-separated
string in the same order as the requested MOMENTS. [3.0,4.5]

=item SNR = LOGICAL (Given)

Whether or not to do clump detection on an SNR cube instead of the
signal cube. Useful for data taken in varying conditions. This
argument can be overridden by the RECPAR_MOMENTS_SNR uhdr via the
recipe parameter system. [0]

=item SPATIAL_SMOOTH = INTEGER (Given)

The number of pixels to smooth in both spatial axes when smoothing to
determine baselines.   This argument can be overridden by the
RECPAR_SPATIAL_SMOOTH uhdr via the recipe parameter system.  [3]

=item TAG = STRING (Given)

Which moment map to tag as a representative image. ['']

=item UPPER_VELOCITY = REAL (Given)

An optional upper velocity in km/s, above which no data will be used
when creating the moments map. This argument can be overridden by the
RECPAR_MOMENTS_UPPER_VELOCITY uhdr via the recipe parameter system.
[undef]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS cubes.

=back

=head1 OUTPUT DATA

=over 4

=item *

The moments map(s) with suffix equal to the given moment(s) by the
MOMENTS parameter.

=back

=head1 TASKS

CUPID: FINDCLUMPS
KAPPA: ADD, BLOCK, COLLAPSE, MAKESNR, NDFCOPY, NDFTRACE,
       SETBB, SETVAR, STATS

=head1 REQUIRED PERL MODULES

None, but see _COMPONENT_EXISTS_.

=head1 SEE ALSO

_COMPONENT_EXISTS_, _CREATE_BASELINE_MASK_

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>,
Remo Tilanus E<lt>r.tilanus@jach.hawaii.eduE<gt>.
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008-2009, 2014-2016 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle parameters.
my $freqsmooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $lower_velocity = get_prim_arg( $_PRIM_ARGS_, "LOWER_VELOCITY", undef );
my $moments = get_prim_arg( $_PRIM_ARGS_, "MOMENTS", 'integ' );
my $method = get_prim_arg( $_PRIM_ARGS_, "METHOD", 'clumpfind' );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $per_line = get_prim_arg( $_PRIM_ARGS_, "PER_LINE", 0 );
my $rms_thrhlds = get_prim_arg( $_PRIM_ARGS_, "RMS_THRESHOLD", '3.0,4.5' );
my $snr = get_prim_arg( $_PRIM_ARGS_, "SNR", 0 );
my $spatsmooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", undef );
my $upper_velocity = get_prim_arg( $_PRIM_ARGS_, "UPPER_VELOCITY", undef );

# Handle recipe parameters.
$freqsmooth = ( defined( $Frm->uhdr( "RECPAR_FREQUENCY_SMOOTH" ) ) ?
                $Frm->uhdr( "RECPAR_FREQUENCY_SMOOTH" )            :
                $freqsmooth );
$lower_velocity = ( defined( $Frm->uhdr( "RECPAR_MOMENTS_LOWER_VELOCITY" ) ) ?
                    $Frm->uhdr( "RECPAR_MOMENTS_LOWER_VELOCITY" )            :
                    $lower_velocity );
$method = ( defined( $Frm->uhdr( "RECPAR_CLUMP_METHOD" ) ) ?
            $Frm->uhdr( "RECPAR_CLUMP_METHOD" )            :
            $method );
$moments = ( defined( $Frm->uhdr( "RECPAR_MOMENTS" ) ) ?
             $Frm->uhdr( "RECPAR_MOMENTS" )            :
             $moments );
$order = ( defined( $Frm->uhdr( "RECPAR_BASELINE_ORDER" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_ORDER" )            :
           $order );
$snr = ( defined( $Frm->uhdr( "RECPAR_MOMENTS_SNR" ) ) ?
         $Frm->uhdr( "RECPAR_MOMENTS_SNR" )            :
         $snr );
$spatsmooth = ( defined( $Frm->uhdr( "RECPAR_SPATIAL_SMOOTH" ) ) ?
                $Frm->uhdr( "RECPAR_SPATIAL_SMOOTH" )            :
                $spatsmooth );
$upper_velocity = ( defined( $Frm->uhdr( "RECPAR_MOMENTS_UPPER_VELOCITY" ) ) ?
                    $Frm->uhdr( "RECPAR_MOMENTS_UPPER_VELOCITY" )            :
                    $upper_velocity );

my $group2 = ( $group == 2 ? 0 : $group );

my @moments = split /,/, $moments;
my @rms_thrhlds = split /,/, $rms_thrhlds;

if( $method =~ /^t/i ) {
  $method = "thresh";
} elsif( $method =~ /^f/i ) {
  $method = "fellwalker";
} else {
  $method = "clumpfind";
}

# Integer velocity must be made floating point so that NDF sectioning
# does not regard it as pixels.
if ( defined( $lower_velocity ) ) {
   if ( $lower_velocity =~ /^[+-]?\d+$/ ) { $lower_velocity = sprintf( "%.1f", $lower_velocity ) }
}
if ( defined( $upper_velocity ) ) {
   if ( $upper_velocity =~ /^[+-]?\d+$/ ) { $upper_velocity = sprintf( "%.1f", $upper_velocity ) }
}

# Make list of objects to process.
my @objs;
if( $group == 0 ) {
  push @objs, $Frm;
} elsif( $group == 1 ) {
  push @objs, $Grp;
} elsif( $group == 2 ) {
  @objs = $Grp->members;
}

if( $group != 1 || ( $group == 1 && $Grp->lastallmembers( $Frm ) ) ) {

  # Write a heading to structure the commentary.
  orac_say "\n\nCreate moment maps";
  my $underline = "-" x 29;
  orac_say "$underline\n";

  if( ! ( $group == 1 && $Grp->uhdr( "COPY_FRAME_CUBE" ) ) ) {

    foreach my $Obj ( @objs ) {

      my $jsatile = defined( $Obj->uhdr( "JSA_TILES" ) ) ?
                             $Obj->uhdr( "JSA_TILES" )   :
                             0;
      my $preview_suffix = $jsatile ? "hpxrimg" : "rimg";

      if( ! defined( $Obj->uhdr( "BASELINE_MASKS" ) ) || $jsatile ) {

        _CREATE_BASELINE_MASK_ GROUP=$group FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order

      }

      # Collapse each of the files making up the current object.
      # ========================================================
      my @collapsed;
      my %paste_inputs;
      my @smoothed;
      my @smo_obj;
      my @masked;
      my @mask_obj;

      my $nomap = 0;

      foreach my $i ( 1 .. $Obj->nfiles ) {

        if( $Obj->uhdr( "SPARSE" ) ) {
          orac_warn $Obj->file( $i ) . " is a sparse cube. Cannot create moments map for a sparse cube.\n";

        } else {

          ( my $in, undef ) = $Obj->inout( "_blah", $i );

          orac_say "Creating moments maps for $in.";

          my $masks = $Obj->uhdr( "BASELINE_MASKS" );
          my $mask;
          if ( scalar( @{ $masks } ) == 2) {
             $mask = $masks->[1];
          } else {
             $mask = $masks->[$i];
          }

          # Only do this if the cube isn't 1xMxN or Mx1xN.
          _GET_DIMENSIONS_ FILE=$in
          my $dims = $_GET_DIMENSIONS_{DIMS};
          my $lbound = $_GET_DIMENSIONS_{LBOUND};
          my $ubound = $_GET_DIMENSIONS_{UBOUND};

          if( $dims->[0] == 1 ||
              $dims->[1] == 1 ) {
            orac_warn "Cannot create moment map with a " . $dims->[0] . "x" . $dims->[1] . "x" . $dims->[2] . " cube.\n";
            $nomap = 1;

            # If both dimensions are 1, then copy this file into the _sp.
            if( $dims->[0] == 1 && $dims->[1] == 1 ) {
              $Obj->uhdr( "INTEG_MAX_POS", [ 1, 1 ] );
            } else {

              # If only one spatial dimension is 1 then just use the position
              # of the max and use that, skipping out the end ~5% in case it
              # hasn't been # trimmed. This will not always be correct, but we
              # don't have a lot of maps like this, and a rep spectra from
              # the non-perfect point is better than nothing (it will probably
              # show the noise accurately at least).
              $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$in(,,5%~95%) ");
              my ( $ORAC_STATUS, @maxpos ) = $Mon{'kappa_mon'}->get( "stats", "maxpos" );
              orac_say "Extracting representative spectrum from " . $maxpos[0] . ", " . $maxpos[1];
              $Obj->uhdr( "INTEG_MAX_POS", [$maxpos[0], $maxpos[1]] );
            }

            # Now get the maximum-value spectrum and tag it as representative.
            $Obj->uhdr( "JSA_TILES", 1) if $jsatile;
            if ($group == 2) {
              my $Frm = $Obj;
              _EXTRACT_MAXVALUE_SPECTRUM_ TAG=1
            }
            else {
              _EXTRACT_MAXVALUE_SPECTRUM_ TAG=1 GROUP=$group
            }


          } else {

            # Temporarily disable bad-bits mask.
            $Mon{'ndfpack_mon'}->obeyw( "setbb", "ndf=$in bb=0" );

            # Make SNR cube, if requested.
            my $snrtemp = new ORAC::TempFile(0);
            my $snrtempfile = $snrtemp->file;

            # Create cube of the signal-to-noise ratios.
            my $params;
            if( $snr ) {
              orac_say " Creating SNR cube.";
              $params = "in=$in out=$snrtempfile minvar=0.01";
              $Mon{'kappa_mon'}->obeyw( "makesnr", "$params" );
            } else {
              $snrtempfile = $in;
            }

            # Smooth the cube for line analysis.
            my $temp1 = new ORAC::TempFile(0);
            my $temp1file = $temp1->file;

            # Smooth the signal-to-noise spectral cube.
            orac_say " Smoothing cube with [$spatsmooth,$spatsmooth,$freqsmooth] tophat.";
            $params = "in=$snrtempfile out=$temp1file box=[$spatsmooth,$spatsmooth,$freqsmooth] estimator=mean";
            $Mon{'kappa_mon'}->obeyw( "block", "$params" );

            # Restore bad-bits mask.
            $Mon{'ndfpack_mon'}->obeyw( "setbb", "ndf=$in bb=255" );

            push @smoothed, $temp1file;
            push @smo_obj, $temp1;

            # Mask out lines.
            orac_say " Masking out lines using $mask.";
            my $temp3 = new ORAC::TempFile(0);
            my $temp3file = $temp3->file;
            $params = "in1=$temp1file in2=$mask out=$temp3file";
            $Mon{'kappa_mon'}->obeyw( "add", "$params" );

            # Copy the variance across, but only if the input cube has
            # a variance.
            $params = "ndf=$temp1file";
            $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "$params" );
            my ( $ORAC_STATUS, $var ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "variance" );
            if( uc( $var ) eq 'TRUE' ) {
              $params = "ndf=$temp3file from=$temp1file comp=VARIANCE";
              $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );
            }

            push @masked, $temp3file;
            push @mask_obj, $temp3;

          }
        }
      }

      # Get the RMS for the smoothed files.
      # ===================================
      my $medianrms;
      if( ! $nomap ) {
        _CALCULATE_RMS_ FILES=\@masked BOX=1
        $medianrms = $_CALCULATE_RMS_{RMS};

        # Allow for pathological values from junk data or invalid processing.
        if ( $medianrms =~ /nan/ || $medianrms =~ /inf/ || $medianrms < 1E-6 ) {
          orac_say "Median rms is undefined or zero.  Unable to define clumps.";
          $nomap = 1;
        } else {
          orac_say "Median RMS in smoothed observation is " . sprintf( "%0.3f", $medianrms ) . ".";
        }
      }

      # Make moment maps.
      # =================
      if ( ! $nomap ) {

        # Obtain the bounds of the regions of emission.
        # ---------------------------------------------

        # Find bounds for each identified line, if requested.
        if( $per_line ) {
          my @bounds;
          foreach my $smoothed ( @smoothed ) {
            _IDENTIFY_SPECBOUNDS_ FILE=$smoothed
            my $bounds = $_IDENTIFY_SPECBOUNDS_{'BOUNDS'};
            push @bounds, $bounds;
          }

          # Check to see if we have Number::Range. If we don't, we
          # can't do the linteg range determination (and print a
          # warning saying such.
          my $isok = eval { require Number::Range; 1; };
          if( $isok ) {
            my $range = new Number::Range;
            foreach my $b1 ( @bounds ) {
              foreach my $b2 ( @$b1 ) {
                {
                  # We need to temporarily turn off warnings because
                  # Number::Range annoyingly throws a warning if we
                  # add a number that's already in the range...
                  no warnings;
                  $range->addrange( $b2->[0] . ".." . $b2->[1] );
                }
              }
            }

            my @frmranges;
            foreach my $range_item ($range->rangeList()) {
              my ( $min, $max ) = @$range_item;

              # Individual values are returned as a single-item list.
              $max = $min unless defined $max;

              push @frmranges, [ $min, $max ];
            }

            # Store the ranges in the SPECTRAL_BOUNDS uhdr for future
            # use.
            $Obj->uhdr( "SPECTRAL_BOUNDS", \@frmranges );
          } else {
            orac_warn "Cannot load Number::Range and thus cannot create moments maps for individual lines.\n";
          }
        }

        for my $i ( 1 .. $Obj->nfiles ) {
          my $in = $Obj->file( $i );
          my $file = $smoothed[$i-1];
          orac_say "\nClump finding in $in";

          # Do the emission selection and collapse for each moment.
          # -------------------------------------------------------
          my $mom = 0;
          foreach my $moment ( @moments ) {

            # Select appropriate threshold from user specification.
            my $rms_thresh;
            if($mom <= $#rms_thrhlds) {
              $rms_thresh = $rms_thrhlds[$mom];
            } else {
              $rms_thresh = $rms_thrhlds[$#rms_thrhlds];
              orac_say " Warning: no threshold level for this moment, using previous: $rms_thresh*RMS";
            }

            # Only repeat if different threshold needed.
            ( undef, my $colin ) = $Obj->inout( "_emis" );
            if( $mom == 0 || $rms_thresh != $rms_thrhlds[$mom-1] ) {

              # Find emission/clumps
              # --------------------
              _FIND_EMISSION_ CUBE=$in FILE=$file METHOD=$method RMS=$medianrms RMS_THRESHOLD=$rms_thresh MASK=$colin

              # Ensure the mask is not tagged as representative / reduced product.
              _UNTAG_FILE_ FILE=$colin
            }

            # Remove the mask at the end of the recipe.
            $Grp->push_intermediates( $colin );

            # Collapse to form moment map.
            # ----------------------------

            # For the moment collapse the masked cube into a temporary
            # file.
            if( ! exists( $paste_inputs{$moment} ) ) {
              $paste_inputs{$moment} = ();
            }

            # Set any pixels with a BORDER QUALITY value to bad.
            my $params = "ndf=$colin bb=255";
            $Mon{'ndfpack_mon'}->obeyw( "setbb", "$params" );

            # Copy the variance across from the input cube, but only if
            # the input cube has variance.
            $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
            my ( $ORAC_STATUS, $var ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "variance" );
            if ( uc( $var ) eq 'TRUE' ) {
               $params = "ndf=$colin from=$in comp=VARIANCE";
               $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );
            }

            # For each requested spectral range, collapse. The
            # @specbounds array will have the full range (or the
            # user-requested range) as the first element, and then any
            # ranges identified for line-specific moments maps after
            # that.
            my @specbounds;
            if( defined( $Obj->uhdr( "SPECTRAL_BOUNDS" ) ) ) {
              _GET_DIMENSIONS_ FILE=$colin
              my $flbound = $_GET_DIMENSIONS_{FLBOUND};
              my $fubound = $_GET_DIMENSIONS_{FUBOUND};
              push @specbounds, [ $flbound->[2], $fubound->[2] ];
              push @specbounds, @{$Obj->uhdr( "SPECTRAL_BOUNDS" ) };

            } elsif( defined( $lower_velocity ) || defined( $upper_velocity ) ) {
              push @specbounds, [ $lower_velocity, $upper_velocity ];

            } else {
              _GET_DIMENSIONS_ FILE=$colin
              my $flbound = $_GET_DIMENSIONS_{FLBOUND};
              my $fubound = $_GET_DIMENSIONS_{FUBOUND};
              push @specbounds, [ $flbound->[2], $fubound->[2] ];
            }

            for my $i ( 0 .. $#specbounds ) {
              my $lower = $specbounds[$i]->[0];
              my $upper = $specbounds[$i]->[1];

              if( ! defined( $lower ) ) {
                _GET_DIMENSIONS_ FILE=$colin
                $lower = $_GET_DIMENSIONS_{FLBOUND}->[2];
              }
              if( ! defined( $upper ) ) {
                _GET_DIMENSIONS_ FILE=$colin
                $upper = $_GET_DIMENSIONS_{FUBOUND}->[2];
              }

              # Set up the NDF section that we're collapsing over.
              my $section = "(,,$lower:$upper)";

              # Run the COLLAPSE.
              orac_say " Collapsing to form temporary $moment map.";

              if( defined( $lower_velocity ) ) {
                orac_say " Using lower velocity of $lower_velocity km/s.";
              }
              if( defined( $upper_velocity ) ) {
                orac_say " Using upper velocity of $upper_velocity km/s.";
              }

              my $temp8 = new ORAC::TempFile(0);
              my $temp8file = $temp8->file;
              $params = "in=$colin$section out=$temp8file estimator=$moment ";
              $params .= "axis=SPEC wlim=0.0 trim=false";
              if( uc( $moment ) eq 'IWC' ) {
                $params .= " variance=false";
              } else {
                $params .= " variance";
              }
              $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

              push @{$paste_inputs{$moment}{$i}}, $temp8file;

              # Retain the temporary files beyond this block so they
              # may be pasted later.
              push @collapsed, $temp8;
            }
            $mom++;
          }
        }

        orac_say " ";

        # Paste the collapsed moments files into a single file.
        # =====================================================

        my $momref = \@moments;
        my $inputref = \%paste_inputs;
        _PASTE_MOMENTS_ OBJECT=$Obj PER_LINE=$per_line GROUP=$group MOMENTS=$momref INPUTS=$inputref PREVIEW_SUFFIX=$preview_suffix TAG=$tag

        # Tidy-up output.
        orac_say "";

      }
    }
  }
}
