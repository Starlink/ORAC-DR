=head1 NAME

_FLAG_LOWFREQ_INTERFERENCE_SPECTRA_

=head1 DESCRIPTION

This primitive identifies and masks spectra affected by low-frequency
noise.

It achieves this through the following steps.
  -  Creates a non-linearity map for each subfile cube of an observation.
     o  Thresholds the cube to +/-20 to exclude strong spikes.
     o  Masks emission regions where the astronomical line may be present
        (see LINEWIDTH argument), and trims the outer 15% where noise is
        always present.
     o  Determines the background level, effectively smoothing to remove
        structure smaller than a nominated scale (see SCALELENGTH argument).
     o  Fits linear baselines to the smoothed spectra and calculates the rms
        residuals.
     o  Derives an rms non-linearity array to provide a rectified signal.
     o  Averages the signal along the spectral axis to form a non-linearity
        profile through the time series for each receptor.
     o  For the first subfile create non-linearity profiles for each
        receptor spanning the entire observation, then concatenates
        subsequent subfile profiles.
  -  Analyses the complete non-linearity profile of each good receptor
     in turn to identify anomalous spectra.
     o  Reduces the noise to obtain a smooth profile.
     o  Rejects spectra whose mean non-linearity exceeds the mean level
        a nominated number of clipped standard deviations (see Arguments
        EDGE_CLIP and THRESH_CLIP).  The derived standard deviation
        allows for positive skewness.
     o  For the first receptor, creates a file to store a mask of rejected
        spectra, then subsequently pastes the mask for other receptors.
  -  Forms a version of each subfile cube where the non-linear
     spectra are masked.
     o  Copies the current time-series cube to form a mask cube.
     o  Expand the receptor-time series masks into the original cube
        dimensions.
     o  Populate bad values in the mask cube at the location of any
        rejected spectrum.
     o  Applies the mask to the input cube.

It has the advantage of retaining good data for receptors that are only
occasionally bad, rather than rejecting all spectra for a receptor
as _MASK_BAD_BASELINE_* primitives do.

The advantage of using all the data in an observation is that a
representative statistics can be obtained and outliers detected.
Processing the subfiles independently could lead to an ambiguity
of the mean level if a say a short subfile has a significant fraction
of non-linear spectra.  If most spectra are non-linear the whole
receptor should be rejected by L<_MASK_BAD_BASELINE_LINEARITY_>.

=head1 ARGUMENTS

=over 4

=item BASELINE_REGIONS = REAL (Given)

A comma-separated list of velocity ranges each in the format v1:v2, from
where the baseline should be tested for linearity.  It is only used
if LINEWIDTH (or its corresonpding recipe parameter) has value "base".
[undef]

=item EDGE_CLIP = STRING (Given)

The standard deviation to clip iteratively the summed non-linearity
profile in order to measure the mean and standard deviation of the
profile unaffected by bad spectra.  A comma-separated list
will perform iterative sigma clipping of outliers, but standard
deviations in the list should not decrease.  This argument
can be overridden by the RECPAR_LOWFREQ_INTERFERENCE_EDGE_CLIP
uhdr via the recipe parameter system.  ["2.0,2.0,2.5,3.0"]

=item LINEWIDTH = STRING (Given)

This specifies the location of spectral-line emission or the regions
to analyse for bad baselines.  It can be:

=over 4

=item *

"auto", which requests that the emission be found automatically;

=item *

"base" meaning test the portions of the spectrum defined by
argument BASELINE_REGIONS; or

=item *

it is the extent(s) of the source spectral line(s) measured in km/s,
supplied in a comma-separated list.  For this last option, each range
may be given as bounds separated by a colon; or as a single value
being the width about zero.  For instance "-20:50" would excise the
region -20 to +50 km/s, and "30" would exclude the -15 to +15 km/s
range.

=back

This argument can be overridden by the RECPAR_BASELINE_LINEARITY_LINEWIDTH
uhdr via the recipe parameter system.  ["auto"]

=item MIN_SPECTRA = INTEGER (Given)

Minimum number of good spectra for non-linearity filtering to be attempted.
This argument can be overridden by the RECPAR_LOWFREQ_INTERFERENCE_MIN_SPECTRA
uhdr via the recipe parameter system.  This should be at least 50.  [50]

=item SCALELENGTH = INTEGER (Given)

The smoothing scale length in pixels.  Features narrower than this are
filtered out during the background-level determination.  It should be
should be odd (if an even value is supplied, the next higher odd value
will be used) and sufficiently large to remove the noise while not
removing the low-frequency patterns in the spectra. The minimum
allowed is 51.  This argument can be overridden by the
RECPAR_BASELINE_LINEARITY_SCALELENGTH uhdr via the recipe parameter
system.  [101]

=item THRESH_CLIP = REAL (Given)

The number of standard deviations at which to threshold the noise
profile above the mean level.  This argument can be overridden by
the RECPAR_LOWFREQ_INTERFERENCE_THRESH_CLIP uhdr via the recipe
parameter system.  [4.0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS time-series data comprising at
least MIN_SPECTRA spectra.

=item *

This primitive is suitable for spectral-line observations.

=item *

This primitive will not run if the LOWFREQ_INTERFERENCE uhdr in the current
Frame object is defined and false.

=item *

The 85% trimming of the spectra is the same trim applied in the
QA primitives.

=item *

The primitive excludes analysis of the bad receptors, defaulting to
those listed in either the master (F<$ORAC_DATA_CAL/index.bad_receptors>)
or the local index F<$ORAC_DATA_OUT/index.bad_receptors_qa>).

=item *

If automatic emission detection is selected through LINEWIDTH the
one-dimensional spectral mask generated is tagged
APPROX_EMISSION_E<lt>iE<gt> for possible later reuse, where E<lt>iE<gt>
is the subsystem number.

=item *

It checks whether or not the internal header MERGED_HYBRID is set; if
it is defined then non-linearity tests are applied to the merged
spectra, otherwise the primitive performs the tests in each subband
independently.

=back

=head1 OUTPUT DATA

=over 4

=item *

A cleaned version of the supplied time-series cube in which the noisy
spectra are set to bad.  It has the suffix _lfimasked (for Low
Frequency Interference).

=back

=head1 TASKS

CUPID: FINDBACK;
KAPPA: BLOCK, CHPIX, COPYBAD, COLLAPSE, MANIC, MATHS, MFITTREND, NDFCOPY,
       PASTE, SETORIGIN, SETTYPE, STATS, THRESH.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array, ORAC::Constants.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2014 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;
use ORAC::Constants qw/ :badvalues /;

# Inquire whether or not  non-linear baseline filtering is required.
my $apply = ( defined( $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE" ) ) ?
            $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE" )              :
            1 );
my $type = lc( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) );

if ( ! $apply ) { goto RETURN }

# Handle arguments.
# =================

my $b_regions = get_prim_arg( $_PRIM_ARGS_, "BASELINE_REGIONS", undef );
my $edge_clip = get_prim_arg( $_PRIM_ARGS_, "EDGE_CLIP", "2.0,2.0,2.5,3.0" );
my $thresh_clip = get_prim_arg( $_PRIM_ARGS_, "THRESH_CLIP", "4.0" );
my $emission_mask = get_prim_arg( $_PRIM_ARGS_, "LINEWIDTH", "auto" );
my $min_spec = get_prim_arg( $_PRIM_ARGS_, "MIN_SPECTRA", "50" );
my $smooth_scale = get_prim_arg( $_PRIM_ARGS_, "SCALELENGTH", 101 );


# Handle recipe parameter overrides.
$b_regions = ( defined( $Frm->uhdr( "RECPAR_BASELINE_REGIONS" ) ) ?
             $Frm->uhdr( "RECPAR_BASELINE_REGIONS" )              :
             $b_regions );
my @regions;
if ( ref( $b_regions ) eq 'ARRAY' ) { @regions = @{ $b_regions } }

$edge_clip = ( defined( $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_EDGE_CLIP" ) ) ?
             $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_EDGE_CLIP" )              :
             $edge_clip );
if ( ref( $edge_clip ) eq 'ARRAY' ) { $edge_clip = join( ",", @{ $edge_clip } ) }

$emission_mask = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH" ) ) ?
                $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH" )         :
                $emission_mask );

$smooth_scale = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH" ) ) ?
                $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH" )       :
                $smooth_scale );

$min_spec = ( defined( $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_MIN_SPECTRA" ) ) ?
            $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_MIN_SPECTRA" )              :
            $min_spec );

$thresh_clip = ( defined( $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_THRESH_CLIP" ) ) ?
             $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_THRESH_CLIP" )                :
             $thresh_clip );

# Convert list of standard-deviation clip levels to an array.
my @clips = split( ',', $edge_clip );

# Constrain parameters to allowed values.
# ---------------------------------------

# Deal with the various options specifying the emission regions.
my $auto_emission = 0;
my $emission_count = 0;
my $user_region = 0;
my ( @allbounds, @emission_bounds );
my ( @baseline_bounds );

if ( lc( $emission_mask ) =~ /auto/ ) {
   $auto_emission = 1;

} elsif ( lc( $emission_mask ) =~ /base/ ) {

# Validate baseline-region syntax and conveet from baseline bounds to
# emission bounds leaving tokens for the first and last bounds.
   if ( defined( $b_regions ) ) {
      foreach ( @regions ) {
         if ( /:/ ) {
            my ( $lowvel, $uppvel ) = split( ":", $_ );
            $user_region = 1;
            push @baseline_bounds, $lowvel;
            push @baseline_bounds, $uppvel;
         } else {
            $user_region = 0;
            last;
         }
      }

      if ( ! $user_region ) {
         orac_err "Supplied baseline extents have invalid format\n" .
                  "Syntax is <lower1>:<upper1>,<lower2>:<upper2>,...\n";
      }

# Sort so there lower and upper bounds can be tacked on, if necessary.
# Assume that the user has not set overlapping bounds.
      @baseline_bounds = sort { $a <=> $b } @baseline_bounds;
      push @emission_bounds, "lb";
      push @emission_bounds, @baseline_bounds;
      push @emission_bounds, "ub";
   }

# Generate a comma-separated list if this has been turned into a stringified
# ARRAY reference.
} else {
   if ( ref( $emission_mask ) eq 'ARRAY' ) {
      $emission_mask = join ",", @$emission_mask;
   }
   $emission_mask =~ tr/["']+//d;
   @allbounds = split( /,/, $emission_mask );
   $emission_count = scalar( @allbounds );

   foreach ( @allbounds ) {
      my @e_bounds = split( /:/, $_ );

# A single value means use this width symmetric about zero.  Ensure
# that a round number like 25 km/s is interpreted by the NDF section as
# a velocity not pixels by giving it a decimal place.
      if ( scalar( @e_bounds ) == 1 ) {
         my $halfwidth = sprintf( "%.1f", 0.5 * $e_bounds[0] );
         push @emission_bounds, -$halfwidth;
         push @emission_bounds, $halfwidth;
      } else {
         foreach ( @e_bounds ) {
            if ( /^[+-]?\d+$/ ) { $_ = sprintf( "%.1f", $_ ) }
            push @emission_bounds, $_;
         }
      }
   }
}

# Smaller than this give poorer results emprically.
$smooth_scale = max( 51, $smooth_scale );
$min_spec = max( 50, $min_spec );

# Sigma clipping levels should not decrease. Do not set the initial
# threshold too low lest we exclude acceptable but slightly deviant
# spectra in an otherwise good set.
my @clip_sigma = ();
my $last = 2.0;
foreach ( @clips ) {
   $_ =~ tr/["']+//d;
   push @clip_sigma, max( $last, $_ );
}

$edge_clip = "[" . join( ",", @clip_sigma ) . "]";

# Heading for commentary.
# =======================

orac_say "\n\nRemove low-frequency interference";
my $underline = "-" x 49;
orac_say "$underline\n";

# Are there sufficient spectra?
# =============================
#
# First determine if there are sufficient spectra to do a meaningful
# analysis.  Sum through all the files, but almost certainly if there is
# more than one file, there are sufficient spectra.  The default limit is
# arbitrary trying to permit removal of bad spectra in small rasters.
_GET_NUMBER_OF_SPECTRA_
my $no_spec = $_GET_NUMBER_OF_SPECTRA_{COUNT};

if ( $no_spec < $min_spec ) {
   orac_warn "Too few spectra ($no_spec) for low-frequency-interference analysis.  The minimum is $min_spec.\n";
   goto RETURN;
}

# Form arrays of bad then good detectors.
# =======================================

# The default argument of $Cal->bad_receptors is "INDEXORMASTER".  However,
# the master index is far too underpopulated and can lead to picking an
# entry that is months before or after the date of the observation being
# processed.  Valid receptors can then be rejected and bad ones included.
# While this could be circumvented, such as making a private
# $ORAC_DATA_CAL/index.bad_receptors and enter a null (H14) entry if
# a night has no bad receptors.  A better technique is to use the
# -calib bad_receptors command-line option, through which one can also
# supply a list of bad receptors directly.  Here we specify INDEX to only
# use the pipeline-generated bad receptors.
#
# The reading of INDEX also sets up the survey (survey_br).
$Cal->bad_receptors( "INDEX" );
my @baddets = $Cal->bad_receptors_list;
orac_say( "Receptors disabled by the calibration system: " . join( ",", sort @baddets ) );

my $refname = $Frm->file( 1 );
my $array = new JCMT::ACSIS::Array( File => $refname );

# Form set of receptors that are not bad in the index list.
my @receptors = grep{ my $x=$_; not grep { $x =~ /\Q$_/i} @baddets} $array->receptors;
@receptors = sort @receptors;
my $no_receptor = scalar( @receptors );


# Obtain the emission mask for each subband.
# ==========================================

# First form separate Frames each with a common SUBSYSNR (subband index)
# value.
my @subband_Frms;
if ( defined( $Frm->uhdr( "MERGED_HYBRID" ) ) ) {
   push @subband_Frms, $Frm;
} else {
   my @subband_key = ( 'SUBSYSNR' );
   @subband_Frms = $Frm->subfrms( @subband_key );
}
my $nsubsys = scalar( @subband_Frms );

# Make an array of the masks for each subband.
my @maskspectrum;
if ( $auto_emission ) {

# Record the current Frame.
   _SET_TAG_ GROUP=0 TAG=BEFORE_EMISSION_MASK

   foreach my $i ( 1 .. $nsubsys ) {

# Use a pre-calculated mask indicating approximately the velocities where
# emission exists, if one exists.
      _RETRIEVE_TAG_ GROUP=0 TAG=APPROX_EMISSION_$i
      my $tag_status = $_RETRIEVE_TAG_{STATUS};
      if ( $tag_status ) {
         my $spectral_mask = $Frm->file;
         push @maskspectrum, $spectral_mask;

      } else {
         push @maskspectrum, "null";
      }
   }

# Reset to the Frame present as we entered this primitive.
   _RETRIEVE_TAG_ GROUP=0 TAG=BEFORE_EMISSION_MASK
}

# Specify output and temporary filenames, and their bounds.
# =========================================================

my $params;
my $osuffix = "_lfimasked";

my $linearity_profiles = new ORAC::TempFile( 0 );


# Loop through all subsystems forming a representative spectrum for each.
# Normally there will be just one band.
my @outfiles;
foreach my $subsys ( 0 .. $nsubsys - 1 ) {

   my $no_times = 0;
   my @time_bounds;

# Process each subband independently.
   my $Frm = $subband_Frms[$subsys];

   foreach my $i ( 1 .. $Frm->nfiles ) {

# Set/get filenames.
      my ( $in, $in_th ) = $Frm->inout( "_desp", $i );
      orac_say( "Determine spectra exhibiting transient low-frequency interference in $in." );

      my $temp1file = new ORAC::TempFile( 0 );
      my $temp2file = new ORAC::TempFile( 0 );
      my $temp3file = new ORAC::TempFile( 0 );
      my $temp4file = new ORAC::TempFile( 0 );
      my $temp5file = new ORAC::TempFile( 0 );
      my $temp6file = new ORAC::TempFile( 0 );
      my $temp7file = new ORAC::TempFile( 0 );

# We need the dimensions of the input file for later.
      _GET_DIMENSIONS_ FILE=$in
      my $lbnd = $_GET_DIMENSIONS_{LBOUND};
      my $ubnd = $_GET_DIMENSIONS_{UBOUND};
      my $dims = $_GET_DIMENSIONS_{DIMS};
      my $nel = $ubnd->[0] - $lbnd->[0] + 1;
      push @time_bounds, $lbnd->[2] + $no_times, $ubnd->[2] + $no_times;
      $no_times += $ubnd->[2] - $lbnd->[2] + 1;

# Determine valid spectral range.
# ===============================

# This will either be the regular central 85%, or to user-defined
# final velocity limits, whichever is more extensive.
      _GET_SPECTRAL_LIMITS_ FILE=$in TRIM_PERCENT=85
      my $lower_spect = $_GET_SPECTRAL_LIMITS_{LBOUND};
      my $upper_spect = $_GET_SPECTRAL_LIMITS_{UBOUND};

# Find the interference.
# ======================

# The data thus appear noisy because of a typically 50-pixel frequency
# sinusoid in the baseline.
      my $spec_bounds = "$lower_spect:$upper_spect";
      if ( defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) &&
           $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) { $spec_bounds = "" }

# Apply threshold to exclude spikes in the spectra.  Note some early
# spectra had a large bias, hence filter around the median.
      my $semirange = 20;
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$in($spec_bounds,,) order" );
      my ( $ORAC_STATUS, $median ) = $Mon{'kappa_mon'}->get( "stats", "median" );
      if ( $median != VAL__BADD ) {
         my $thr_low = sprintf( "%.1f", $median - $semirange );
         my $thr_high = sprintf( "%.1f", $median + $semirange );

         orac_say( "  Thresholding the spectra at +/- $semirange to exclude spikes." );
         $params = "in=$in($spec_bounds,,) out=$in_th thrlo=$thr_low newlo=bad thrhi=$thr_high newhi=bad";
         $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
      } else {
         orac_warn "Unable to threshold spikes as the median of the spectra is bad\n";
         $in_th = $in;
      }

# Use a pre-calculated mask indicating approximately the velocities where
# emission exists, if it was accessed.
      my $have_auto_emission = defined( $maskspectrum[$subsys] ) &&
                               $maskspectrum[$subsys] ne 'null';
      if ( $have_auto_emission ) {

# Grow the spectrum mask to the original time series cube's bounds along
# the second and third dimensions.
         my $maskcube = new ORAC::TempFile( 0 );
         $params = "in=$maskspectrum[$subsys] out=$maskcube axes=[1,0,0] ";
         $params .= "lbound=[" . $lbnd->[1] . "," . $lbnd->[2] . "] ";
         $params .= "ubound=[" . $ubnd->[1] . "," . $ubnd->[2] . "]";
         $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Apply the mask.
         $params = "in1=$in_th in2=$maskcube out=$temp2file";
         $Mon{'kappa_mon'}->obeyw( "add", "$params" );
         orac_say( "  Masking emission in spectra using $maskspectrum[$subsys]" );

# Switch off the selected auto emission, as presumably the recipe has
# not called _LOCATE_SPECTRUM_EMISSION_APPROX and use the default range.
# Since the emission bounds were chosen for a reason extend the normal
# default range.
      } elsif ( $auto_emission ) {
         @emission_bounds = ( "-50.0", "50.0" );
         orac_warn "The approximate emission mask has not been calculated " .
                   "(possible programming error).  Using the default range.\n";
         $emission_count = 1;
         $auto_emission = 0;
      }

# Mask out the central region to exclude narrow astronomical line, but
# even that has wings.  Allow for variable spectral range by using a
# velocity range.
      if ( $emission_count == 1 && ! $auto_emission ) {
         orac_say( "  Masking the velocity range $emission_bounds[0] to $emission_bounds[1] km/s to exclude astronomical lines." );
         my $chpix_section = "$emission_bounds[0]:$emission_bounds[1],,";
         $params = "in=$in_th out=$temp2file section='$chpix_section' newval=bad";
         $Mon{'kappa_mon'}->obeyw( "chpix", "$params" );

      } elsif ( ! $auto_emission ) {

# Substitute the spectral bounds for the dummy values so that the
# emission is deemed to extend to the edges.
         if ( $user_region ) {
            my $direction = ( $ubnd->[0] - $lbnd->[0] ) / abs( $ubnd->[0] - $lbnd->[0] );
            if ( $direction > 0 ) {
               $emission_bounds[0] = $lbnd->[0];
               $emission_bounds[-1] = $ubnd->[0];
            } else {
               $emission_bounds[0] = $ubnd->[0];
               $emission_bounds[-1] = $lbnd->[0];
            }
         }

         orac_say( "  Masking the following velocity ranges to exclude astronomical lines:" );
         orac_say "  " . join ",", ( grep { defined } map { $_ % 2 ? undef : join ":",
                  $emission_bounds[$_], $emission_bounds[$_+1]}0..$#emission_bounds );

# We have the regions in velocities but the masking primitive which
# runs ARDMASK works in pixels.  First create an NDF containing just
# the spectral axis.
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in_th(,~1,~1) out=$temp2file trim trimwcs" );

         my @pixel_emission;
         $params = "framein=dsbspectrum frameout=pixel ndf=$temp2file ";
         for ( my $j = 0; $j <= $#emission_bounds; $j++ ) {
            $Mon{'kappa_mon'}->obeyw( "wcstran", "$params posin=$emission_bounds[$j]" );
            ( $ORAC_STATUS, my $pixel_coord ) = $Mon{'kappa_mon'}->get( "wcstran", "posout" );
            push @pixel_emission, $pixel_coord;
         }

# Further indirection appears to be needed for passing the velocity
# ranges to _MASK_SINGLE_AXIS_REGIONS_.
         my @em_bounds = \@pixel_emission;

# Store the thresholded file for the masking primitive.
         {
            my $Frm = new $Frm;
            $Frm->file( $in_th );

            _MASK_SINGLE_AXIS_REGIONS_ INVERSE=0 USEAXIS=1 REGIONS=\@em_bounds SUFFIX=emmask

# Capture the masked file, and default to remove at the end of processing.
            $temp2file = $Frm->file;
         }
         $Frm->push_intermediates( $temp2file );

      }

# Permit file tidying of the thresholded file.
      _DELETE_A_FRAME_ FRAME=$in_th

# Find the trends in the background.
# ----------------------------------
# This step prevents the rms from a baseline fit being swamped by the noise.
# The goal is to find whether the linear fit is a good match to global shape
# of the baseline.  This aims to identify ripples or turned-up ends of the
# spectra.  Note that FINDBACK Parameter BOX should only supply elements up
# to the number of significant dimensions.
      orac_say( "  Determine the smooth trends of the spectra using a filter width of $smooth_scale pixels." );
      my $boxparam = "[$smooth_scale,1,1]";
      if ( $dims->[1] == 1 ) { $boxparam = "[$smooth_scale,1]" }
      $params = "in=$temp2file out=$temp3file box=$boxparam sub=false accept";
      my $FINDBACK_STATUS = $Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# FINDBACK can fall over, but this should not be fatal.
      if ( $FINDBACK_STATUS != ORAC__OK ) {
         if ( starversion_gt( 'CUPID', 'V1.6' ) && $FINDBACK_STATUS == 262703466 ) {
            orac_say "  Unable to find the background level in the spectra due to insufficient good data.";
         }
         orac_say "Attempting to continue using block smoothing.";
         $params = "in=$temp2file out=$temp3file box=$boxparam estimator=median";
         $Mon{'kappa_mon'}->obeyw( "block", "$params" );
      }

# Subtract linear baselines from smoothed spectrum for each detector.
      orac_say( "  Fit linear baselines and subtract these from the trends." );
      $params = "in=$temp3file out=$temp4file modifyin=false subtract auto";
      $params .= " order=1 axis=spec method=single";
      $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

# Form clean non-linearity profile.
# ---------------------------------
#
# Find the rms residuals from a linear baseline i.e. a positive measure of the
# deviation from flatness.  The normalisation is arbitrary so just approximate with
# the full spectral dimension.
      $params = "ia=$temp4file out=$temp5file exp='sqrt(IA*IA/$nel)'";
      $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Collapse the spectral axis using a clipped mean to form average
# non-linearity for each spectrum and each current detector.
      orac_say( "  Collapsing spectra to form average non-linearity per spectrum." );
      $params = "in=$temp5file out=$temp6file estimator=mean";
      $params .= " axis=spec trim wlim=0.0 variance=false";
      $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Concatenate the profiles.
# -------------------------

# Form a profile for each receptor throughout a whole observation.  The
# whole gives a better handle on the normal non-linearity level.
      if ( $i == 1 ) {
         $params = "in=$temp6file out=$linearity_profiles";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

      } else {

# Shift the origin on the time during concatenation.
         my $time_origin = $time_bounds[-2] - 1;
         $params = "shift=[0,$time_origin] ";
         $params .= "in=$linearity_profiles p1=$temp6file out=$temp7file";
         $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

# Ready for the next slice to concatenate.  Another, but brave, way
# is to to make the input and output the same on PASTE.
         $params = "in=$temp7file out=$linearity_profiles";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
      }
   }

# Get average rms deviations for each receptor not in the bad_receptors list.
# ---------------------------------------------------------------------------
   my $linearity_mask = new ORAC::TempFile( 0 );

   orac_say "";
   foreach my $receptor ( @receptors ) {
      orac_say( "Receptor $receptor." );
      my $pixel = $array->pixel( $receptor );

      my $temp8file = new ORAC::TempFile( 0 );
      my $temp9file = new ORAC::TempFile( 0 );
      my $temp10file = new ORAC::TempFile( 0 );
      my $temp11file = new ORAC::TempFile( 0 );

# Identify anomalous spectra.
# ---------------------------

# First greatly reduce the effect of noise, provided there are
# sufficient spectra (arbitrarily twice the box size).;
      my $boxsize = 11;
      if ( $no_times > 2 * $boxsize ) {
         $params = "in=$linearity_profiles($pixel,) out=$temp8file box=$boxsize estimator=mean";
         $Mon{'kappa_mon'}->obeyw( "block", "$params" );

      } else {
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$linearity_profiles($pixel,) out=$temp8file" );
      }

# To obtain the desired binning resolution for the histogram peak cut off
# definitely non-linear spectra.
      my $threshold = 0.08;
      $params = "in=$temp8file out=$temp11file thrlo=0 thrhi=$threshold newlo=0.0 newhi=bad";
      $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

# Estimate the normal level, and standard deviation excluding anomalous spectra.
# This assumes that most of the spectra are good and the drift is not
# significant compared with the non-linearity.
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp11file clip=$edge_clip order" );
      my ( $ORAC_STATUS, $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
      ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
      ( $ORAC_STATUS, my $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

# Estimate the normal level, and standard deviation excluding anomalous spectra.
# The minimum number is arbitrary.  It's based on needing around ten
# bins and at least 50 values in the peak bins.  Its aim is to catch those cases
# where most of the spectra are non-linear and exceed the 0.08 threshold.
      my ( $mode, $sigma );
      my $apply_thresh = 0;
      if ( $numgood > 200 && $numgood > 0.1 * $numpix ) {

# FINDCLUMPS can give off-centre centroids weighted by the outliers we
# want to exclude and the width is enlarged by outliers.  So just use the
# histogram peak.  Smooth to define the peak better.  One could do
# Gaussian fits to derive the sigma or combine the central few to derive
# a more-precise peak.  For the moment this seems adequate.
         my $Frm = $Frm->new;
         $Frm->file( $temp11file );
         _FIND_HISTOGRAM_PEAK_ EXTREME=1 SMOOTH=1 METHOD=Peak FINE_RESOLUTION=0
         if ( defined $_FIND_HISTOGRAM_PEAK_{PEAK} ) {
            $mode = $_FIND_HISTOGRAM_PEAK_{PEAK};

         } else {
            $mode = $mean;
         }

# Find the percentile of the peak.
         $params = "in=$temp11file above=no value=$mode";
         $Mon{'kappa_mon'}->obeyw( "numb", "$params" );
         ( $ORAC_STATUS, my $number_below ) = $Mon{'kappa_mon'}->get( "numb", "number" );
         my $percentile_peak = 100.0 * ( $number_below + 1 ) / $numgood;

# Set the percentile for two-sigma below the mode.  For a normal
# distribution the mean, mode, and median are the same.  As there are
# positive outliers from non-linear spectra the peak shift the two-sigma
# percentile down accordingly.
         my $two_sigma_percentile = 2.23 * $percentile_peak / 50.0;

# The distribution is skew to higher values.  We would like the mode
# and width of the normal curve around that.  The mode is approximated by
# the heavily clipped mean.  Now obtain the two-sigma level below
# the mode without clipping.
         $params = "ndf=$temp11file percentiles=$two_sigma_percentile order";
         $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
         ( $ORAC_STATUS, my $perval ) = $Mon{'kappa_mon'}->get( "stats", "perval" );
         $sigma = 0.5 * ( $mode - $perval );
         $threshold = max( 0.003, min( $mode + 0.006, $mode + $thresh_clip * $sigma ) );
         $apply_thresh = 1;
      }

# Threshold spectra whose mean rms non-linearity exceeds an outlier limit.
# Only exclude values when a new threshold has been set.  The statistics
# from the default threshold should still be in the output parameters.
#
# The median will give a reliable normal signal on which there are
# spikes or broader mountains caused by the oscillating noise in the
# time series for the detector.  On the other hand the mean does give
# a lower and better estimate in the presence of several blocks of
# non-linear spectra.  In most cases there is no interference
# noise, so protect against drift and signal variations in the timeseries
# causing the dispersion; these should be small compared with the signal
# being detected.
      if ( $numgood > 0 &&
           ! ( lc( $threshold ) =~ /inf/ || lc( $threshold ) =~ /nan/ ) ) {
         orac_say( "    Turning off spectra with rms non-linearity above " . sprintf( "%.5f", $threshold ) );
         if ( $apply_thresh ) {
            $params = "in=$temp8file out=$temp9file thrlo=-1 newlo=bad thrhi=$threshold newhi=bad";
            $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
         } else {
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp8file out=$temp9file" );
         }
         ( $ORAC_STATUS, my $eject ) = $Mon{'kappa_mon'}->get( "thresh", "numhi" );
         ( $ORAC_STATUS, my $kept ) = $Mon{'kappa_mon'}->get( "thresh", "numsame" );
         my $total = $eject + $kept;
         if ( $eject == 1 ) {
            orac_say( "      One spectrum removed out of $total." );
         } elsif ( $eject > 0 ) {
            orac_say( "      $eject spectra removed out of $total." );
         } else {
            orac_say( "      No spectra removed out of $total." );
         }

      } else {
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp8file out=$temp9file" );
      }

# Form file containing the masks for each receptor.
# =================================================

# Copy the profiles initially then concatenate them.
      if ( $receptor eq $receptors[0] ) {
         $params = "in=$temp9file out=$linearity_mask";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

      } else {
         $params = "in=$linearity_mask p1=$temp9file out=$temp10file";
         $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

         $params = "in=$temp10file out=$linearity_mask";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
      }
   }

# Loop over the subfiles again to apply the flagging.
# ===================================================

   foreach my $i ( 1 .. $Frm->nfiles ) {
      my ( $in, $out ) = $Frm->inout( $osuffix, $i );

      _GET_DIMENSIONS_ FILE=$in
      my $lbnd = $_GET_DIMENSIONS_{LBOUND};
      my $ubnd = $_GET_DIMENSIONS_{UBOUND};

      my $temp11file = new ORAC::TempFile( 0 );
      my $temp12file = new ORAC::TempFile( 0 );

# Create a mask NDF.
# ------------------
#
# As we shall be filling every receptor plane with a mask of any noisy
# spectra, it is adequate to merely copy the input NDF.
      my $cubemask = new ORAC::TempFile( 0 );
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$cubemask" );

# Add plane for receptor into mask cube.
# --------------------------------------

# Pick out the section of the profile MASK applicable to the current
# input time-series file.
      my $t_lbnd = $time_bounds[2 * $i - 2];
      my $t_ubnd = $time_bounds[2 * $i - 1];

# Expand the thresholded image to the size of the current receptor's
# plane in the initial cube.
      orac_say( "   Expand the masked profile." );
      $params = "in=$linearity_mask(,$t_lbnd:$t_ubnd) out=$temp11file ";
      $params .= "axes=[0,1,2] lbound=" . $lbnd->[0] . " ubound=" . $ubnd->[0];
      $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Restore the origin on the time axis.
      $params = "ndf=$temp11file like=$cubemask";
      $Mon{ "ndfpack_mon" }->obeyw( "setorigin", "$params" );

# Paste the data to the mask file.
      orac_say( "   Paste the masked data into the cube mask." );
      $params = "in=$cubemask p1=$temp11file out=$temp12file confine=false transp=false";
      $Mon{'kappa_mon'}->obeyw( "paste", "$params" );
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp12file out=$cubemask" );

# At this point $cubemask should have all the original receptors
# checked for wobbly spectra and have bad values for those spectra.
# Copy the bad spectra to the output image.
      orac_say( "  Apply the mask of noisy spectra to the input time series to form $out.\n" );
      $params = "in=$in ref=$cubemask out=$out";
      $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );

# Record the files to update the input Frm at the end of processing.
      push @outfiles, $out;

# Display if necessary.
      $Display->display_data( $Frm ) if defined $Display;
   }
}

# Update the current files in the Frm object.
$Frm->files( @outfiles );

# Tidy-up output.
orac_print "\n";

RETURN:
