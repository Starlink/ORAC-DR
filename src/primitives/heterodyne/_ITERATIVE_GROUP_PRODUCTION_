# -*-cperl-*-

=head1 NAME

_ITERATIVE_GROUP_PRODUCTION_ - Iteratively create group co-adds for
heterodyne data.

=head1 DESCRIPTION

This primitive creates a group co-added cube from all members of the
current group. It then baselines the cube and creates moments maps.

In the process of baselining the group cube, this primitive also
creates a baseline mask file, masking out emission. It then runs this
mask through UNMAKECUBE to create time-series masks. These masks are
applied to the original time-series data, which are then
baselined. The baselined time-series data are then run through
MAKECUBE to create individual baselined cubes for each
observation. Moments maps are then made from these cubes.

=head1 ARGUMENTS

=over 4

=item BASELINE_REGIONS = REAL (Given)

A comma-separated list of velocity ranges each in the format v1:v2, from
where the baseline should be estimated.  It is countermanded should EDGES
be defined.  [undef]

=item EDGES = INTEGER (Given)

Percentage of the full range to fit on either edge of the spectrum for
baselining purposes. If set to zero and BASELINE_REGIONS is undefined,
then perform smoothing and automatic baseline detection. [0]

=item FLATFIELD = LOGICAL (Given)

Whether or not to flat-field the baselined time-series data. This
argument can be overridden by the RECPAR_FLATFIELD uhdr via the recipe
parameter system. [0]

=item FLAT_METHOD = STRING (Given)

When flat-fielding is required (cf. FLATFIELD argument) this selects
the method used to derive the relative gains of the receptors.  The
allowed selection comprises 'ratio' which finds the histogram peaks of
the ratio of voxel values; and 'sum' which finds the integrated flux.
This argument can be overridden by the RECPAR_FLAT_METHOD uhdr via the
recipe parameter system.  ['sum']

=item FREQUENCY_SMOOTH = INTEGER (Given)

The number of channels to smooth in the frequency axis when smoothing
to determine baselines. This number should be small (~10) for
narrow-line observations and large (~25) for broad-line
observations. [25]

=item ITERATIONS = INTEGER (Given)

The number of iterations to perform. [1]

=item JSATILE = LOGICAL (Given)

If true JSA tiles will be created. [0]

=item LOWER_VELOCITY = REAL (Given)

The requested lower velocity, in km/s to be applied to products
created after the final iteration.  This argument can be overridden by
the RECPAR_FINAL_LOWER_VELOCITY uhdr via the recipe parameter system.  [undef]

=item MOMENTS = STRING (Given)

The moment maps to create. These are any of the values allowed for the
ESTIMATOR parameter to the COLLAPSE method, but in reality this should
probably be 'integ', 'iwc', and/or 'itd'. Any number of moments can be
given in a comma-separated string.  A value of 'none' prevents creation
of any moment maps.  This argument can be overridden by the RECPAR_MOMENTS
uhdr via the recipe parameter system.  ['integ']

=item METHOD = STRING (given)

Method to use to find emission in the data: 'clumpfind', 'fellwalker',
or 'thresh'. ['clumpfind']

=item ORDER = INTEGER (Given)

The polynomial order that will be used when estimating baselines.
This argument can be overridden by the RECPAR_BASELINE_ORDER uhdr
via the recipe parameter system.  [1]

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically.  This argument can be overridden
by the RECPAR_SPREAD_WIDTH uhdr via the recipe parameter system.  [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0, and the run-time default value is 2.0.  For the
Gauss and SincGauss scheme, it specifies the full-width at
half-maximum (FWHM) of the Gaussian envelope.  The minimum value is
0.1, and the run-time default is 1.0.  This argument can be overridden
by the RECPAR_SPREAD_FWHM_OR_ZERO uhdr via the recipe parameter
system.  []

=item PER_LINE = LOGICAL (Given)

Whether or not to create a moments map for each detected line. [0]

=item PIXSIZE = REAL (Given)

The output pixel scale. If not defined, this value is automatically
determined from the data.  This argument can be overridden by the
RECPAR_PIXSIZE uhdr via the recipe parameter system.  []

=item QA = LOGICAL (Given)

Whether or not to perform quality assurance tests on output files. [1]

=item REBIN = STRING (Given)

A comma-separated list of requested rebinning resolutions, in km/s. A
rebinned cube will be created for each requested resolution. Only the
group cube will be rebinned. This argument can be overridden by the
RECPAR_REBIN uhdr via the recipe parameter system. []

=item RMS_THRESHOLD = REAL (Given)

The RMS threshold above which emission will be considered to be a
clump. A separate threshold can be specified for each moments map
requested. The last specified number will be applied to any further
moments requested. Typically 'integ' can tolerate a rms of 3-sigma,
but the higher order moments need a higher threshold. Comma-separated
string in the same order as the requested MOMENTS. [3.0,4.0]

=item SPATIAL_SMOOTH = INTEGER (Given)

The number of pixels to smooth in both spatial axes when smoothing to
determine baselines. [3]

=item SPREAD = STRING (Given)

The method to use when spreading each input pixel value out between a
group of neighbouring output pixels when using MAKECUBE to generate a
cube. This argument can be overridden by the RECPAR_SPREAD_METHOD uhdr
via the recipe parameter system.['nearest']

=item SYSTEM = STRING (Given)

The celestial coordinate system for the output cube. Can be any one of
ICRS, GAPPT, FK5, FK4, FK4-NO-E, AZEL, GALACTIC, or ECLIPTIC. A
special value of TRACKING can also be given, in which case the system
used will be that used as the tracking system during the
observation.

If this argument is not defined, then the system is determined from
the data and is typically set to 'tracking'. The only case where this
does not apply is if the observation is a scan and the scanning was
done in AZ/EL, in which case the system will be set to 'AZEL'.

This argument can be overridden by the RECPAR_SYSTEM uhdr via the
recipe parameter system. [undef]

=item TILE = LOGICAL (Given)

Whether or not to break the spectral cubes into tiles.  [1]

=item TILEBORDER = INTEGER (Given)

The size of the border to be added to tiles. This is used when
smoothing the cube in spatial extend in later processing so as to not
add edge effects when merging tiles together. [0]

=item UPPER_VELOCITY = REAL (Given)

The requested upper velocity, in km/s to be applied to products
created after the final iteration.  This argument can be overridden by
the RECPAR_FINAL_UPPER_VELOCITY uhdr via the recipe parameter system.  [undef]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=item *

Noise statistics are evaluated and logged for the final cubes.  FOr the
group cubes these include calculating the median Tsys when MAKECUBE has
failed to do it, and to find a mean RMS noise.

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

See _CREATE_CUBE_GROUP_, _REMOVE_BASELINE_THROUGH_SMOOTHING_,
_CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_, _RECREATE_MASKED_TIMESERIES_
_REMOVE_BASELINE_MASKED_TIMESERIES_, and
_CREATE_CUBE_FRAME_FROM_GROUP_.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>,
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2011-2014 Science and Technology Facilities
Council.  All Rights Reserved.

=cut

# Handle arguments that get passed to later primitives.
my $b_regions = get_prim_arg( $_PRIM_ARGS_, "BASELINE_REGIONS", undef );
my $edges = get_prim_arg( $_PRIM_ARGS_, "EDGES", 0 );
my $flatfield = get_prim_arg( $_PRIM_ARGS_, "FLATFIELD", 0 );
my $flatmethod = get_prim_arg( $_PRIM_ARGS_, "FLAT_METHOD", 'sum' );
my $freqsmooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $iterations = get_prim_arg( $_PRIM_ARGS_, "ITERATIONS", 1 );
my $jsatile = get_prim_arg( $_PRIM_ARGS_, "JSATILE", 0 );
my $lower_vel = get_prim_arg( $_PRIM_ARGS_, "LOWER_VELOCITY", undef );
my $moments = get_prim_arg( $_PRIM_ARGS_, "MOMENTS", 'integ' );
my $method =  get_prim_arg( $_PRIM_ARGS_, "METHOD", 'clumpfind' );
my $rms_levels =  get_prim_arg( $_PRIM_ARGS_, "RMS_THRESHOLD", '3.0,4.0' );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $per_line = get_prim_arg( $_PRIM_ARGS_, "PER_LINE", 0 );
my $pixsize = get_prim_arg( $_PRIM_ARGS_, "PIXSIZE", undef );
my $qa = get_prim_arg( $_PRIM_ARGS_, "QA", 1 );
my $rebin = get_prim_arg( $_PRIM_ARGS_, "REBIN", undef );
my $sp_param1 = get_prim_arg( $_PRIM_ARGS_, "PARAM1", 0 );
my $sp_param2 = get_prim_arg( $_PRIM_ARGS_, "PARAM2", undef );
my $spatsmooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $spread = get_prim_arg( $_PRIM_ARGS_, "SPREAD", 'nearest' );
my $system = get_prim_arg( $_PRIM_ARGS_, "SYSTEM", undef );
my $tile = get_prim_arg( $_PRIM_ARGS_, "TILE", 1 );
my $tileborder = get_prim_arg( $_PRIM_ARGS_, "TILEBORDER", 0 );
my $upper_vel = get_prim_arg( $_PRIM_ARGS_, "UPPER_VELOCITY", undef );

# Handle recipe parameter overrides.
$b_regions = ( defined( $Frm->uhdr( "RECPAR_BASELINE_REGIONS" ) ) ?
             $Frm->uhdr( "RECPAR_BASELINE_REGIONS" )              :
             $b_regions );
my @regions;
if ( ref( $b_regions ) eq 'ARRAY' ) { @regions = @{ $b_regions } }

$flatfield = ( defined( $Frm->uhdr( "RECPAR_FLATFIELD" ) ) ?
             $Frm->uhdr( "RECPAR_FLATFIELD" )              :
             $flatfield );
$flatmethod = ( defined( $Frm->uhdr( "RECPAR_FLAT_METHOD" ) ) ?
             $Frm->uhdr( "RECPAR_FLAT_METHOD" )              :
             $flatmethod );
$lower_vel = ( defined( $Frm->uhdr( "RECPAR_FINAL_LOWER_VELOCITY" ) ) ?
             $Frm->uhdr( "RECPAR_FINAL_LOWER_VELOCITY" )              :
             $lower_vel );
$moments = ( defined( $Frm->uhdr( "RECPAR_MOMENTS" ) ) ?
           $Frm->uhdr( "RECPAR_MOMENTS" )              :
           $moments );
$pixsize = ( defined( $Frm->uhdr( "RECPAR_PIXSIZE" ) ) ?
           $Frm->uhdr( "RECPAR_PIXSIZE" )              :
           $pixsize );
$rebin = ( defined( $Frm->uhdr( "RECPAR_REBIN" ) ) ?
         $Frm->uhdr( "RECPAR_REBIN" )              :
         $rebin );
$sp_param1 = ( defined( $Frm->uhdr( "RECPAR_PARAM1" ) ) ?
             $Frm->uhdr( "RECPAR_PARAM1" )              :
             $sp_param1 );
$sp_param2 = ( defined( $Frm->uhdr( "RECPAR_PARAM2" ) ) ?
             $Frm->uhdr( "RECPAR_PARAM2" )              :
             $sp_param2 );
$spread = ( defined( $Frm->uhdr( "RECPAR_SPREAD_METHOD" ) ) ?
          $Frm->uhdr( "RECPAR_SPREAD_METHOD" )              :
          $spread );
$system = ( defined( $Frm->uhdr( "RECPAR_SYSTEM" ) ) ?
          $Frm->uhdr( "RECPAR_SYSTEM" )              :
          $system );
$tile = ( defined( $Frm->uhdr( "RECPAR_TILE" ) ) ?
          $Frm->uhdr( "RECPAR_TILE" )            :
          $tile );
$upper_vel = ( defined( $Frm->uhdr( "RECPAR_FINAL_UPPER_VELOCITY" ) ) ?
             $Frm->uhdr( "RECPAR_FINAL_UPPER_VELOCITY" )              :
             $upper_vel );

# Validate baseline-region syntax.
my $user_region = 0;
my ( @b_lower, @b_upper );
if ( defined( $b_regions ) ) {

   foreach ( @regions ) {
      if ( /^[+-]?(\d+\.\d+|\d+\.|\.\d+|\d+)([eE][+-]?\d+)?:[+-]?(\d+\.\d+|\d+\.|\.\d+|\d+)([eE][+-]?\d+)?$/ ) {
         my ( $lowvel, $uppvel ) = split( ":", $_ );
         $user_region = 1;
         push @b_lower, $lowvel;
         push @b_upper, $uppvel;
      } else {
         $user_region = 0;
         last;
      }
   }

   if ( ! $user_region ) {
      orac_err "Supplied baseline extents have invalid format\n" .
               "Syntax is <lower1>:<upper1>,<lower2>:<upper2>,...\n";
   }
}

# Only process if we're on the last member of a group.
if( $Grp->lastallmembers( $Frm ) ) {
  my $copyGrp = $Grp;
  my @members = $Grp->members;
  my ( $good, $bad ) = $Grp->check_membership;

  my $frame_legacy = defined( $Frm->uhdr( "LEGACY" ) ) ? $Frm->uhdr( "LEGACY" ): 0;
  my $group_legacy = defined( $Grp->uhdr( "LEGACY" ) ) ? $Grp->uhdr( "LEGACY" ): 0;
  my $legacy = $frame_legacy || $ group_legacy;

  my $makegroup;
  if( ! @$good ) {
    orac_warn "No good members in current group. Cannot do group processing.\n";

    # Write the QA information for each member.
    foreach my $Obj ( @members ) {
      _QA_WRITE_REPORT_ OBJ=$Obj
      _WRITE_NOISESTATS_LOG_ OBJ=$Obj
    }
    $makegroup = 0;

    # Create a new group where all the frames are deemed to be good.
    # ==============================================================
    #
    # This particularly includes ones that have failed QA, so that the
    # observation products are created.
    $Grp = new $Grp;
    $Grp->name( $copyGrp->name );
    $Grp->file( $copyGrp->file );
    %{$Grp->hdr} = %{$copyGrp->hdr};
    %{$Grp->uhdr} = %{$copyGrp->uhdr};

    foreach my $Obj ( $copyGrp->allmembers ) {

      # Make a deep copy of the Frame.  The files method copies the
      # hdr for raw data, but not the uhdr.
      my @files = $Obj->files;
      my $tempFrm = $Frm->new( \@files );
      %{$tempFrm->uhdr} = %{$Obj->uhdr};

      # Store all Frames as good.
      $tempFrm->isgood( 1 );
      $Grp->push( $tempFrm );

      # Ensure current Frame matches the final Frame in the new group
      # so that subsequent # $Grp->lastallmembers checks compare like
      # with like.
      $Frm = $tempFrm;
    }

  } else {

    # We need to write QA info for each member that didn't end up in
    # the group (i.e. that failed QA)
    foreach my $badObj ( @$bad ) {
      _QA_WRITE_REPORT_ OBJ=$badObj
      _WRITE_NOISESTATS_LOG_ OBJ=$badObj
    }

    # Write a heading to structure the commentary.
    orac_say "\n\nBeginning iterative group production.";
    my $underline = "-" x 51;
    orac_say "$underline\n";
    $makegroup = 1;
  }

  # Merge AST Regions for scans only.
  if( lc( $Frm->uhdr( "ORAC_SAMPLE_MODE" ) ) eq 'scan' ) {
    _MERGE_AST_REGIONS_
  }

  my $iter = 1;
  while( $iter <= $iterations ) {

    orac_say "Iteration $iter of $iterations.\n";

    _CREATE_CUBE_GROUP_ SPREAD=$spread PARAM1=$sp_param1 PARAM2=$sp_param2 TILEBORDER=$tileborder PIXSIZE=$pixsize SYSTEM=$system TILE=$tile

    if( $edges ) {
      _REMOVE_BASELINE_ EDGES=$edges ORDER=$order GROUP=1 TAG=1
    } elsif ( $user_region ) {
      _REMOVE_BASELINE_ LOWER=\@b_lower UPPER=\@b_upper ORDER=$order GROUP=1 TAG=1
    } else {
      _REMOVE_BASELINE_THROUGH_SMOOTHING_ FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order GROUP=1 TAG=1
    }
    _ESTIMATE_LINEFOREST_BASELINE_OFFSET_ GROUP=1 SKEWNESS=1.2

    if ( lc( $moments ) ne "none" ) {
      _CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_ GROUP=1 MOMENTS=$moments METHOD=$method RMS_THRESHOLD=$rms_levels FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order TAG=integ PER_LINE=$per_line
    }

    if ( $legacy ) {
       _CREATE_NOISE_MAP_ GROUP=1 QA=$qa SURVEY=LEGACY
    } else {
       _CREATE_NOISE_MAP_ GROUP=1 QA=$qa
    }

    if( defined( $rebin ) ) {
      foreach my $res ( split ",", $rebin ) {
        _REBIN_VELOCITY_SCALE_ GROUP=1 PIXELSCALE=$res
      }
    }

    _RECREATE_MASKED_OBS_FILES_ INTERP=$spread PARAM1=$sp_param1 PARAM2=$sp_param2 PIXSIZE=$pixsize TILEBORDER=$tileborder TILE=$tile

    _REMOVE_BASELINE_MASKED_TIMESERIES_

    if( $flatfield ) {
       if ( lc( $flatmethod ) eq 'ratio' ) {
          _NORMALIZE_RECEPTOR_RESPONSIVITY_ GROUP=2
       } elsif ( lc( $flatmethod ) eq 'itersum' ||  lc( $flatmethod ) eq 'sum' ) {
          _REMOVE_FLAT_FIELD_ITERATE_ GROUP=2 METHOD=$flatmethod
      } else {
         _REMOVE_FLAT_FIELD_ GROUP=2
      }
    }

    _SET_TAG_ TAG=TIMESERIES_MASKED_BASELINED GROUP=2

    # Create the observation products for the next iteration.  This will only produce legacy tiles
    # on the final iteration irrespective of the value of $jsatile.
    my $do_tiling = ( $iter == $iterations ) & $jsatile;
    my $underline = "-" x 41;
    orac_say "Iterations completed.\n\nCreating final Frame products.\n$underline\n" if $do_tiling;

    foreach my $Frm ( $Grp->members ) {

      # Some code looks to see if JSA_TILES is defined rather than being true.
      $Frm->uhdr( "JSA_TILES", 1 ) if $do_tiling;

      # Generate the observation cube
      _CREATE_CUBE_FRAME_ SPREAD=$spread PARAM1=$sp_param1 PARAM2=$sp_param2 TILEBORDER=$tileborder SUFFIX=_gcube PRODUCT=group_derived_cube PIXSIZE=$pixsize SYSTEM=$system TILE=$tile JSATILE=$do_tiling

      # Want trimmed velocity range for final product?
      if ( defined( $lower_vel ) || defined( $upper_vel ) ) {
        _RESTRICT_VELOCITY_RANGE_ GROUP=0 AXIS=3 LOWER=$lower_vel UPPER=$upper_vel
      }

      # Tag the observation cube.
      _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 GROUP=0 FLAG_QUAL_BAD=1
      orac_print "\n";
    }

    if ( lc( $moments ) ne "none" ) {
      _CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_ GROUP=2 MOMENTS=$moments METHOD=$method RMS_THRESHOLD=$rms_levels FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order TAG=integ PER_LINE=$per_line
    }

    my $writeqa = ( $iter == $iterations );
    if ( $legacy ) {
       _CREATE_NOISE_MAP_ GROUP=2 QA=$qa STOREQA=$writeqa SURVEY=LEGACY
    } else {
       _CREATE_NOISE_MAP_ GROUP=2 QA=$qa STOREQA=$writeqa
    }

    _RETRIEVE_TAG_ TAG=TIMESERIES_MASKED_BASELINED GROUP=2

    $iter++;
  }

  if ( $makegroup ) {
    my $underline = "-" x 41;
    orac_say "Creating final Group products.\n$underline\n";

    # Switch on JSA tiling.
    $Grp->uhdr( "JSA_TILES", $jsatile );

    _CREATE_CUBE_GROUP_ SPREAD=$spread PARAM1=$sp_param1 PARAM2=$sp_param2 TILEBORDER=$tileborder PIXSIZE=$pixsize SYSTEM=$system TILE=$tile JSATILE=$jsatile

    # Do final baseline subtraction.
    my $tagit = ( ! ( defined( $lower_vel ) || defined( $upper_vel ) ) );
    if ( $edges ) {
      _REMOVE_BASELINE_ EDGES=$edges ORDER=$order GROUP=1 TAG=$tagit
    } else {
      _REMOVE_BASELINE_THROUGH_SMOOTHING_ FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order GROUP=1 TAG=$tagit
    }

    # Trim final cube, and hence subsequent products from it.
    if ( !$tagit ) {
      _RESTRICT_VELOCITY_RANGE_ GROUP=1 AXIS=3 LOWER=$lower_vel UPPER=$upper_vel
      _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 GROUP=1 FLAG_QUAL_BAD=1
    }

    if ( lc( $moments ) ne "none" ) {
       _CREATE_MOMENTS_MAPS_THROUGH_SMOOTHING_ GROUP=1 MOMENTS=$moments METHOD=$method RMS_THRESHOLD=$rms_levels FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order TAG=integ PER_LINE=$per_line
    }

    _CREATE_LV_IMAGE_

    if ( $legacy ) {
       _CREATE_NOISE_MAP_ GROUP=1 QA=$qa STOREQA=1 SURVEY=LEGACY
    } else {
       _CREATE_NOISE_MAP_ GROUP=1 QA=$qa STOREQA=1
    }

    # Obtain and store two noise statistics for the group spectral cube.
    # First, the mean RMS for individual observations is derived from the
    # time series in _QA_SENSITIVITY_VARIATION_, so attempt to reproduce
    # this calculation from the group cube.  Second, MAKECUBE will only
    # generate a Tsys array, and hence a median Tsys header (MEDTYS),
    # for a limited set of input parameters.
    _FIND_MEAN_RMS_ GROUP=1
    if ( ! defined( $Grp->hdr( "MEDTSYS" ) ) ) {
       _CALCULATE_MEDIAN_TSYS_ GROUP=1
    }

    if( defined( $rebin ) ) {
      foreach my $res ( split ",", $rebin ) {
        _REBIN_VELOCITY_SCALE_ GROUP=1 PIXELSCALE=$res
      }
    }

  } else {

    # Restore the original group with the bad observations flagged.
    $Grp = $copyGrp;

    # The iteration does generate a first pass at the group objects,
    # but these were based upon entirely bad data, so must be removed.
    orac_print( "Removing group files which were derived from bad observations.\n");
    unlink glob( $Grp->file . "*" );
  }

  # Write QA report.
  foreach my $goodObj( $Grp->members ) {
    _QA_WRITE_REPORT_ OBJ=$goodObj
    _WRITE_NOISESTATS_LOG_ OBJ=$goodObj
  }
  if ( $makegroup ) {
    _QA_WRITE_REPORT_ OBJ=$Grp
    _WRITE_NOISESTATS_LOG_ OBJ=$Grp
  }

  # Delete the intermediate files needed for group processing or are
  # archive products.
  my $saved = $jsatile ? "raw,_healpix" : "raw,_reduced,_cube,_lv";
  _DELETE_TEMP_FILES_ ALSOGRP=1 KEEP=$saved
}

# Tidy-up output.
orac_print "\n";
