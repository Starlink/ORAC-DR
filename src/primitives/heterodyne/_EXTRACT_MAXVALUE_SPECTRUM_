# -*-cperl-*-

=head1 NAME

_EXTRACT_MAXVALUE_SPECTRUM_ -- Extract a spectrum from a cube using
the maximum value in an image.

=head1 DESCRIPTION

This primitive extracts a spectrum from a cube. The position of the
spectrum is chosen from the peak value location in an integrated
intensity image, which is passed through the Frame class uhdr. See the
Notes section for further information.

=head1 ARGUMENTS

=over 4

=item GROUP = LOGICAL (Given)

Whether to operate on the current Frame or Group object. Defaults to
Frame. [0]

=item TAG = LOGICAL (Given)

Whether or not to tag the resulting spectrum as representative. [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS.

=item *

If the input Frame is 1x1xN, then the Frame is copied into the output
spectrum.

=item *

If the input Frame is not 1x1xN, then the position to extract is given
by the INTEG_MAX_POS uhdr. This must be an array reference in pixel
coordinates.

=back

=head1 OUTPUT DATA

=over 4

=item *

The spectrum with a suffix _spNNN, where NNN is a zero-padded number
starting from 001. Currently only one spectrum is extracted by this
primitive.

=back

=head1 TASKS

KAPPA: PLUCK.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007, 2011-2014 Science and Technology Facilities
Council.  All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Deal with parameters.
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", 0 );

my $Obj = $group ? $Grp : $Frm;

my $jsatile = defined( $Obj->uhdr( "JSA_TILES" ) ) ?
                       $Obj->uhdr( "JSA_TILES" )   :
                       0;
my $preview_suffix = $jsatile ? "hpxrsp" : "rsp";

my $out;

# Only extract a representative spectrum if we've created an
# integrated intensity image (and thus have the peak value), or if
# the cube is 1x1xN.
_GET_DIMENSIONS_ GROUP=$group
my $dims = $_GET_DIMENSIONS_{DIMS};

if( $dims->[0] == 1 &&
    $dims->[1] == 1 ) {

  # In this case the cube is the spectrum. Just copy the cube over.
  ( my $in, $out ) = $Obj->inout( "_sp001" );
  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

  orac_print "Spectrum created in $out.\n";

} else {

  # We have a proper cube, so we have to retrieve the maximum flux
  # position from the integrated intensity image. If we don't have
  # that information, collapse the entire cube in spatial directions
  # to create a spectrum.
  if( defined( $Obj->uhdr( "INTEG_MAX_POS" ) ) ) {

    my $maxpos = $Obj->uhdr( "INTEG_MAX_POS" );

    # We need to find which frame contains this position. Go through
    # each one in turn, finding the dimensions.
    my $fileno = 1;
    foreach my $i ( 1 .. $Obj->nfiles ) {

      my $file = $Obj->file( $i );
      $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$file" );

      my ( $ORAC_STATUS, @lbound ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
      ( $ORAC_STATUS, my @ubound ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );
      if( $maxpos->[0] >= $lbound[0] &&
          $maxpos->[0] <= $ubound[0] &&
          $maxpos->[1] >= $lbound[1] &&
          $maxpos->[1] <= $ubound[1] ) {

      # This assumes that the data are oriented along the axes.  If
      # the scan is rotated, it is possible to include the co-ordinates
      # within its bounds, but the spectrum is blank.  So we need to
      # check if the chosen spectrum is not all bad, but first check
      # if the scan is oriented along the axes.
         my $map_pa = defined( $Obj->hdr( "MAP_PA" ) ) ? $Obj->hdr( "MAP_PA" ) : 0.0;
         if ( !( abs( $map_pa ) < 0.1 || abs( abs( $map_pa ) - 90.0 ) < 0.1 ) ) {
           my $param = "ndf=" . $file . "(" . $maxpos->[0] . "," . $maxpos->[1] . ")";
           $Mon{'kappa_mon'}->obeyw( "stats", "$param" );
            ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
            ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
            if ( $numpix > 0 ) {
               if ( $numgood / $numpix > 0.5 ) {
                   $fileno = $i;
                  last;
               }
            }
         } else {
            $fileno = $i;
            last;
         }
      }
    }

    # Copy out the spectrum from the given file.
    my $in = $Obj->file( $fileno );

    ( undef, $out ) = $Obj->inout( "_sp001" );

    # Temporarily remove bad-bits mask.
    $Mon{'ndfpack_mon'}->obeyw( "setbb", "ndf=$in bb=0" );

    my $params = "in=$in(" . $maxpos->[0] . "," . $maxpos->[1] . ",) out=$out trim=false";
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

    # Retrieve the exposure time, effective integration time, and
    # Tsys from the SMURF component.
    my $pos = "(" . $maxpos->[0] . "," . $maxpos->[1] . ")";

    _COMPONENT_EXISTS_ COMPONENT=MORE.SMURF.EXP_TIME FILE=$in
    if ( $_COMPONENT_EXISTS_{EXISTS} ) {
      $Mon{'kappa_mon'}->obeyw( "stats", "$in.MORE.SMURF.EXP_TIME$pos" );
      my ( $ORAC_STATUS, $exptime ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
      _SET_FILE_FITS_ITEM_ FILE=$out KEY=EXP_TIME VALUE=$exptime
    }

    # Only do EFF_TIME if there's actually a EFF_TIME extension.
    _COMPONENT_EXISTS_ COMPONENT=MORE.SMURF.EFF_TIME FILE=$in
    if ( $_COMPONENT_EXISTS_{EXISTS} ) {
       $Mon{'kappa_mon'}->obeyw( "stats", "$in.MORE.SMURF.EFF_TIME$pos" );
       my ( $ORAC_STATUS, $efftime ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
       _SET_FILE_FITS_ITEM_ FILE=$out KEY=EFF_TIME VALUE=$efftime
    }

    # Only do Tsys if there's actually a Tsys extension.
    _COMPONENT_EXISTS_ COMPONENT=MORE.SMURF.TSYS FILE=$in
    if( $_COMPONENT_EXISTS_{EXISTS} ) {
      $Mon{'kappa_mon'}->obeyw( "stats", "$in.MORE.SMURF.TSYS$pos" );
      my ( $ORAC_STATUS, $tsys ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
      _SET_FILE_FITS_ITEM_ FILE=$out KEY=MEDTSYS VALUE=$tsys
    }

    # Reset the bad-bits mask.
    $Mon{'ndfpack_mon'}->obeyw( "setbb", "ndf=$in bb=255" );

    orac_say "Spectrum created from pixel co-ordinates (" .
             $maxpos->[0] . "," . $maxpos->[1] . ") created in $out.";
  }
}

# Fix up headers.
my $tmpObj = $Obj->new;
if( !$tmpObj->is_frame ) { $tmpObj->groupid( $Obj->groupid ); }
$tmpObj->allow_header_sync(1);
$tmpObj->file( $out );
$tmpObj->sync_headers;
_DELETE_FILE_FITS_ITEM_ FILE=$out KEY=NUMTILES
_DELETE_FILE_FITS_ITEM_ FILE=$out KEY=TILENUM
_SET_FILE_FITS_ITEM_ FILE=$out KEY=PRODUCT VALUE=sp

# Copy to Group if requested.
if( (not $group) && $Grp->uhdr( "COPY_FRAME_CUBE" ) ) {
  ( undef, my $groupout ) = $Grp->inout( "_sp" );
  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$out out=$groupout" );

  my $tGrp = new $Grp;
  $tGrp->groupid( $Grp->groupid );
  $tGrp->allow_header_sync(1);
  $tGrp->file( $groupout );

  orac_print "$out to $groupout:\n";
  orac_print " Copied to Group file.\n";

  if( $tag ) {
    # Specify JSA_TILES=0 because we are making a preview for a whole
    # plane and do not want to include the tile number.  This will need
    # to be changed if we also use this primitive in the co-add recipe.
    _TAG_AS_REPRESENTATIVE_ FILE=$groupout UPDATE=0 GROUP=1 SUFFIX=$preview_suffix JSA_TILES=0
  }

}

# And display.
$Display->display_data( $tmpObj ) if defined $Display;

# Tag if requested.
if( $tag ) {
  # Specify JSA_TILES=0 because we are making a preview for a whole
  # plane and do not want to include the tile number.  This will need
  # to be changed if we also use this primitive in the co-add recipe.
  _TAG_AS_REPRESENTATIVE_ FILE=$out UPDATE=0 GROUP=$group SUFFIX=$preview_suffix JSA_TILES=0
}
