=head1 NAME

_INDEX_BAD_RECEPTORS_

=head1 DESCRIPTION

This primitive identifies receptors whose data are entirely or nearly
completely bad for an observation, but are not flagged as bad, and
records such receptors in the bad_receptor index.

For hybrid data a receptor is rejected if any of its subbands is
mostly or entirely bad.

=head1 ARGUMENTS

=over 4

=item FRACTION = REAL (Given)

The maximum fraction of bad values in the array permitted before the
a receptor is deemed to be bad.  It must lie between 0.1 and 1.0
otherwise the default fraction is substituted.  [0.9]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS time-series data.

=item *

This primitive is suitable for spectral-line observations.

=back

=back

=head1 TASKS

KAPPA: PASTE, STATS.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2013-2014 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;

# Inquire whether or not to look for bad receptor data.
my $apply = ( defined( $Frm->uhdr( "RECPAR_INDEX_BAD_RECEPTORS" ) ) ?
            $Frm->uhdr( "RECPAR_INDEX_BAD_RECEPTORS" )              :
            1 );

# Obtain the fraction of bad pixels for the receptor to be deemed bad.
my $fracdef = 0.9;
my $fracbad = ( defined( $Frm->uhdr( "RECPAR_FRACTION_BAD" ) ) ?
              $Frm->uhdr( "RECPAR_FRACTION_BAD" )              :
              $fracdef );
$fracbad = $fracdef if ( $fracbad < 0.1 || $fracbad > 1.0 );

if ( ! $apply ) { goto RETURN }

# Header for commentary
# =====================

orac_say "\nCheck for bad receptors";
my $underline = "-" x 32;
orac_say "$underline\n";

# Form arrays of bad detectors.
# =============================

# Retrieve the list of bad detectors from the calibration system.
# The reading of INDEX also sets up the survey (survey_br).  Avoid
# MASTER because the file is not properly populated and spurious
# bad receptors may be chosen.
$Cal->bad_receptors( "INDEX" );
my @baddets = $Cal->bad_receptors_list;
orac_say( "Receptors disabled by the calibration system: " . join( ",", sort @baddets ) );

# Store the name of the first file in the list for the index file.
my $first_file_in = $Frm->file( 1 );
my @bad_receptors;

# There are some early spectra (e.g. a20070729_00015_01, Receptor H00)
# which are virtually all bad except for the extremely noisy edges.  To
# prevent a bad receptor be deemed good this condition must be
# recognised.  One approach would be include a test on the standard
# deviation.  However, we trim such edge regions to match what will occur
# in subsequent primitives.
my $spec_percent = "~85%";
if ( defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) &&
     $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) { $spec_percent = "" }

orac_say( "Check that receptors have non-bad data." );

my ( $params, $ORAC_STATUS );

my $in = $Frm->file( 1 );
my $pasted = new ORAC::TempFile( 0 );
my $tempfile = new ORAC::TempFile( 0 );

# Get the indexing to the receptors in the current Frame.
my $array = new JCMT::ACSIS::Array( File => $in );

# Form set of receptors that are not bad in the master list.
my @receptors = grep{ my $x=$_; not grep { $x =~ /\Q$_/i} @baddets} $array->receptors;
@receptors = sort @receptors;

my $first_receptor = 1;
my ( $refbounds, $samesize );
foreach my $receptor ( @receptors ) {
   my $pixel = $array->pixel( $receptor );

   if ( ! $Frm->uhdr( "ISHYBRID" ) ) {

# Concatenate the subscans for the receptor.  First time through find
# the bounds of each subscan within the concatenated array and whether
# or not the subscans all have the same number of spectra.  Then
# subsequently use this to save recomputing them.
      if ( $first_receptor ) {
         _PASTE_SUBSCANS_BY_RECEPTOR_ FILE=$pasted RECEPTOR=$receptor SECTION=$spec_percent
         $samesize = $_PASTE_SUBSCANS_BY_RECEPTOR_{SAMESIZE};
         $refbounds = $_PASTE_SUBSCANS_BY_RECEPTOR_{BOUNDS};
         $first_receptor = 0;
      } else {
         _PASTE_SUBSCANS_BY_RECEPTOR_ FILE=$pasted RECEPTOR=$receptor SECTION=$spec_percent SAMESIZE=$samesize BOUNDS=$refbounds
      }

# Check that the receptor is not completely bad.
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$pasted" );
      ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
      ( $ORAC_STATUS, my $numbad ) = $Mon{'kappa_mon'}->get( "stats", "numbad" );

# Report the findings.
      orac_print( "  Receptor $receptor" );
      if ( $numbad >= $fracbad * $numpix ) {
         orac_say(" has mostly or entirely bad data." );
         push @bad_receptors, $receptor;
      } else {
         orac_say( " is valid." );
      }

# In hybrid mode each subband needs to be tested independently, not
# concatenated subscans.
   } else {
      foreach my $i ( 1 .. $Frm->nfiles ) {
         $in = $Frm->file( $i );

# Check that the receptor for this subscan is not completely bad.
         $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$in($spec_percent,$pixel,)" );
         ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
         ( $ORAC_STATUS, my $numbad ) = $Mon{'kappa_mon'}->get( "stats", "numbad" );

         orac_print( "  Receptor $receptor  subband $i" );
         if ( $numbad >= $fracbad * $numpix ) {
            orac_say(" has mostly or entirely bad data." );
            push @bad_receptors, $receptor;
         } else {
            orac_say( " is valid." );
         }
      }
   }
}

# Make sure each bad detector is mentioned only once.
my %seen = ();
my @bad_receptors_uniq = ();

foreach my $item ( @bad_receptors ) {
   push( @bad_receptors_uniq, $item ) unless $seen{$item}++;
}

my $lofreq = $Frm->hdr( "LOFREQS" );
my $survey_br = defined( $Frm->uhdr( "SURVEY_BR" ) ) ? $Frm->uhdr( "SURVEY_BR" ) : 'Telescope';

# Sort out bad receptors.  They'll be added to the calibration system
# for either the specific survey or for everything, and only for the
# current LOFREQ +/- 1 GHz.
if ( scalar( @bad_receptors ) > 0 ) {
   my %recep_hash = ( %{$Frm->hdr },
                      LOFREQ_MAX => $lofreq + 1,
                      LOFREQ_MIN => $lofreq - 1,
                      DETECTORS => ( join ',',@bad_receptors_uniq ),
                      SURVEY_BR => $survey_br,
                    );

   orac_say( " Masking receptor(s) " .
             join( ",", sort @bad_receptors_uniq ) . " for survey $survey_br." );

   $Cal->bad_receptors_qa_index->add( $first_file_in, \%recep_hash );

# Do not want to attempt to merge hybrid subbands if any of them is
# suspect.
   if ( $Frm->uhdr( "ISHYBRID" ) ) {
      _MASK_RECEPTORS_ RECEPTORS=\@bad_receptors_uniq
   }   
}

# Tidy-up output.
orac_print "\n";

RETURN:
