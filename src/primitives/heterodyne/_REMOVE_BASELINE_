# -*-cperl-*-

=head1 NAME

_REMOVE_BASELINE_

=head1 DESCRIPTION

This primitive removes the baseline from each spectrum in a cube,
using spectral windows that are assumed to be free of spectral lines.
Edge regions or velocity ranges may be specified to select the regions
to baseline, otherwise
L<MFITTREND|http://starlink.eao.hawaii.edu/docs/sun95.htx> excludes
emission using its automatic mode.  The cube object may be the Group
or Frame, controlled by Argument L<GROUP|/ARGUMENTS>.

There are three methods permitted for determining the baseline.  See
Argument METHOD and the documentation for KAPPA:MFITTREND.  If the
default region method is chosen and the baseline regions have been
determined by MFITTREND or preset through Arguments
L<LOWER|/ARGUMENTS> and L<UPPER|/ARGUMENTS>---as opposed to setting
predefined limits via Argument L<EDGES|/ARGUMENTS>---the primitive
stores the preset baseline regions. or those returned by MFITTREND
ARANGES, by reference in the object's internal header
BASELINE_REGIONS.  For the single method, the individual masks for
each file is stored by reference in the object's internal header
BASELINE_MASKS.

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

The axis along which to baseline. [3]

=item CLIP = STRING (Given)

Clip levels to use when in AUTO mode. If not defined, then the default
set by MFITTREND will be used.  [undef]

=item EDGES = REAL (Given)

Percentage of the full range to fit on either edge of the spectrum. [0]

=item GROUP = LOGICAL (Given)

Whether or not to operate on the current Group object. [0]

=item LOWER = REAL (Given)

Array of up to ten lower limits of baseline regions in km/s.  It should
be supplied with upper limits too (cf. UPPER).  The number velocities
should be the same as supplied in UPPER, but if not the largest
complete set of pairs will be used.  The limits are ignored if EDGES
is defined and positive.

=item METHOD = STRING (Given)

The method used to define the baseline regions in automatic mode. The
allowed values are 'region', 'single', and 'global'. This is not used
if the EDGES or LOWER or UPPER argument is defined.  ['region']

=item ORDER = INTEGER (Given)

The order of fit used for the baseline.  Zero is a constant, one is
linear, etc.  A special value of "spline" uses a spline fit, which is
only suitable for narrow-line spectra.  This argument can be overridden
by the RECPAR_BASELINE_ORDER recipe parameter. [1]

=item TAG = LOGICAL (Given)

Whether or not to tag the resulting cubes as 'reduced'. [0]

=item UPPER = REAL (Given)

Array of up to ten upper limits of baseline regions in km/s.  It
should be supplied with lower limits too (cf. LOWER).  The number
velocities should be the same as supplied in LOWER, but if not the
largest complete set of pairs will be used. The limits are ignored if
EDGES is defined and positive.

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS observations.

=item *

This primitive is suitable for spectral line observations. Removing
the baseline from continuum observations may not be desirable.

=item *

This primitive will run if the REMOVE_BASELINE uhdr in the current
Frame object is defined and true.

=item *

The reduced products are tagged BASELINED_FRAME or BASELINED_CUBE
depending on the value of Argument GROUP.

=back

=head1 OUTPUT DATA

=over 4

=item *

The output baseline-corrected cubes, each with suffix _bl.
For JSA processing, its tile-naming convention is adhered
to for these cubes.

=item *

The masks of emission, each with suffix _blmask.  For JSA processing,
its tile-naming convention is adhered to for these cubes.

=back

=head1 TASKS

KAPPA: MFITTREND, NDFTRACE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Particle Physics and Astronomy Research Council.
Copyright (C) 2008, 2014, 2018 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Deal with arguments.
my $axis = get_prim_arg( $_PRIM_ARGS_, "AXIS", 3 );
my $clip = get_prim_arg( $_PRIM_ARGS_, "CLIP", undef );
my $edges = get_prim_arg( $_PRIM_ARGS_, "EDGES", 0 );
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $ref_lower = get_prim_arg( $_PRIM_ARGS_, "LOWER", undef );
my $method = uc( get_prim_arg( $_PRIM_ARGS_, "METHOD", "REGION" ) );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", 0 );
my $ref_upper = get_prim_arg( $_PRIM_ARGS_, "UPPER", undef );

# Override various parameters if we've been given them as recipe
# parameters.
$order = ( defined( $Frm->uhdr( "RECPAR_BASELINE_ORDER" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_ORDER" )            :
           $order );
my $spline = 1 if $order =~ /^spl/;

# Write a heading to structure the commentary.
orac_say "\n\nBaseline removal";
my $underline = "-" x 24;
orac_say "$underline\n";

# Handle group/file.
my $Obj;
if( $group ) {
  $Obj = $Grp;
} else {
  $Obj = $Frm;
}

# Only run if we've been told to.
if( defined( $Frm->uhdr( "REMOVE_BASELINE" ) ) &&
    $Frm->uhdr( "REMOVE_BASELINE" ) == 0 ) {
  orac_warn "REMOVE_BASELINE uhdr set to false. Not baselining.\n\n";

  # Check to see if we were told to tag the result. If so, tag the
  # input file.
  _TAG_AS_REDUCED_PRODUCT_ GROUP=$group UPDATE=1 FLAG_QUAL_BAD=1
  return 0;
}

# Create an array to hold the baselined regions for each individual
# file.
my @bl_regions;

if( ! $group ||
    $group && $Grp->lastallmembers( $Frm ) ) {

  if( $group == 1 && $Grp->uhdr( "COPY_FRAME_CUBE" ) ) {

    # Retrieve the baselined Frame.
    _RETRIEVE_TAG_ TAG=BASELINED_FRAME

    foreach my $i ( 1 .. $Frm->nfiles ) {
      my $in = $Frm->file( $i );
      ( undef, my $out ) = defined( $Grp->uhdr( "JSA_TILES" ) ) && $Grp->uhdr( "JSA_TILES" ) ?
                           $Grp->inout_jsatile( "_bl", $i ) :
                           $Grp->inout( "_bl", $i );

      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );
      orac_say "$in to $out:";
      orac_say " Copied to baselined Group file.";

      $Grp->allow_header_sync( 1 );
      $Grp->file( $i, $out );
      $Grp->product( "baselined" );
      $Grp->sync_headers( $i );
    }

    if( $tag ) {
      _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 GROUP=1 FLAG_QUAL_BAD=1
    }

    # Reset the tag.
    _RETRIEVE_TAG_ TAG=PREVIOUS

  } else {

    my @baseline_masks;
    my $jsatile = defined( $Obj->uhdr( "JSA_TILES" ) ) && $Obj->uhdr( "JSA_TILES" );

    foreach my $i ( 1 .. $Obj->nfiles ) {

      my ( $in, $out ) = $jsatile ?
                         $Obj->inout_jsatile( "_bl", $i ) :
                         $Obj->inout( "_bl", $i );

      ( undef, my $mask ) = $jsatile ?
                            $Obj->inout_jsatile( "_blmask", $i ) :
                            $Obj->inout( "_blmask", $i );

      $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in" );
      ( my $ORAC_STATUS, my @lbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "lbound" );
      ( $ORAC_STATUS, my @ubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "ubound" );
      ( $ORAC_STATUS, my @flbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "flbnd" );
      ( $ORAC_STATUS, my @fubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fubnd" );
      my $section = "'" . (join ',', map {
        $_ == ($axis - 1) ? ':' : ($lbnd[$_] . ':' . $ubnd[$_])
      } 0 .. $#lbnd) . "'";

      # Set up parameters for MFITTREND.
      my $params = "in=$in out=$out modifyin=false subtract";
      $params   .= " axis=$axis section=$section method=$method";

      if ( $spline ) {
        $params .= " fittype=spline interpol=false knots=12 ";
      } else {
        $params .= " order=$order ";
      }

      # If we're in 'SINGLE' method, we can get masks out.
      if( $method eq 'SINGLE' ) {
        $params .= " mask=$mask";
      }

      # If we have a clip parameter, use it.
      if( defined( $clip ) ) {
        $params .= " clip=$clip";
      }

      # Decide whether or not the baseline regions are already known.
      my $preset_bounds = defined( $ref_lower ) && defined( $ref_upper );

      # Add ranges parameter, if necessary.   First define baseline
      # regions if edge trimming has been selected.
      my @regions;
      if( $edges ) {
        my $extent = $fubnd[2] - $flbnd[2];
        my $low1 = $flbnd[2];
        my $high1 = $flbnd[2] + ( $extent * $edges / 100 );
        my $low2 = $fubnd[2] - ( $extent * $edges / 100 );
        my $high2 = $fubnd[2];
        $params .= " ranges='$low1,$high1,$low2,$high2' auto=false";

      # Set the ranges from the supplied lower and upper bounds.
      # This does assume that there will not be many baseline regions.
      # It's fine if MFITTREND can accept more ranges otherwise mask first.
      } elsif ( $preset_bounds ) {
        my @lower = @$ref_lower;
        my @upper = @$ref_upper;

        my $range_param;
        my $nrange = min( scalar( @lower ), scalar( @upper ) );
        for ( my $i = 0; $i < $nrange; $i++ ) {
           $range_param .= "$lower[$i],$upper[$i]";
           push @regions, $lower[$i];
           push @regions, $upper[$i];
           $range_param .= "," unless ( $i == $nrange - 1 );
        }
        $params .= " ranges='$range_param' auto=false";

      } else {
        $params .= " auto";
      }

      # Run MFITTREND.
      $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

      # Report to user.  Note ARANGES output parameter is only written
      # in automatic mode.
      orac_print "$in to $out:\n";
      if ( $spline ) {
        orac_print " Removed baseline using a spline with 12 knots.\n";
      } else {
        orac_print " Removed baseline using a polynomial of order $order.\n";
      }

      if( $method eq 'REGION' && ! $edges ) {
        if ( ! $preset_bounds ) {
           ( $ORAC_STATUS, @regions ) = $Mon{'kappa_mon'}->get( "mfittrend", "aranges" );
        }
        push( @bl_regions, \@regions );
        orac_print " Baseline regions: [";
        orac_print join ",", ( grep { defined } map { $_ % 2 ? undef : join ":", $regions[$_], $regions[$_+1] } 0..$#regions );
        orac_print "]\n";

      }

      # Update the product.
      $Obj->product( "bl" );

      # Update Frame object;
      $Obj->file( $i, $out );

      # Store the mask, if in 'SINGLE' method.
      if( $method eq 'SINGLE' ) {
        $baseline_masks[$i] = $mask;
        orac_say " $mask: baseline region mask created.";
        _SET_FILE_FITS_ITEM_ FILE=$mask KEY=PRODUCT VALUE=blmask
      }

    }

    # Put the baselined regions in the Frame's user header.
    if( $method eq 'REGION' ) {
      $Obj->uhdr( "BASELINE_REGIONS", \@bl_regions );
    }

    # Store the baseline mask names, if we're in 'SINGLE' method.
    if( $method eq 'SINGLE' ) {
      $Obj->uhdr( "BASELINE_MASKS", \@baseline_masks );
    }

    # Display.
    $Display->display_data( $Obj ) if defined $Display;

    # Tidy-up output.
    orac_say "";

    # Tag, if requested.
    if( $tag ) {
      _TAG_AS_REDUCED_PRODUCT_ GROUP=$group UPDATE=1 FLAG_QUAL_BAD=1
    }

    if( ! $group ) {
      _SET_TAG_ TAG=BASELINED_FRAME
    } else {
      _SET_TAG_ TAG=BASELINED_GROUP
    }

    # Tidy-up output.
    orac_print "\n";

  }
}
