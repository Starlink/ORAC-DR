# -*-cperl-*-

=head1 NAME

_REDUCE_LINE_POINTING_ - Reduce a heterodyne line pointing
observation.

=head1 DESCRIPTION

This primitive reduces and calculates pointing information for a line
source. It removes a zero-order baseline, creates a variance for the
cube, then collapses around the line using C<_COLLAPSE_PF_SRC_LINE_>.
The collapsed image is used to calculate the pointing information.

=head1 ARGUMENTS

=over 4

=item CACHE = LOGICAL (Given)

Whether or not to cache the results in internal headers. [0]

=item REPORT = LOGICAL (Given)

Whether or not to report results to the user. [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS cubes with either RxA or HARP-B
as the front-end.

=item *

The original Frame object is restored upon exiting this primitive.

=back

=head1 OUTPUT DATA

=over 4

=item *

The baselined cube in a file of the form
aE<lt>YYYYMMDDE<gt>_E<lt>NNNNNE<gt>_E<lt>MME<gt>_bl.

=item *

The cube with variance added in a file of the form
aE<lt>YYYYMMDDE<gt>_E<lt>NNNNNE<gt>_E<lt>MME<gt>_var.

=item *

The integrated intensity image in a file of the form
aE<lt>YYYYMMDDE<gt>_E<lt>NNNNNE<gt>_E<lt>MME<gt>_linteg001.

=back

=head1 TASKS

See the _REMOVE_BASELINE_, _CREATE_CUBE_VARIANCE_,
_COLLAPSE_PF_SRC_LINE_, _COLLAPSE_LINE_,
_COLLAPSE_CENTRAL_LINE_, and _CALCULATE_POINTING_ primitives.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2008 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Retrieve arguments.
my $cache = get_prim_arg( $_PRIM_ARGS_, "CACHE", 0 );
my $report = get_prim_arg( $_PRIM_ARGS_, "REPORT", 1 );

# Report to user.
orac_say( "Calculating pointing based on central line.", "green" );

if( $Frm->uhdr( "SPARSE_CUBE" ) ) {

  orac_warn( "Cannot calculate pointing on a sparse cube.\n" );

} else {

  # Tag the Frm for easy retrieval.
  $Frm->tagset( "REDUCE_LINE_POINTING_BEGIN" );

  # Remove the baseline.
  _REMOVE_BASELINE_

  $Frm->tagset( "REDUCE_LINE_POINTING_BASELINE" );

  # Create a variance.
  _CREATE_CUBE_VARIANCE_

  _COLLAPSE_PF_SRC_LINE_

  _CALCULATE_POINTING_ TYPE=LINE REPORT=$report CACHE=$cache

  # Try to create "rimg" preview image from collapsed map.
  if (1 == $Frm->nfiles) {
    my ($in, $out) = $Frm->inout('_rimg');
    $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "in=$in out=$out");
    $Frm->push_intermediates($out);
    _TAG_AS_REPRESENTATIVE_ GROUP=0 FILE=$out PRODUCT=rimg PREVIEW_ONLY=1 DISPLAY=0
  }

  $Frm->tagretrieve( "REDUCE_LINE_POINTING_BASELINE" );

  # Try to create "rsp" preview image from central pixel.
  if (1 == $Frm->nfiles) {
    my ($in, $out) = $Frm->inout('_rsp');
    $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "in=${in}(1,1,) out=$out trim trimwcs");
    $Frm->push_intermediates($out);
    _TAG_AS_REPRESENTATIVE_ GROUP=0 FILE=$out PRODUCT=rsp PREVIEW_ONLY=1 DISPLAY=0
  }

  # Reshape cube to 2D for multiline display.
  if (1 == $Frm->nfiles) {
    my ($in, $out) = $Frm->inout('_pntcubeut');
    my (undef, $outt) = $Frm->inout('_pntcube');
    _GET_DIMENSIONS_
    my $dims = $_GET_DIMENSIONS_{'DIMS'};
    my $nx = $dims->[0] * $dims->[1];
    my $ny = $dims->[2];
    my $lbound = $_GET_DIMENSIONS_{'LBOUND'};
    my $lboundz = $lbound->[2];
    # First reshape to matching dimensionality so we can use wcscopy,
    # then trim to 2D.  (Probably is an easier way to do this?)
    $Mon{'ndfpack_mon'}->obeyw('reshape', "in=$in out=$out shape=[$nx,1,$ny]");
    $Mon{'ndfpack_mon'}->obeyw('setorigin', "ndf=$out origin=[1,1,$lboundz]");
    $Mon{'ndfpack_mon'}->obeyw('wcscopy', "ndf=$out like=$in");
    $Frm->push_intermediates($out);
    $Mon{'ndfpack_mon'}->obeyw('ndfcopy', "in=$out out=$outt trim trimwcs");
    $Frm->files($outt);

    my $range = $Frm->uhdr('COLLAPSED_RANGE');
    $Display->display_data($Frm, {HLRANGE => $range}, -1) if defined $Display;
  }

  # Reset the Frame object.
  $Frm->tagretrieve( "REDUCE_LINE_POINTING_BEGIN" );

}

