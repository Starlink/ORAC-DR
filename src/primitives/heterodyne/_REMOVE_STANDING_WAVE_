## -*-cperl-*-

=head1 NAME

__REMOVE_STANDING_WAVE_ - Remove standing-wave signals from heterodyne
spectral cubes.

=head1 DESCRIPTION

This primitive estimates the standing-wave (SW) patterns arising from
the motion to the off position that occurs once per scan row, and
subtracts these.  It operates on all the Frames in the current Group,
which must be position-position-velocity (PPV) spectral cubes.

Using other primitives this finds the median and optionally smoothed
spectrum for each scan line.  This is normally achieved using an image
mask of the emission present.  The spectra are grown along the scan
axis to the corresponing dimension of the original spectral cube, and
then subtracted from each of the current Groop's Frames.

There is an REFINE option whose aim is to create more-accurate SW
spectra, especially for cases where the emission spans all of one or
more scan rows.  First a new group PPV is formed from the
SW-subtracted spectral cubes from which a three-dimensional mask is
created.  This mask has the potential to include more spectra into the
median spectrum in a scan row provided the emission is at different
velocities across the row.  As before this grown to the original
spectral cube shape and subtracted from the input PPVs.  Note that
while the three-dimensional mask approach is a normal part of
heterodyne group production, it fails in the presence of standing
waves, as it detects the standing-wave peaks, thus the initial phase
to remove the bulk of the standing waves is essential.  The new mask
may be applied to the original spectral cubes, or to those with the
first estimate of the SWs subtracted.  See the REFINE_SOURCE argument.

There is an option not use an image mask.  This achieved by either not
setting the IMAGE_MASK argument, or set the recipe parameter
STANDING_WAVE_EMISSION_MASK to 0.

=head1 ARGUMENTS

=over 4

=item DO_TILING =  BOOLEAN (Given)

Whether to perform tiling when creating PPVs from time-series cubes. [0]

=item FREQUENCY_SMOOTH = INTEGER (Given)

The number of channels to smooth in the frequency axis when smoothing
to determine baselines. This number should be small (~10) for
narrow-line observations and large (~25) for broad-line observations.
This argument can be overridden by the RECPAR_FREQUENCY_SMOOTH uhdr
via the recipe parameter system.  [25]

=item INTEG_MASK = STRING (Given)

The name of the file that has known emission masked.  It should either
contain zeroes for regions lacking emission and bad values in the
emission regions.  It is normally derived from the group integ map.
If this is undefind, no mask is used to select the spectra. [undef]

=item ORDER = INTEGER (Given)

The polynomial order that will be used when estimating baselines.
This argument can be overridden by the RECPAR_BASELINE_ORDER uhdr
via the recipe parameter system.  [1]

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically.  This argument can be overridden
by the RECPAR_SPREAD_WIDTH uhdr via the recipe parameter system.  [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value corresponds to 1.0 pixels, and the run-time default
value is equivalent to 2.0 pixels.  For the Gauss and SincGauss
scheme, it specifies the full-width at half-maximum (FWHM) of the
Gaussian envelope.  The minimum value is 0.1, and the run-time default
is 1.0.  This argument can be overridden by the
RECPAR_SPREAD_FWHM_OR_ZERO uhdr via the recipe parameter system.  []

=item PER_LINE = LOGICAL (Given)

Whether or not to create a moments map for each detected line. [0]

=item PIXSIZE = REAL (Given)

The output pixel scale. If not defined, this value is automatically
determined from the data.  This argument can be overridden by the
RECPAR_PIXSIZE uhdr via the recipe parameter system.  []

=item REFINE = BOOLEAN (Given)

If true, the emissions are refined using three-dimensional emission
detection.  See the Description for more detail.  This argument can be
overridden by the STANDING_WAVE_REFINE recipe parameter.  [1]

=item REFINE_SOURCE = STRING (Given)

If the REFINE option is enabled, this decides which source PPV cube is
refined.  The default is "Original" (may be abbreviated to "O"), where
the original PPV cubes are reused.  The alternative is "Corrected"
(may be abbreviated to "C"), where the standing-wave filtered PPV is
refined.  In both methods, each PPV has an improved emission mask,
thanks to the initial estimate of the standing waves being subtracted.
This argument can be overridden by the STANDING_WAVE_REFINE_SOURCE recipe
parameter.  If any other value is supplied, the default is assumed.
["Original"]

=item SPATIAL_SMOOTH = INTEGER (Given)

The number of pixels to smooth in both spatial axes when smoothing to
determine baselines.   This argument can be overridden by the
RECPAR_SPATIAL_SMOOTH uhdr via the recipe parameter system.  [3]

=item SPREAD = STRING (Given)

The method to use when spreading each input pixel value out between a
group of neighbouring output pixels when using MAKECUBE to generate a
cube. This argument can be overridden by the RECPAR_SPREAD_METHOD uhdr
via the recipe parameter system.  ['nearest']

=item SYSTEM = STRING (Given)

The celestial coordinate system for the output cube. Can be any one of
ICRS, GAPPT, FK5, FK4, FK4-NO-E, AZEL, GALACTIC, or ECLIPTIC. A
special value of TRACKING can also be given, in which case the system
used will be that used as the tracking system during the
observation.

If this argument is not defined, then the system is determined from
the data and is typically set to 'tracking'. The only case where this
does not apply is if the observation is a scan and the scanning was
done in AZ/EL, in which case the system will be set to 'AZEL'.

This argument can be overridden by the RECPAR_SYSTEM uhdr via the
recipe parameter system. [undef]

=item TILE = LOGICAL (Given)

Whether or not to break the spectral cubes into tiles.  [1]

=item TILEBORDER = INTEGER (Given)

The size of the border to be added to tiles. This is used when
smoothing the cube in spatial extend in later processing so as to not
add edge effects when merging tiles together. [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS position-position-velocity cubes.

=item *

The recipe parameter STANDING_WAVE_EMISSION_REGIONS is accessed along
with the presence of an integ emission mask and the REFINE argument to
decide whether refinement of the standing-wave correction is viable.

=item *

The Group uhdr STANDING_WAVE_CORRECTED is created and stores the
standing-wave-subtracted PPVs.


=back

=head1 OUTPUT DATA

=over 4

=item *

A standing-wave subtracted PPV cube for each Frame with suffix _swc, or
_swci if the iterative option is selected.

=back

=head1 TASKS

See _CREATE_BASELINE_MASK_, _CREATE_CUBE_FRAME_, _CREATE_CUBE_GROUP_,
_CREATE_TIMESERIES_STANDING_WAVE_, _RETRIEVE_TAG_, _SET_TAG_ and
_SUBTRACT_SCAN_LINE_STANDING_WAVE_.

=head1 REQUIRED PERL MODULES

None

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2023-2024 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Obtain arguments and recipe-parameter overrides.
# ================================================

my $do_tiling = get_prim_arg( $_PRIM_ARGS_, "DO_TILING",0  );
my $freqsmooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $integ_mask = get_prim_arg( $_PRIM_ARGS_, "INTEG_MASK", undef );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $pixsize = get_prim_arg( $_PRIM_ARGS_, "PIXSIZE", 6 );
my $sp_param1 = get_prim_arg( $_PRIM_ARGS_, "PARAM1", 0 );
my $sp_param2 = get_prim_arg( $_PRIM_ARGS_, "PARAM2", undef );
my $refine = get_prim_arg( $_PRIM_ARGS_, "REFINE", 1 );
my $source = get_prim_arg( $_PRIM_ARGS_, "REFINE_SOURCE", "Original" );
my $spatsmooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $spread = get_prim_arg( $_PRIM_ARGS_, "SPREAD", 'nearest' );
my $system = get_prim_arg( $_PRIM_ARGS_, "SYSTEM", undef );
my $tile = get_prim_arg( $_PRIM_ARGS_, "TILE", 1 );
my $tileborder = get_prim_arg( $_PRIM_ARGS_, "TILEBORDER", 0 );

$refine = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_REFINE" ) ) ?
           $Frm->uhdr( "RECPAR_STANDING_WAVE_REFINE" )              :
           $refine );

$source = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_REFINE_SOURCE" ) ) ?
           $Frm->uhdr( "RECPAR_STANDING_WAVE_REFINE_SOURCE" )             :
           $source );
$source = "Original" if $source !~ /^O/ && $source !~ /^C/;
my $original = ( $source =~ /^O/ ? 1 : 0 );

my $supplied_mask = defined( $integ_mask );
my $use_integ_mask = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_MASK" ) ) ?
                     $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_MASK" )              :
                     0 );
my $standing_spatial_mask = $use_integ_mask && $supplied_mask;

my $em_regions = ( defined( $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_REGIONS" ) ) ?
                   $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_REGIONS" )            :
                   undef );


# Refinement requires that a mask is also provided.
my $mask_provided = $standing_spatial_mask || defined( $em_regions ) ||
                    defined ( $Grp->uhdr( "BASELINE_MASKS" ) );
my $refine_swc = $mask_provided && $refine;

# TAG PPV cubes of each Frame.
###### Should check whether current Frames are PPVs.
_SET_TAG_ TAG=PPV_FRAMES GROUP=2

my ( @swc, @swci, @tsref, @subscans, @nsubscans );
my ( $swcfile, $swcGrp, $swcFrm );

# Determine whether or not there are subscans present.  First revert
# to a tag where subscans would be present, should any exist.  Later
# restore the group to its previous state.
_RETRIEVE_TAG_ TAG=TIMESERIES_MASKED_BASELINED GROUP=2
my $subscans_present = 0;
foreach my $Frm ( $Grp->members ) {
   my $subscans_in_frame = $Frm->nfiles > 1 ?  1 : 0;
   $subscans_present = $subscans_in_frame || $subscans_present;
}

# Continue with the baseline-corrected timeseries in order to create
# PPV cubes for each subframe.  Store these so they may have the
# standing wave subtracted from them, and importantly each PPV
# corresponds to the original time-series files to recreate the
# standing-wave-removed time series.
if ( $refine_swc && $subscans_present ) {
   foreach my $Frm ( $Grp->members ) {
      push @nsubscans, $Frm->nfiles;

# This reverse loop order is to avoid overwriting earlier PPV
# cubes from CREATE_CUBE_FRAME_.
      for my $sfc ( 1 .. $Frm->nfiles ) {
         my $tscube = $Frm->file( $sfc );
         my $blFrm = new $Frm;
         $blFrm->file( $tscube );
         $blFrm->readhdr;

# Generate the subscan spectral cube, and save it in the main group.
# The _CREATE_CUBE_FRAME_ primitive will create a single tile here,
# but it will always have the 001 counter suffix.  So rename each of
# these to the correct counter to have distinct files.
         {
            my $Frm = $blFrm;
            _CREATE_CUBE_FRAME_ SPREAD=$spread PARAM1=$sp_param1 PARAM2=$sp_param2 TILEBORDER=$tileborder SUFFIX=_scube PRODUCT=subframe_cube PIXSIZE=$pixsize SYSTEM=$system TILE=$tile JSATILE=$do_tiling CHUNK=1
            push @subscans, $Frm->file;
         }
      }
   }
}

# Return to the PPV group and update the files with the recently created
# PPV cubes for all the subscans.
_RETRIEVE_TAG_ TAG=PPV_FRAMES GROUP=2
if ( $refine_swc && $subscans_present ) {
   my $i = 1;
   my $j = 0;
   foreach my $Frm ( $Grp->members ) {
      for my $sfc ( 1..$nsubscans[$j] ) {
         $Frm->file( $sfc, $subscans[$i-1] );
         $i++;
      }
      $j++;
   }
}

# Attempt removal of standing waves.
# ----------------------------------

foreach my $Frm ( $Grp->members ) {

# Find the median, smoothed spectrum for each scan line.  Grow it to
# the original spectral cube shape and subtract it.  First use the
# integ map to remove most of the standing waves in order to define
# the emission regions better in three-dimensional space.  Then apply
# this better mask to form the median spectra along scan lines.
   if ( $standing_spatial_mask ) {
      orac_say "Using emission mask $integ_mask for removal of standing waves.";
      _SUBTRACT_SCAN_LINE_STANDING_WAVE_ INTEG_MASK=$integ_mask
   } else {
      _SUBTRACT_SCAN_LINE_STANDING_WAVE_
   }

# Keep a tally of all the standing-wave-corrected files.
   foreach my $i ( 1..$Frm->nfiles ) {
      push @swc, $Frm->file( $i );
   }
}

$Grp->uhdr( "STANDING_WAVE_CORRECTED", \@swc );

# Save the current PPVs.
_SET_TAG_ TAG=PPV_SWC GROUP=2

if ( $refine_swc ) {
   my $ppvcube;

# Convert the PPVs with standing waves subtracted back into time-series
# cube to be used to make the final group products in the next iteration.
   _CREATE_TIMESERIES_STANDING_WAVE_ PARAM1=$sp_param1 PARAM2=$sp_param2 PIXSIZE=$pixsize

# Form new group PPV.
   _CREATE_CUBE_GROUP_ SPREAD=$spread PARAM1=$sp_param1 PARAM2=$sp_param2 TILEBORDER=$tileborder PIXSIZE=$pixsize SYSTEM=$system TILE=$tile JSATILE=0
   $ppvcube = $Grp->file;

   orac_say "The new PPV cube is $ppvcube";

# Restore the PPVs frames to the main group.  Need to delineate the
# BASELINE_MASKs, so copy the previous one for now.
   my @masks = @{$Grp->uhdr("BASELINE_MASKS" )};

# Create the PPV cube with the emission masked.
   _CREATE_BASELINE_MASK_ GROUP=1 FREQUENCY_SMOOTH=$freqsmooth  SPATIAL_SMOOTH=$spatsmooth ORDER=$order REPORT=1
   orac_say "Using three-dimensional emission mask in _SUBTRACT_SCAN_LINE_STANDING_WAVE_";

# Now redo the standing-wave subtraction, applied to either the supplied
# PPV cubes or to those that have had a first-pass at removal of standing
# waves.
   if ( $original ) {
      _RETRIEVE_TAG_ TAG=PPV_FRAMES GROUP=2
   } else {
      _RETRIEVE_TAG_ TAG=PPV_SWC GROUP=2
   }
   foreach my $Frm ( $Grp->members ) {
      _SUBTRACT_SCAN_LINE_STANDING_WAVE_ EMISSION_MASK=1 SUFFIX=swci
      foreach my $i ( 1..$Frm->nfiles ) {
         push @swci, $Frm->file( $i );
      }
   }
   $Grp->uhdr( "STANDING_WAVE_CORRECTED", \@swci );

# Restore the original baseline masks.
   $Grp->uhdr( "BASELINE_MASKS", \@masks );

}
