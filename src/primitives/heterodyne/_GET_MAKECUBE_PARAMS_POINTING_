# -*-cperl-*-

=head1 NAME

_GET_MAKECUBE_PARAMS_POINTING_ - Calculate MAKECUBE parameters for a
pointing observation.

=head1 DESCRIPTION

This primitive uses information contained in FITS headers to calculate
MAKECUBE parameters appropriate for an ACSIS pointing observation.

=head1 ARGUMENTS

=over 4

=item HASH = HASH REFERENCE (Returned)

A Perl hash reference containing parameters as keys and values as
values. For pointings, the 'system' and 'alignsys' are always returned
as 'azel' and 'true'. 'autogrid' is returned as 'yes' if the first
MAKECUBE pass is done, 'detectors' is returned as the value of the
INSTAP FITS header if that value is defined, and 'pixsize' is returned
as the value of the JIG_SCAL FITS header if that value is defined.

=item PASS = INTEGER (Given)

The MAKECUBE pass number. 1 for first pass, 2 for second pass. If the
first pass is done, then autogrid is used. If not, then not. [1]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS pointing observations.

=back

=head1 OUTPUT DATA

None.

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 SEE ALSO

_GET_MAKECUBE_PARAMS_

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008 Science and Technology Facilities Council.  All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $pass = get_prim_arg( $_PRIM_ARGS_, "PASS", 1 );

my $instap = ( defined( $Frm->hdr( "INSTAP" ) ) ?
               uc( $Frm->hdr( "INSTAP" ) )      :
               '' );

my %return_hash = ();

# Force rotation angle to 0 and turn off autogrid.
if( $pass == 1 ) {
  $return_hash{'autogrid'} = 'no';
  $return_hash{'crota'} = 0;
}

# Check if we're doing a specific detector.
if( $instap ne '' ) {
  $return_hash{'detectors'} = $instap;
}

# Always force system=tracking and alignsys=true.
$return_hash{'system'} = 'tracking';
$return_hash{'alignsys'} = 'true';

# Check to see if we have a JIG_SCAL header defined. If so, then we
# can force the pixel scale to that.
my $jig_scal = ( defined( $Frm->hdr( "JIG_SCAL" ) ) ?
                 $Frm->hdr( "JIG_SCAL" ) :
                 '' );
if( $jig_scal ne '' ) {
  $return_hash{'pixsize'} = $jig_scal;
}

# Return.
$_PRIM_ARGS_->{HASH} = \%return_hash;
