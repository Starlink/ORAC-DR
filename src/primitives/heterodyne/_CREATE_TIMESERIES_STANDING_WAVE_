=head1 NAME

_CREATE_TIMESERIES_STANDING_WAVE_

=head1 DESCRIPTION

This primitive converts all of the current Group's standing-wave
corrected members from spectral cubes into time-series cubes.
 
UNMAKECUBE uses the original time-series data as references.

=head1 ARGUMENTS

=over 4

=item INTERP = STRING (Given)

The method to use when resampling the input sky cube pixel
values. ['nearest']

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically. [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0 pixels, and the run-time default value is 2.0
pixels.  For the Gauss and SincGauss scheme, it specifies the
full-width at half-maximum (FWHM) of the Gaussian envelope.  The
minimum value is 0.1 pixels, and the run-time default is 1.0
pixels. Note that these numbers are given in pixels and this parameter
takes the number of requested arcseconds. This is done because the
pixel scale could be automatically determined from the data. []

=item PIXSIZE = REAL (Given)

The output pixel scale. If not defined, this value is automatically
determined from the data. This argument can be overridden by the
RECPAR_PIXSIZE uhdr via the recipe parameter system. []

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=item *

The standing-wave corrected files are specfieid through the group uhdr
STANDING_WAVE_CORRECTED, hich stores a list of file names.  Likewise
he reference time-series cubes are stored in the group uhdr called
REFERENCE_TIMESERIES.  An error ensues if either of these headers is
not defined.

=item *

Neither the Frame nor Group object are updated.  However, the output
files are logged as group intermediates.

=back

=head1 OUTPUT DATA

=over 4

=item *

Time-series masks with the suffix _tssw.

=back

=head1 TASKS

KAPPA: NDFTRACE
SMURF: UNMAKECUBE

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2023 Science and Technology Facilities Council.  All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle parameters.
my $interp = uc( get_prim_arg( $_PRIM_ARGS_, 'INTERP', 'NEAREST' ) );
my $param1 = get_prim_arg( $_PRIM_ARGS_, 'PARAM1', 0 );
my $param2 = get_prim_arg( $_PRIM_ARGS_, 'PARAM2', undef );
my $pixsize = get_prim_arg( $_PRIM_ARGS_, 'PIXSIZE', undef );

# UNMAKECUBE can't take GAUSS, so if the interpolation method is set
# to that, reset the three parameters.
if( $interp eq 'GAUSS' ) {
    orac_warn "UNMAKECUBE cannot use GAUSS as interpolation method.\n";
    orac_warn "Setting interpolation method to NEAREST.\n";
    $interp = 'NEAREST';
    $param1 = 0;
    $param2 = undef;
}

my @ref;
my @tscube;
my @swcin;
foreach my $Frm ( $Grp->members ) {
   foreach my $i ( 1 .. $Frm->nfiles ) {
      my ( $in, $out ) = $Frm->inout( "_tssw", $i );
      push @tscube, $out;
      my ( $rootname, $suffix ) = split /_([^_]+)$/, $in;

# Record that the output file will be deleted after grouo processing.
      $Grp->push_intermediates( $out );
   }
}

# Access thee input standing-ave-corrected PPV cubes and reference
# time-series cubes.
if ( ! defined( $Grp->uhdr( "STANDING_WAVE_CORRECTED" ) ) ) {
   orac_err "_CREATE_TIMESERIES_STANDING_WAVE_: Programming error--\n" .
            "Group header STANDING_WAVE_CORRECTED is not defined.\n";
}

if ( ! defined( $Grp->uhdr( "REFERENCE_TIMESERIES" ) ) ) {
   orac_err "_CREATE_TIMESERIES_STANDING_WAVE_: Programming error--\n" .
            "Group header REFERENCE_TIMESERIES is not defined.\n";
}

@swcin = @{$Grp->uhdr( "STANDING_WAVE_CORRECTED" )};
@ref = @{$Grp->uhdr( "REFERENCE_TIMESERIES" )};

# Create input list files for the various parameters to UNMAKECUBE.
my $inlist = new ORAC::TempFile( OPEN => 1, SUFFIX => '.lis' );
my $inlist_fh = $inlist->handle;
print $inlist_fh join "\n", @swcin;
$inlist->handle->close;

my $reflist = new ORAC::TempFile( OPEN => 1, SUFFIX => '.lis' );
my $reflist_fh = $reflist->handle;
print $reflist_fh join "\n", @ref;
$reflist->handle->close;

my $outlist = new ORAC::TempFile( OPEN => 1, SUFFIX => '.lis' );
my $outlist_fh = $outlist->handle;
print $outlist_fh join "\n", @tscube;
$outlist->handle->close;

# Get parameter string for UNMAKECUBE. To do this we need the pixel
# scale of one of the input NDFs.
my $ndf = $Frm->file(1);
$Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$ndf" );

if ( ! defined( $pixsize ) ) {
   my ( $ORAC_STATUS, @fpixsize ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fpixscale" );
   $pixsize = sqrt( $fpixsize[0] * $fpixsize[0] + $fpixsize[1] * $fpixsize[1] );
}

_GET_SPREAD_PARAMS_ PARAM1=$param1 PARAM2=$param2 METHOD=$interp PIXSIZE=$pixsize
my $interp_params = $_GET_SPREAD_PARAMS_{PARAMSTRING};

# Set up parameters to UNMAKECUBE.
my $params = "in=^$inlist ref=^$reflist out=^$outlist interp=$interp usedetpos=f params=$interp_params";

orac_print "Creating timeseries cubes from spectral cubes...";

# And run UNMAKECUBE.
$Mon{'smurf_mon'}->obeyw( "unmakecube", "$params" );

# Replace the frames in the group, for the reduced cubes
# with the standing-wave-corrected time series.
my $i = 0;
foreach my $Frm ( $Grp->members ) {
   $Frm->file( $tscube[$i] );
   $i++;
}

orac_say " done.";

# Report to the user.
orac_print "Created time-series cubes in " . ( join ", ", @tscube ) . "\n";

# Tidy-up output.
orac_print "\n";
