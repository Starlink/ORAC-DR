# -*-cperl-*-

=head1 NAME

_QA_MAP_RMS_SPATIAL_UNIFORMITY_ - Check spatial uniformity across a
noise map.

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=item CENTRAL = INTEGER (Given)

If defined, the central percentage of the map to use for
calculations. If defined, must be between 1 and 100 to make any
sense. []

=item FILE = STRING (Given)

The file to perform quality assurance calculations on. If not defined,
this primitive will throw an error.

=item SURVEY = STRING (Given)

If supplied, run QA using the given survey's QA parameters. If 'all'
is given, then run QA using every survey's QA parameters. If left
undefined, then use the survey as supplied in the SURVEY FITS
header. ['']

=back

=head1 NOTES

=over 4

=item *

The FILE argument must be supplied.

=item *

The LEGACY internal headers of the Object being analysed is set
to false if it is not defined on input.

=back

=head1 OUTPUT DATA

None.

=head1 TASKS

KAPPA: STATS.

=head1 REQUIRED PERL MODULES

JSA::QA.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2014 Science and Technology Facilities Council.
All Rights Reserved.

=cut

use JSA::QA;

my $file = get_prim_arg( $_PRIM_ARGS_, "FILE", undef, 1 );
my $central = get_prim_arg( $_PRIM_ARGS_, "CENTRAL", undef );
my $Obj = get_prim_arg( $_PRIM_ARGS_, "OBJ", undef, 1 );
my $survey = get_prim_arg( $_PRIM_ARGS_, "SURVEY", undef );
my $storeqa = get_prim_arg( $_PRIM_ARGS_, "STOREQA", 0 );

my @surveys = qw/ GBS NGS SLS Telescope /;

orac_say "Checking RMS spatial uniformity for $file.";

my $region = "";
_GET_DIMENSIONS_ FILE=$file
my $dims = $_GET_DIMENSIONS_{DIMS};
my ( $xdim, $ydim );
if( defined( $central ) ) {
  orac_say " Using central $central% of map.";
  $xdim = int( $dims->[0] * $central / 100 );
  $ydim = int( $dims->[1] * $central / 100 );
  $region = "(~$xdim,~$ydim)";
}

if( ( $dims->[0] < 3 && $dims->[1] < 3 ) ||
      $xdim == 0 || $ydim == 0 ) {
  orac_warn "Not enough data in map to calculate map uniformity QA.\n";
} else {

  # Just run STATS on the file. This gives us min, max, and mean values.
  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$file$region" );
  my ( $ORAC_STATUS, $mean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
  ( $ORAC_STATUS, my $min ) = $Mon{'kappa_mon'}->get( "stats", "minimum" );
  ( $ORAC_STATUS, my $max ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );
  ( $ORAC_STATUS, my $numpix ) = $Mon{'kappa_mon'}->get( "stats", "numpix" );
  ( $ORAC_STATUS, my $numbad ) = $Mon{'kappa_mon'}->get( "stats", "numbad" );

  if( $numpix != $numbad ) {
    orac_say sprintf( " minimum: %.2f maximum: %.2f mean: %.2f",
                      $min, $max, $mean );
    orac_say sprintf( " Number of pixels used: %5d", $numpix );
    orac_say sprintf( " Number of bad pixels:  %5d", $numbad );
    orac_say sprintf( " Percentage bad: %.2f%%", $numbad / $numpix * 100 );
  } else {
    orac_say " minimum: bad maximum: bad: mean: bad";
    orac_say sprintf( " Number of pixels used: %5d", $numpix );
    orac_say sprintf( " Number of bad pixels:  %5d", $numbad );
    orac_say " Percentage bad: 100.00%";
    $mean = 1e15;
    $max = 1e20;
    $min = 1e10;
  }
  orac_say "";

  # Set up a list of surveys to analyse.
  my @analyse_surveys;
  if( defined( $survey ) ) {
    if( uc( $survey ) eq 'ALL' ) {
      @analyse_surveys = @surveys;
    } else {
      push @analyse_surveys, $survey;
    }
  } else {
    push @analyse_surveys, ( defined( $Frm->uhdr( "ORAC_SURVEY" ) ) ?
                             $Frm->uhdr( "ORAC_SURVEY" )            :
                             "Telescope" );
  }

  # Prevent errors from the qaparams calibration matching the LEGACY
  # header if this primitive is not being called in a 'legacy' recipe.
  # A legacy recipe steering primitive should define the LEGACY
  # internal header, but other recipes will not.
  $Obj->uhdr( "LEGACY", 0 ) if ( ! defined( $Obj->uhdr( "LEGACY" ) ) );

  # Obtain QA parameters.
  _SETUP_QA_OPTIONS_
  my %opts = %{$_SETUP_QA_OPTIONS_{'OPTS'}};
  my $qaparamfile = $Cal->qaparams;
  my $qa = new JSA::QA( file => $qaparamfile );


  # Retrieve QA report info from the Obs.
  my %qa_info;
  if( defined( $Obj->uhdr( "QA_REPORT_INFO" ) ) ) {
    %qa_info = %{$Obj->uhdr( "QA_REPORT_INFO" )};
  }

  # Go through the surveys and report QA results.
  foreach my $analyse_survey ( sort @analyse_surveys ) {

    # Array to hold string of messages to be written to log file.
    my @entries;

    # Retrieve QA report header.
    _QA_REPORT_HEADER_ SURVEY=$analyse_survey OBJ=$Obj
    my $header = $_QA_REPORT_HEADER_{HEADER};

    # Default pass.
    my $pass = 1;

    $opts{'survey'} = $analyse_survey;

    my $RMSVAR_MAP = $qa->get_data( key => 'RMSVAR_MAP', %opts );
    my $BADPIX_MAP = $qa->get_data( key => 'BADPIX_MAP', %opts );

    orac_print " Spatial RMS uniformity ";
    if( $min > $mean * ( 1 - $RMSVAR_MAP ) &&
        $max < $mean * ( 1 + $RMSVAR_MAP ) ) {
      orac_print( " passed ", "bold white on_green" );
      push @entries, "Spatial RMS uniformity\t passed";
    } else {
      orac_print( " failed ", "bold white on_red" );
      $pass = 0;
      push @entries, "Spatial RMS uniformity\t failed";
    }
    orac_say " for $opts{'survey'} for $file.";
    if( $mean < 1e14 ) {
      push @entries, sprintf( "Minimum\t %.3f\t -%.2f%% \nMean\t %.3f \nMaximum\t %.3f\t +%.2f%%",
                              $min, ( $mean - $min ) / $mean * 100, $mean, $max, ( $max - $mean ) / $mean * 100 );
    } else {
      push @entries, "Minimum\t bad\n Mean\t bad\n Maximum\t bad";
    }
    push @entries, sprintf( "Requested variation\t %.2f%%", $RMSVAR_MAP * 100 );

    orac_print " QA based on bad pixels in final map ";
    if( $numbad / $numpix < $BADPIX_MAP ) {
      orac_print( " passed ", "bold white on_green" );
      push @entries, "Bad pixel threshold\t passed";
    } else {
      orac_print( " failed ", "bold white on_red" );
      $pass = 0;
      push @entries, "Bad pixel threshold\t failed";
    }
    orac_say " for $opts{'survey'} for $file.\n";
    push @entries, "Pixels\t $numpix";
    push @entries, sprintf( "Bad pixels\t %d\t %.2f%%",
                            $numbad, $numbad / $numpix * 100 );
    push @entries, sprintf( "Threshold\t %.2f%%", $BADPIX_MAP * 100 );

    # Store the QA report info if we've been told to.
    if( $storeqa ) {

      # If we already have a QA report entry for this header, push the
      # entries on the end. Otherwise, create the array reference.
      if( exists( $qa_info{$header} ) ) {
        push @{$qa_info{$header}{entries}}, @entries;
        $qa_info{$header}{pass} &= $pass;
      } else {
        $qa_info{$header}{entries} = \@entries;
        $qa_info{$header}{pass} = $pass;
      }

      $Obj->uhdr( "QA_REPORT_INFO", \%qa_info );
    }

  }
}

