# -*-cperl-*-

=head1 NAME

_CALCULATE_STANDARD_

=head1 DESCRIPTION

This primitive calculates the peak and integrated intensity for a flux
standard and reports these numbers. It also compares them with
standard values, giving the percentage difference between the two.

=head1 ARGUMENTS

=over 4

=item OBJ = OBJECT (Given)

Allows the user to provide an explicit object. By default uses the
current Frm object.  []

=item QUIET = BOOLEAN (Given)

When this primitive is called from other than recipes intended to
reduce observations of standards, a confusing and possibly troubling
warning can appear because, the source is unsurprisingly not a
standard.  If this argument is set to true, this warning does not
appear.  [0]

=item RETRIEVE = BOOLEAN (Given)

Whether or not to retrieve information from the calibration system. By
default this information will be retrieved. [1]

=item RUN_IF_UNKNOWN = BOOLEAN (Given)

If true, this primitive will run even if the object can't be found in
the calibration lookup. Can be override by the recpar
ALWAYS_CALCULATE_STANDARD. [0]

=back

=head1 NOTES

=over 4

This primitive is suitable for ACSIS cubes.

=back

=head1 OUTPUT DATA

=over 4

=item *

A log file containing information about the standard in log.standard.

=back

=head1 TASKS

KAPPA: COLLAPSE, NDFTRACE, STATS.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

Sarah Graves E<lt>s.graves@eaobservatory.orgE<gt>

=head1 COPYRIGHT

Copyright (C) 2009, 2013, 2014, 2017, 2019-2020 Science and Technology
Facilities Council.
Copyright (C) 2019 East Asian Observatory.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle parameters.
my $Obj = get_prim_arg( $_PRIM_ARGS_, "OBJ", $Frm );
my $quiet = get_prim_arg( $_PRIM_ARGS_, "QUIET", 0 );
my $retrieve = get_prim_arg( $_PRIM_ARGS_, "RETRIEVE", 1 );


# By default, we want this to not do anything if it's not a known
# standard. However, we want a primitive argument that can override
# this for use when calling it from REDUCE_STANDARD (which should
# always calculate one), and we want a recipe argument so we can
# override this for the JCMTCAL reductions.
my $run_if_unknown = get_prim_arg( $_PRIM_ARGS_, "RUN_IF_UNKNOWN", 0 );
if ( defined $Frm->uhdr(  "RECPAR_CALCULATE_STANDARD_ALWAYS" ) ) {
  $run_if_unknown = $Frm->uhdr( "RECPAR_CALCULATE_STANDARD_ALWAYS" );
  orac_say "Recipe parameter CALCULATE_STANDARD_ALWAYS is set";
}


my $file = $Obj->file;
my $stdref;

# Set up some variables that will be used for calibration information.
my ( $low, $high, @flbnd, @fubnd, $cal_integ, $cal_peak, $instrument_cal, $bwmode_cal );
( my $molecule = $Obj->hdr( "MOLECULE" ) ) =~ s/[\s\-]//g;
( my $transition = $Obj->hdr( "TRANSITI" ) ) =~ s/\s//g;
( my $object = $Obj->hdr( "OBJECT" ) ) =~ s/\s//g;

# Retrieve standard information from calibration system.
if ( ! $retrieve ) {
  if ( ! $quiet ) {
    orac_print "Not retrieving standard calibration information.\n";
  }

} else {

  $stdref = $Cal->standard;
  if ( ! defined $stdref ) {

    orac_warn "No standard calibration information could be found for this observation.\n";

  } else {

    # Pick out info from the calibration system.
    $low = $stdref->{'L_BOUND'};
    $high = $stdref->{'H_BOUND'};
    $cal_integ = $stdref->{'INTEGINT'};
    $cal_peak = $stdref->{'PEAK'};
    $molecule = $stdref->{'MOLECULE'};
    $transition = $stdref->{'TRANSITION'};
    $object = $stdref->{'OBJECT'};
    $instrument_cal = $stdref->{'INSTRUMENT'};
    $bwmode_cal = $stdref->{'BWMODE'};

    orac_say "Retrieved calibration information for $object from database for INST=$instrument_cal and BWMODE=$bwmode_cal.";
  }
}

if ($Frm->uhdr('ISIMAGESIDEBAND')) {
  orac_print "Not running _CALCULATE_STANDARD_ for image sideband.";
}
elsif ( $stdref || $run_if_unknown ) {
  orac_debug('Running standard calculation on $file');

  # Check that the velocity range lies within the current spectral range.
  # This is to cater for errors in the tuning.
  my $know_range = defined( $low ) && defined( $high );
  my $use_range = 1;
  my $ORAC_STATUS;
  if ( $know_range ) {
    $Mon{ndfpack_mon}->obeyw( "ndftrace", "ndf=$file" );
    ( $ORAC_STATUS, @flbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "flbnd" );
    ( $ORAC_STATUS, @fubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fubnd" );

    $use_range = ( $low  >= $flbnd[2] && $low  <= $fubnd[2] ) &&
      ( $high >= $flbnd[2] && $high <= $fubnd[2] );

    my $lower = sprintf( "%.2f", $flbnd[2] );
    my $upper = sprintf( "%.2f", $fubnd[2] );

    orac_warn "Possible tuning error during observation: the standard's emission line " .
              "located between $low and $high km/s lies beyond the spectral range " .
              "($lower to $upper km/s).  Flux and peak measurement will not be " .
              "made.\n" if ( ! $use_range );

  } else {
    $Mon{ndfpack_mon}->obeyw( "ndftrace", "ndf=$file(,,~90\%)" );
    ( $ORAC_STATUS, @flbnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "flbnd" );
    ( $ORAC_STATUS, @fubnd ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "fubnd" );
    $low = sprintf( "%.2f", $flbnd[2] );
    $high = sprintf( "%.2f", $fubnd[2] );
  }

  if ( $use_range ) {

    # Assuming this is only useful for calibration observations, just
    # use position 1,1. If that is blank, issue a warning and leave.
    my $temppeakfind = new ORAC::TempFile( 0 );
    $Mon{ndfpack_mon}->obeyw( "ndfcopy", "in=$file(,,$low:$high) out=$temppeakfind" );

    my $xpos = 1;
    my $ypos = 1;

    # Check that value isn't bad.
    orac_print "Using spatial position ($xpos, $ypos) for analysis.\n";

    # Calculate the integrated intensity...
    my $temp1 = new ORAC::TempFile( 0 );
    my $params = "in=$file($xpos,$ypos,~90\%) out=$temp1 axis=spec estimator=integ wlim=0.0";
    if ( $know_range ) {
      $params .= " low=$low high=$high";
    }
    $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
    $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp1" );
    my ( $ORAC_STATUS, $integ ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

    # and the peak value.
    if ( $know_range ) {
      $params = "ndf=$file($xpos,$ypos,$low:$high)";
    } else {
      $params = "ndf=$file($xpos,$ypos,~90\%)";
    }
    $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
    ( $ORAC_STATUS, my $numgood) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
    ( $ORAC_STATUS, my $peak ) = $Mon{'kappa_mon'}->get( "stats", "maximum" );

    if ( $numgood == 0 ) {
      orac_warn "No valid data in position $xpos, $ypos; cannot calculate standard values.\n";
    } else {

      # Compare to standard values, if we have them.
      my $integ_perc;
      if ( defined( $cal_integ ) && $cal_integ != 0 ) {
        $integ_perc = ( $integ - $cal_integ ) / $cal_integ * 100;
      }
      my $peak_perc;
      if ( defined( $cal_peak ) && $cal_peak != 0 ) {
        $peak_perc = ( $peak - $cal_peak ) / $cal_peak * 100;
      }

      # Report to user.
      orac_say "Flux calibration information for $object $molecule $transition:";
      my @result_text = ();

      if ( defined( $cal_integ ) ) {
        orac_say sprintf   " Reference integrated intensity: %.2fK", $cal_integ;
      }
      orac_print sprintf " Measured integrated intensity:  %.2fK", $integ;
      push @result_text, sprintf ' integrated %.2fK', $integ;

      if ( defined( $integ_perc ) ) {
        orac_say sprintf ( " (%.2f%% " . ( $integ_perc > 0 ? "higher" : "lower" ) . ")", abs( $integ_perc ) );
        $result_text[-1] .= sprintf( " (%.2f%% " . ( $integ_perc > 0 ? "high" : "low" ) . ")", abs( $integ_perc ) );

        # Handle warnings.
        if ( abs( $integ_perc ) > 20 ) {
          orac_say( " Integrated intensity differs by more than 20%", "red" );
        } elsif ( abs( $integ_perc ) > 10 ) {
          orac_say( " Integrated intensity differs by more than 10%", "yellow" );
        }
      } else {
        orac_say "";
      }

      # Calculate the peak.
      if ( defined( $cal_peak ) ) {
        orac_say sprintf   " Reference peak flux: %.2fK", $cal_peak;
      }
      orac_print sprintf " Measured peak flux:  %.2fK", $peak;
      push @result_text, sprintf ' peak %.2fK', $peak;

      if ( defined( $peak_perc ) ) {
        orac_say sprintf ( " (%.2f%% " . ( $peak_perc > 0 ? "higher" : "lower" ) . ")", abs( $peak_perc ) );
        $result_text[-1] .= sprintf( " (%.2f%% " . ( $peak_perc > 0 ? "high" : "low" ) . ")", abs( $peak_perc ) );

        if ( abs( $peak_perc ) > 20 ) {
          orac_say( " Peak flux differs by more than 20%", "red" );
        } elsif ( abs( $peak_perc ) > 10 ) {
          orac_say( " Peak flux differs by more than 10%", "yellow" );
        }

      } else {
        orac_say "";
      }

      my $bandwidth = ( defined ( $Obj->uhdr( "ORAC_BANDWIDTH_MODE" ) ) ) ? $Obj->uhdr( "ORAC_BANDWIDTH_MODE" ) : 'null';

      orac_result(
                  "$object $molecule $transition $bandwidth:" .
                  join(', ', @result_text) .
                  "\n");

      # Write this information to a separate logging file.
      my $obsdate = $Obj->uhdr( "ORAC_UTSTART" )->datetime;
      my $obsnum = defined( $Obj->uhdr( "ORAC_OBSERVATION_NUMBER" ) ) ?
                            $Obj->uhdr( "ORAC_OBSERVATION_NUMBER" )   : 0;
      my $subsysnr = defined( $Obj->hdr( "SUBSYSNR" ) ) ?
                              $Obj->hdr( "SUBSYSNR" )   : 0;
      my $obsid = defined( $Obj->uhdr( "ORAC_OBSERVATION_ID" ) ) ?
             sprintf "%27s", $Obj->uhdr( "ORAC_OBSERVATION_ID" ) :
             sprintf "%27s", "null";

      my $inst = defined ( $Obj->uhdr( "ORAC_INSTRUMENT" ) ) ?
                           $Obj->uhdr( "ORAC_INSTRUMENT" )   : 'null';
      my $lofreq = defined ( $Obj->hdr( "LOFREQS" ) ) ?
                             $Obj->hdr( "LOFREQS" )   : "NaN";
      my $mode = defined ( $Obj->uhdr( "ORAC_SWITCH_MODE" ) ) ?
                           $Obj->uhdr( "ORAC_SWITCH_MODE" )   : 'null';
      my $sideband = defined ( $Obj->hdr( "OBS_SB" ) ) ?
                               $Obj->hdr( "OBS_SB" )   : '?';
      my $tau = defined( $Obj->hdr( "TAU225ST" ) ) ?
                         $Obj->hdr( "TAU225ST" )   : "NaN";

      my $elevation = $Obj->uhdr( "ORAC_ELEVATION_START" );

      my $logfile = "log.standard";
      my $log = new ORAC::LogFile( $logfile );
      my $hdrformat = "%19s %7s %27s %6s %30s %7s %7s %15s %8s %5s %5s %13s %8s %5s %5s %8s %6s %7s %6s %7s %7s";
      my $header = sprintf($hdrformat, "OBSDATE", "OBSNUM", "OBSID", "SUBSYS", "FILE", "INST", "LOFREQ", "SOURCE", "MOLECULE", "LINE", "MODE", "BANDWIDTH", "SIDEBAND", "TAU", "ELEV", "INTEGINT", "IPER","PEAK", "PPER","L_BOUND", "H_BOUND");
      $log->header( $header );
      $log->addentry( sprintf( "%19s %7d %27s %6d %30s %7s %7.3f %15s %8s %5s %5s %13s %8s %5.3f %5.2f %8.2f %6.2f %7.2f %6.2f %7.2f %7.2f",
                             defined( $obsdate ) ? $obsdate : 'null',
                             defined( $obsnum ) ? $obsnum : 0,
                             defined( $obsid ) ? $obsid : 'null',
                             defined( $subsysnr ) ? $subsysnr: 0,
                             defined( $file ) ? $file: 'null',
                             defined( $inst ) ? $inst: 'null',
                             defined( $lofreq ) ? $lofreq: 0,
                             defined( $object ) ? $object: 'null',
                             defined( $molecule ) ? $molecule: 'null',
                             defined( $transition ) ? $transition: 'null',
                             defined( $mode ) ? $mode: 'null',
                             defined( $bandwidth ) ? $bandwidth: 'null',
                             defined( $sideband ) ? $sideband: 'null',
                             defined( $tau ) ? $tau: 0,
                             defined( $elevation ) ? $elevation: 0,
                             defined( $integ ) ?$integ: 0,
                             defined( $integ_perc ) ? $integ_perc: 0,
                             defined( $peak ) ? $peak: 0,
                             defined( $peak_perc ) ? $peak_perc: 0,
                             defined( $low ) ? $low : 0,
                             defined( $high ) ? $high : 0 ) );

    orac_print " Calibration information written to $logfile for $file.";
    }
  }

} elsif ( ! $quiet ) {
  orac_print "Not running _CALCULATE_STANDARD_ for unknown standard.";
}
orac_say "";

