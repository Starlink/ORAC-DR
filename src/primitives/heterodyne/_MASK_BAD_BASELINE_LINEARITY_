=head1 NAME

_MASK_BAD_BASELINE_LINEARITY_

=head1 DESCRIPTION

This primitive identifies bad detectors by comparing the deviation from
linearity of each detector's baseline.

It first creates a mean spectrum for each detector by collapsing the
time axis using a 2-sigma-clipped-mean estimator from all the subfiles
in the observation.  Then it filters the mean spectra:
  - thresholding to +/-20 to exclude strong spikes;
  - masking emission regions where the astronomical line may be present
    (see LINEWIDTH argument); and
  - determines the background level, effectively smoothing to remove
    structure smaller than a nominated scale (see SCALELENGTH argument).

The script then fits linear baselines to the smoothed spectra and
calculates the rms residuals.  From these it determines a mean rms
residual per detector for the central 85%.  This trimming excludes the
ends of the spectra that are known to be unreliable and exhibit random
large variations that would swamp the non-linearity signal the
primitive is attempting to detect.  The mean rms residual per detector
is printed.

The primitive then rejects receptors by one of two methods:
kappa-sigma clipping or a fixed threshold set by the RMS_THRESHOLD
argument.  For the former the primitive then evaluates the median and
standard deviation of the distribution of mean rms residuals from the
entire observation, and performs iterative sigma clipping above the
median to reject those detectors whose deviations from linearity are
anomalous, subjected to a minimum rejection threshold given by the
MINRMS argument.

The rejected receptors are then marked bad in the output cube, and
recorded in the bad_receptors_qa calibration.

=head1 ARGUMENTS

=over 4

=item BASELINE_REGIONS = REAL (Given)

A comma-separated list of velocity ranges each in the format v1:v2, from
where the baseline should be tested for linearity.  It is only used
if LINEWIDTH (or its corresonpding recipe parameter) has value "base".
[undef]

=item CLIP = STRING (Given)

The maximum number of standard deviations above the median rms
deviations for which a detector's non-linearity is regarded as
acceptable.  The minimum allowed is 2.  A comma-separated list will
perform iterative sigma clipping of outliers, but standard deviations
in the list should not decrease.  This argument can be overridden by
the RECPAR_BASELINE_LINEARITY_CLIP uhdr via the recipe parameter
system.  ["2.0,2.3,3.0"]

=item LINEWIDTH = STRING (Given)

This specifies the location of spectral-line emission or the regions
to analyse for bad baselines.  It can be:

=over 4

=item *

"auto", which requests that the emission be found automatically;

=item *

"base" meaning test the portions of the spectrum defined by
argument BASELINE_REGIONS; or

=item *

it is the extent(s) of the source spectral line(s) measured in km/s,
supplied in a comma-separated list.  For this last option, each range
may be given as bounds separated by a colon; or as a single value
being the width about zero.  For instance "-20:50" would excise the
region -20 to +50 km/s, and "30" would exclude the -15 to +15 km/s
range.

=back

This argument can be overridden by the RECPAR_BASELINE_LINEARITY_LINEWIDTH
uhdr via the recipe parameter system.  ["auto"]

=item MASK = LOGICAL (Given)

Whether or not to mask bad detectors.  Masking is needed if a
subsequent bad-baseline removal technique is employed.  [1]

=item MINRMS = REAL (Given)

The minimum rms deviation from linearity for a receptor to be flagged
as bad.  It avoids rejection of good receptors where one or two are
slightly more uneven than most or just have some transient baseline
issues.  This argument sets an absolute limit, not just rejection
based upon an intercomparison.  Values between 0.05 and 0.2 are
normal. Most good receptors will be in 0.02 to 0.05 range.  This
argument can be overridden by the RECPAR_BASELINE_LINEARITY_MINRMS
uhdr via the recipe parameter system.  [0.1]

=item MIN_SPECTRA = INTEGER (Given)

Minimum number of good spectra for non-linearity filtering to be attempted.
This argument can be overridden by the RECPAR_LOWFREQ_INTERFERENCE_MIN_SPECTRA
uhdr via the recipe parameter system.  This should be at least 50.  [50]

=item RMS_THRESHOLD = REAL (Given)

Instead of iteratively clipping outliers, reject all receptors who rms
deviation from linearity exceeds this value.  The minimum allowed
value is 0.02.  If it is undefined, the kappa-sigma clipping is used
to reject outlying receptors.  This argument can be overridden by the
RECPAR_BASELINE_LINEARITY_RMS_THRESHOLD uhdr via the recipe parameter
system.  [undef]

=item SCALELENGTH = INTEGER (Given)

The smoothing scale length in pixels.  Features narrower than this are
filtered out during the background-level determination.  It should be
should be odd (if an even value is supplied, the next higher odd value
will be used) and sufficiently large to remove the noise while not
removing the low-frequency patterns in the spectra. The minimum
allowed is 51.  This argument can be overridden by the
RECPAR_BASELINE_LINEARITY_SCALELENGTH uhdr via the recipe parameter
system.  [101]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS/HARP time-series data comprising
at least MIN_SPECTRA spectra.  The restriction to HARP is to ensure
there are sufficient receptors to derive meaningful statistics and
hence identify outliers.

=item *

This primitive is suitable for spectral-line raster or grid observations.

=item *

This primitive will not run if the BASELINE_LINEARITY recipe parameter
is set false (0).

=item *

The 85% trimming of the spectra is the same trim applied in the
QA primitives.

=item *

The primitive excludes analysis of the bad receptors, defaulting to
those listed in either the master (F<$ORAC_DATA_CAL/index.bad_receptors>)
or the local index F<$ORAC_DATA_OUT/index.bad_receptors_qa>).

=item *

It checks whether or not the internal header MERGED_HYBRID is set; if
it is defined then non-linearity tests are applied to the merged
spectra, otherwise the primitive performs the tests in each subband
independently.

=back

=head1 OUTPUT DATA

=over 4

=item *

A cleaned version of the supplied time-series cube in which the noisy
detectors are set to bad.  It has the suffix _bllmasked (for
BaseLine Linearity).

=back

=head1 TASKS

CUPID: FINDBACK;
KAPPA: ADD, ARDMASK, BLOCK, CDIV, CHPIX, CMULT, COLLAPSE, MATHS,
       MFITTREND, NDFCOPY, STATS, THRESH.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array, ORAC::Constants, Statistics::Descriptive.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2014 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;
use ORAC::Constants qw/ :badvalues /;
use Statistics::Descriptive;

# Inquire whether or not  non-linear baseline filtering is required.
my $apply = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY" ) ) ?
            $Frm->uhdr( "RECPAR_BASELINE_LINEARITY" )              :
            1 );
my $type = lc( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) );
$apply = $apply && $type =~ /grid|raster/;

# Other JCMT instruments have too few receiver for this algorithm.
if ( ! ( $apply && $Frm->uhdr( "ORAC_INSTRUMENT" ) eq "HARP" ) ) { goto RETURN }

# Handle arguments.
# =================

my $b_regions = get_prim_arg( $_PRIM_ARGS_, "BASELINE_REGIONS", undef );
my $linear_clip = get_prim_arg( $_PRIM_ARGS_, "CLIP", "2.0,2.3,3.0" );
my $mask = get_prim_arg( $_PRIM_ARGS_, "MASK", 1 );
my $emission_mask = get_prim_arg( $_PRIM_ARGS_, "LINEWIDTH", "auto" );
my $smooth_scale = get_prim_arg( $_PRIM_ARGS_, "SCALELENGTH", 101 );
my $min_rms = get_prim_arg( $_PRIM_ARGS_, "MINRMS", 0.1 );
my $min_spec = get_prim_arg( $_PRIM_ARGS_, "MIN_SPECTRA", "50" );
my $thr_rms = get_prim_arg( $_PRIM_ARGS_, "RMS_THRESHOLD", undef );

# Handle recipe parameter overrides.

# Handle recipe parameter overrides.
$b_regions = ( defined( $Frm->uhdr( "RECPAR_BASELINE_REGIONS" ) ) ?
             $Frm->uhdr( "RECPAR_BASELINE_REGIONS" )              :
             $b_regions );
my @regions;
if ( ref( $b_regions ) eq 'ARRAY' ) { @regions = @{ $b_regions } }

# Generate a comma-separated list if this has been turned into a stringified
# ARRAY reference.
$linear_clip = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_CLIP" ) ) ?
               $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_CLIP" )              :
               $linear_clip );
if ( ref( $linear_clip ) eq 'ARRAY' ) { $linear_clip = join( ",", @{ $linear_clip } ) };

$emission_mask = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH" ) ) ?
                $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH" )         :
                $emission_mask );

$smooth_scale = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH" ) ) ?
                $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH" )       :
                $smooth_scale );

$min_rms = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_MINRMS" ) ) ?
             $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_MINRMS" )       :
             $min_rms );

$min_spec = ( defined( $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_MIN_SPECTRA" ) ) ?
            $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_MIN_SPECTRA" )              :
            $min_spec );

$thr_rms = ( defined( $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_RMS_THRESHOLD" ) ) ?
             $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_RMS_THRESHOLD" )       :
             $thr_rms );

# Convert list of standard-deviation clip levels to an array.
my @clips = split( ',', $linear_clip );

# Constrain parameters to allowed values.
# ---------------------------------------

# Deal with the various options specifying the emission regions.
my $auto_emission = 0;
my $emission_count = 0;
my $user_region = 0;
my ( @allbounds, @emission_bounds );
my ( @baseline_bounds );

if ( lc( $emission_mask ) =~ /auto/ ) {
   $auto_emission = 1;

} elsif ( lc( $emission_mask ) =~ /base/ ) {

# Validate baseline-region syntax and conveet from baseline bounds to
# emission bounds leaving tokens for the first and last bounds.
   if ( defined( $b_regions ) ) {
      foreach ( @regions ) {
         if ( /:/ ) {
            my ( $lowvel, $uppvel ) = split( ":", $_ );
            $user_region = 1;
            push @baseline_bounds, $lowvel;
            push @baseline_bounds, $uppvel;
         } else {
            $user_region = 0;
            last;
         }
      }

      if ( ! $user_region ) {
         orac_err "Supplied baseline extents have invalid format\n" .
                  "Syntax is <lower1>:<upper1>,<lower2>:<upper2>,...\n";
      }

# Sort so there lower and upper bounds can be tacked on, if necessary.
# Assume that the user has not set overlapping bounds.
      @baseline_bounds = sort { $a <=> $b } @baseline_bounds;
      push @emission_bounds, "lb";
      push @emission_bounds, @baseline_bounds;
      push @emission_bounds, "ub";
   }

} else {
   if ( ref( $emission_mask ) eq 'ARRAY' ) {
      $emission_mask = join ",", @$emission_mask;
   }
   $emission_mask =~ tr/["']+//d;
   @allbounds = split( /,/, $emission_mask );
   $emission_count = scalar( @allbounds );

   foreach ( @allbounds ) {
      my @e_bounds = split( /:/, $_ );

# A single value means use this width symmetric about zero.  Ensure
# that a round number like 25 km/s is interpreted by the NDF section as
# a velocity not pixels by giving it a decimal place.
      if ( scalar( @e_bounds ) == 1 ) {
         my $halfwidth = sprintf( "%.1f", 0.5 * $e_bounds[0] );
         push @emission_bounds, -$halfwidth;
         push @emission_bounds, $halfwidth;
      } else {
         foreach ( @e_bounds ) {
            if ( /^[+-]?\d+$/ ) { $_ = sprintf( "%.1f", $_ ) }
            push @emission_bounds, $_;
         }
      }
   }
}

# Smaller than this give poorer results empirically.
$smooth_scale = max( 51, $smooth_scale );
$min_spec = max( 50, $min_spec );

# Sigma clipping levels should not decrease. Do not set the initial
# threshold too low lest we exclude acceptable but slightly deviant
# detectors in an otherwise good set.
my @clip_sigma = ();
my $last = 2.0;
foreach ( @clips ) {
   $_ =~ tr/["']+//d;
   push @clip_sigma, max( $last, $_ );
}

my $sigma_clip = ( defined( $thr_rms ) ) ? 0 : 1;
$thr_rms = max( 0.02, $thr_rms ) if ( ! $sigma_clip );

# Heading for the commentary
# ==========================
orac_say "\n\nReject receptors entirely affected by low-frequency noise";
my $underline = "-" x 77;
orac_say "$underline\n";

my $ORAC_STATUS;

# Are there sufficient spectra?
# =============================
#
# First determine if there are sufficient spectra to do a meaningful
# analysis.  Sum through all the files, but almost certainly if there is
# more than one file, there are sufficient spectra.  The default limit is
# arbitrary trying to permit removal of bad spectra in small rasters.
_GET_NUMBER_OF_SPECTRA_
my $no_spec = $_GET_NUMBER_OF_SPECTRA_{COUNT};
if ( $no_spec < $min_spec ) {
   orac_warn "Too few spectra ($no_spec) for low-frequency-interference analysis.  The minimum is $min_spec.\n";
   goto RETURN;
}

# Form arrays of bad detectors.
# =============================

# The default argument of $Cal->bad_receptors is "INDEXORMASTER".  However,
# the master index is far too underpopulated and can lead to picking an
# entry that is months before or after the date of the observation being
# processed.  Valid receptors can then be rejected and bad ones included.
# While this could be circumvented, such as making a private
# $ORAC_DATA_CAL/index.bad_receptors and enter a null (H14) entry if
# a night has no bad receptors.  A better technique is to use the
# -calib bad_receptors command-line option, through which one can also
# supply a list of bad receptors directly.  Here we specify INDEX to only
# use the pipeline-generated bad receptors.
#
# The reading of INDEX also sets up the survey (survey_br).
$Cal->bad_receptors( "INDEX" );
my @baddets = $Cal->bad_receptors_list;
orac_say( "Receptors disabled by the calibration system: " . join( ",", sort @baddets ) );

my @bad_receptors;
my @bad_receptors_local;
my @bad_receptors_uniq;
my @receptors;

# Specify output and temporary filenames.
# =======================================

# Store the name of the first file in the list for the index.qa file.
my $osuffix = "_bllmasked";
my ( $first_file_in, $first_file_out ) = $Frm->inout( $osuffix, 1 );

my $temp1file = new ORAC::TempFile( 0 );
my $temp2file = new ORAC::TempFile( 0 );
my $temp3file = new ORAC::TempFile( 0 );
my $temp4file = new ORAC::TempFile( 0 );
my $temp5file = new ORAC::TempFile( 0 );
my $temp6file = new ORAC::TempFile( 0 );
my $temp7file = new ORAC::TempFile( 0 );
my $temp8file = new ORAC::TempFile( 0 );

# Form the time-collapsed profiles for each subband.
# ==================================================

# The profile for the whole observation, not just subscans is needed.
# otherwise some transient bad baselines in a chunk, especially in
# the last can look relatively worse, and hence the whole receptor
# is incorrectly removed.  Instead those should be left for
# _FLAG_LOWFREQ_INTERFERENCE_SPECTRA_ to filter.  Manage hybrid
# subbands independently because each subband covers different
# spectral ranges not times.
my $params;
my @mean_over_time;

# Form separate Frames each with a common SUBSYSNR (subband index)
# value.
my @subband_Frms;
if ( defined( $Frm->uhdr( "MERGED_HYBRID" ) ) ) {
   push @subband_Frms, $Frm;
} else {
   my @subband_key = ( 'SUBSYSNR' );
   @subband_Frms = $Frm->subfrms( @subband_key );
}
my $nsubsys = scalar( @subband_Frms );

# Loop through all subsystems forming a representative spectrum for each.
# Normally there will be just one band.
foreach my $subsys ( 0 .. $nsubsys - 1  ) {
   my $sum_times = 0;
   my $first = 1;
   my $sum_over_time;

# Process each subband independently.
   my $Frm = $subband_Frms[$subsys];

   foreach my $i ( 1 .. $Frm->nfiles ) {

# Set/get filenames.
      my ( $in, $mot ) = $Frm->inout( "_mot", $i );

      if ( $first ) {
         orac_say( "Perform bad-baseline detection comparing trend with linear fit for $in." );
         push @mean_over_time, $mot;
         $sum_times = 0;
      }

     _GET_DIMENSIONS_ FILE=$in
      my $dims = $_GET_DIMENSIONS_{DIMS};
      my $norm = $dims->[2];
      $sum_times += $norm;

# Collapse time axis using a clipped mean to form average spectrum for
# each detector.  Although would like to use variance weighting, the
# covariance matrix becomes huge.
      orac_say( "Collapsing time-series cube..." );
      $params = "in=$in out=$temp1file estimator=Cmean clip=2.0";
      $params .= " axis=time trim wlim=0.0 variance=false";
      $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Form weighted sum of the profiles.
      $Mon{'kappa_mon'}->obeyw( "cmult", "in=$temp1file scalar=$norm out=$temp2file" );

# Start summming for the next subband.
      if ( $first ) {
         $sum_over_time = new ORAC::TempFile( 0 );
         $params = "in=$temp2file out=$sum_over_time";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
         $first = 0;

# Add to the existing sum over spectra for the current subband.
      } else {
         $params = "in1=$sum_over_time in2=$temp2file out=$temp3file";
         $Mon{'kappa_mon'}->obeyw( "add", "$params" );

         $params = "in=$temp3file out=$sum_over_time";
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
      }
   }

   if ( defined( $sum_times ) && $sum_times > 0 ) {

# Now we have the weighted mean spectra by receptor and subband.
      $params = "in=$sum_over_time scalar=$sum_times out=$mean_over_time[-1]";
      $Mon{'kappa_mon'}->obeyw( "cdiv", "$params" );
   }
}

# For hybrid mode each file covers separate spectral range rather
# than being the time series broken into chunks.
foreach my $i ( 1 .. $nsubsys ) {

# Form residuals from linear baseline.
# ====================================

   my ( $in, $in_th ) = $Frm->inout( "_despk", $i );
   my $mot = $mean_over_time[$i-1];

   _GET_DIMENSIONS_ FILE=$mot
   my $dims = $_GET_DIMENSIONS_{DIMS};

# Apply threshold to exclude spikes in the spectra.
   my $semirange = 20;
   orac_say( "  Thresholding the spectra at +/- $semirange to exclude spikes." );
   $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$mot order" );
   ( $ORAC_STATUS, my $median ) = $Mon{'kappa_mon'}->get( "stats", "median" );
   if ( $median != VAL__BADD ) {
      my $thr_low = sprintf( "%.1f", $median - $semirange );
      my $thr_high = sprintf( "%.1f", $median + $semirange );

      $params = "in=$mot out=$in_th thrlo=$thr_low newlo=bad thrhi=$thr_high newhi=bad";
      $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
   } else {
      orac_warn "Unable to threshold spikes as the median of the spectra is bad\n";
      $in_th = $mot;
   }

   $Frm->push_intermediates( $mot );

# Exclude emission regions from analysis.
# ---------------------------------------

# Record the current Frame.
   _SET_TAG_ GROUP=0 TAG=BEFORE_EMISSION_MASK

# We need the dimensions of the input file to grow the mask.
   _GET_DIMENSIONS_ FILE=$in_th
   my $lbnd = $_GET_DIMENSIONS_{LBOUND};
   my $ubnd = $_GET_DIMENSIONS_{UBOUND};

# Mask the emission regions to exclude narrow astronomical lines, but
# even that has wings.  Allow for variable spectral range by using a
# velocity range.
   if ( $auto_emission ) {

# Use a pre-calculated mask indicating approximately the velocities where
# emission exists, if one exists.
      _RETRIEVE_TAG_ GROUP=0 TAG=APPROX_EMISSION_$i
      my $tag_status = $_RETRIEVE_TAG_{STATUS};
      if ( $tag_status ) {
         my $maskspectrum = $Frm->file;

         my $maskimage = new ORAC::TempFile( 0 );

# Grow the spectrum mask to the time-collapsed image.  We use the first
# axis as is, and grow for each receptor.
         orac_say "Grow and apply emission-mask $maskspectrum\n";
         $params = "in=$maskspectrum out=$maskimage axes=[1,0] ";
         $params .= "lbound=" . $lbnd->[1] . " ubound=" . $ubnd->[1];
         $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Apply the mask.
         $params = "in1=$in_th in2=$maskimage out=$temp5file";
         $Mon{'kappa_mon'}->obeyw( "add", "$params" );

      } else {

# Switch this off, as presumably the recipe has not called
# _LOCATE_EMISSION_APPROX and use the default range.  Since
# emission bounds were chosen for a reason extend the normal default
# range.
         $auto_emission = 0;
         $emission_count = 1;
         @emission_bounds = ( "-50.0", "50.0" );
         orac_warn "The approximate emission mask has not been calculated " .
                   "(possible programming error).  Using the default range.";
      }
   }

# Reset to the Frame present as we entered this primitive.
   _RETRIEVE_TAG_ GROUP=0 TAG=BEFORE_EMISSION_MASK

# Mask out the central region to exclude narrow astronomical line, but
# even that has wings.  Allow for variable spectral range by using a
# velocity range.
   if ( $emission_count == 1 && ! $auto_emission ) {
      orac_say( "  Masking the velocity range $emission_bounds[0] to $emission_bounds[1] km/s to exclude astronomical lines." );
      my $chpix_section = "$emission_bounds[0]:$emission_bounds[1],,";
      $params = "in=$in_th out=$temp5file section='$chpix_section' newval=bad";
      $Mon{'kappa_mon'}->obeyw( "chpix", "$params" );

   } elsif ( ! $auto_emission ) {

# Substitute the spectral bounds for the dummy values so that the
# emission is deemed to extend to the edges.
      if ( $user_region ) {
         my $direction = ( $ubnd->[0] - $lbnd->[0] ) / abs( $ubnd->[0] - $lbnd->[0] );
         if ( $direction > 0 ) {
            $emission_bounds[0] = $lbnd->[0];
            $emission_bounds[-1] = $ubnd->[0];
         } else {
            $emission_bounds[0] = $ubnd->[0];
            $emission_bounds[-1] = $lbnd->[0];
         }
      }

      orac_say( "  Masking the following velocity ranges to exclude astronomical lines:" );
      orac_say "  " . join ",", ( grep { defined } map { $_ % 2 ? undef : join ":",
               $emission_bounds[$_], $emission_bounds[$_+1]}0..$#emission_bounds );

# We have the regions in velocities but the masking primitive which
# runs ARDMASK works in pixels.  First create an NDF containing just
# the spectral axis.
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in_th(,~1) out=$temp4file trim trimwcs" );

      my @pixel_emission;
      $params = "framein=dsbspectrum frameout=pixel ndf=$temp4file ";
      for ( my $j = 0; $j <= $#emission_bounds; $j++ ) {
         $Mon{'kappa_mon'}->obeyw( "wcstran", "$params posin=$emission_bounds[$j]" );
         ( $ORAC_STATUS, my $pixel_coord ) = $Mon{'kappa_mon'}->get( "wcstran", "posout" );
         push @pixel_emission, $pixel_coord;
      }

# Store the thresholded file for the masking primitive.
      {
         my $Frm = new $Frm;
         $Frm->file( $in_th );

# Further indirection appears to be needed for passing the velocity
# ranges to  _MASK_BASELINE_REGIONS_.
         my @em_bounds = \@pixel_emission;

         _MASK_SINGLE_AXIS_REGIONS_ INVERSE=0 USEAXIS=1 REGIONS=\@em_bounds SUFFIX=em2mask

# Capture the masked file, and default to remove at the end of processing.
         $temp5file = $Frm->file;
      }
      $Frm->push_intermediates( $temp5file );
   }

# Permit file tidying of the  thresholded file.
   $Frm->push_intermediates( $in_th );

# Find the trends in the backgrounds.
# -----------------------------------
# Find the trends in the background of each receptor.  This step prevents the
# rms from a baseline fit being swamped by the noise.  The goal is to find
# whether the linear fit is a good match to global shape of the baseline.  This
# aims to identify ripples or turned-up ends of the spectra.  Note that FINDBACK
# Parameter BOX should only supply elements up to the number of significant
# dimensions.
   orac_say( " Determine the smooth trends of the spectra using a filter width of $smooth_scale pixels." );
   my $boxparam = "[$smooth_scale,1]";
   if ( $dims->[1] == 1 ) { $boxparam = "$smooth_scale" }
   $params = "in=$temp5file out=$temp6file box=$boxparam sub=false accept";
   my $FINDBACK_STATUS = $Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# FINDBACK can fall over, but this should not be fatal.
   if ( $FINDBACK_STATUS != ORAC__OK ) {
      if ( starversion_gt( 'CUPID', 'V1.6' ) && $FINDBACK_STATUS == 262703466 ) {
         orac_say "Unable to find the background level due to insufficient good data.";
      }
      orac_say "Attempting to continue using block smoothing.";
      $params = "in=$temp5file out=$temp6file box=$boxparam estimator=median";
      $Mon{'kappa_mon'}->obeyw( "block", "$params" );
   }

# Subtract linear baselines from smoothed spectrum for each detector.
   orac_say( " Fit linear baselines and subtract these from the trends." );
   $params = "in=$temp6file out=$temp7file modifyin=false subtract auto";
   $params .= " order=1 axis=spec method=single";
   $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

# Get average rms deviations for each receptor not in the bad_receptors list.
# ===========================================================================

   my %receptor_stats;
   my %receptor_rms;
   my $array_stats = new Statistics::Descriptive::Sparse;
   my $array = new JCMT::ACSIS::Array( File => $temp7file );

# Form set of receptors that are not bad in the master list.
   my %keep;
   @keep{ $array->receptors } = ( );
   delete @keep{ @baddets };
   @receptors = keys %keep;

   foreach my $receptor ( @receptors ) {
      my $pixel = $array->pixel( $receptor );
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp7file(,$pixel)" );
      ( $ORAC_STATUS, my $nel ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

# Calculate rms from the linear fit for the current receptor.  Exclude
# the ends of each spectrum where the noise increases dramatically,
# and could swamping the signal being measured.
      if ( $nel > 0 ) {
         $params = "ia=$temp7file(,$pixel) out=$temp8file exp='IA*IA/$nel'";
         $Mon{'kappa_mon'}->obeyw( "maths", "$params" );
         $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp8file(~85%,)" );
         ( $ORAC_STATUS, my $ms ) = $Mon{'kappa_mon'}->get( "stats", "total" );
         my $rms = sqrt( $ms );

         if ( ! defined( $receptor_stats{$receptor} ) ) {
            $receptor_stats{$receptor} = new Statistics::Descriptive::Sparse;
         }

         if ( $rms > 0 ) {
            $receptor_stats{$receptor}->add_data( $rms );
         }
      }
   }

   foreach my $receptor ( keys %receptor_stats ) {
      if ( $receptor_stats{$receptor}->count != 0 ) {
         $receptor_rms{$receptor} = $receptor_stats{$receptor}->mean();
      } else {
         $receptor_rms{$receptor} = 'bad';
      }
   }

   my $type = "RMS from linear baseline";
   _PRETTYPRINT_RECEPTOR_QA_ HASH=\%receptor_rms TYPE=$type

# Identify receptors with outlying deviations from linearity.
# ===========================================================

# Measure the median and standard deviation of the residuals from the
# linear trend across the detectors.
   my @values;
   my $sigma;
   my $loop = 1;
   my $i = 0;

   while ( $i <= $#clip_sigma && $loop ) {
      my $stat = Statistics::Descriptive::Full->new();

# Assume no rejection.
      $loop = 0;

# Extract the rms values from the hash.
      while ( my ($k,$v) = each %receptor_rms ) {
         if ( $v ne "bad" ) { push @values, $v }
      }

# Remove the flagged values before adding the values to the statistics
# object.
      $stat->add_data( @values );

      my $threshold;
      if ( $sigma_clip ) {
         if ( $stat->count != 0 ) {
            $sigma = $stat->standard_deviation();
            $median = $stat->median();
         }

# Flag those detectors whose rms deviation from the linear trend exceeds
# median plus the current sigma-clipping level.  This may cut too much
# if all the baselines are excellent, but one is a little worse yet
# otherwise fine.  Thus impose an absolute cutoff.
         $threshold = max( $min_rms, $median + $clip_sigma[$i] * $sigma );
         orac_say( " Turning off detectors with spectral rms from the trend above " . sprintf( "%.3f", $threshold ) );
         orac_say( " corresponding to the median plus $clip_sigma[$i] standard deviations." );

      } else {
         $threshold = $thr_rms;
         orac_say( " Turning off detectors with spectral rms from the trend above " . sprintf( "%.3f", $threshold ) . "." );
      }

# This would be cleaner if there were a remove_data method in
# Statistics::Descriptive::Full.
      while ( my ($k,$v) = each %receptor_rms ) {
         if ( $v ne 'bad' ) {
            if ( $v > $threshold ) {
               push @bad_receptors_local, $k;
               $receptor_rms{$k} = 'bad';

# Continue iteratively clipping as a detector has been flagged for
# removal, unless a single threshold is being used.
               $loop = $sigma_clip;
            }
         }
      }
      $i++;
      undef $stat;
      undef @values;
   }

   $in = $Frm->file( $i );
   @bad_receptors_local = sort( @bad_receptors_local );
   orac_say( " List of bad receptors for file $in: " .
             join( ",", @bad_receptors_local ) );

# Add the bad receptors for this frame to the master list.
   foreach my $receptor ( @bad_receptors_local ) { push ( @bad_receptors, $receptor ) }

# Make sure each bad detector is mentioned only once.
   my %seen = ();
   @bad_receptors_uniq = ();

   foreach my $item ( @bad_receptors ) {
      push( @bad_receptors_uniq, $item ) unless $seen{$item}++;
   }
}

if ( scalar( @bad_receptors_uniq ) == scalar( @receptors ) ) {
   orac_err "All receptors have excessive measured non-linearity, probably due to excessive noise.\n";
   $ORAC_STATUS = ORAC__BADFRAME;
}
orac_print "\n";

# Create masked cube.
# ===================

if ( $mask && scalar( @bad_receptors_uniq ) > 0 ) {
   foreach my $i ( 1 .. $Frm->nfiles ) {
      my ( $in, $out ) = $Frm->inout( $osuffix, $i );

# Retrieve pixel bounds.
      _GET_DIMENSIONS_ FILE=$in
      my $lbound = $_GET_DIMENSIONS_{LBOUND};
      my $ubound = $_GET_DIMENSIONS_{UBOUND};

# Create the ARDMASK for the given receptors and file.
      my $array = new JCMT::ACSIS::Array( File => $in );
      my @pixels = $array->pixel( @bad_receptors_uniq );

      open my $ardmask_fh, ">", "ardmask$$.dat" or orac_term "Could not open ARDMASK input file ardmask$$.dat: $!\n";
      print $ardmask_fh "DIMENSION(3)\n";

      foreach my $pixel ( @pixels ) {
         my $str = "RECT(" . ( join ",", $lbound->[0] - 1,
                                         $pixel - 1,
                                         $lbound->[2] - 1,
                                         $ubound->[0],
                                         $pixel,
                                         $ubound->[2]
                             ) . ")\n";
         print $ardmask_fh $str;
      }
      close $ardmask_fh;

# Mask the regions.
      $Mon{'kappa_mon'}->obeyw( "ardmask", "in=$in ardfile=ardmask$$.dat out=$out" );
      unlink( "ardmask$$.dat" );

# Provide commentary.
      orac_say "$in to $out:";
      orac_say " Masked receptor" . ( scalar( @pixels ) > 1 ? "s" : "" ) . " " . ( join ",", sort @bad_receptors_uniq ) . ".";

# Set the product.
      $Frm->product( "Non-linear baseline masked" );

# Update the Frm object.
      $Frm->file( $i, $out );

# Display if necessary.
      $Display->display_data( $Frm ) if defined $Display;
   }
}

# Update the bad-receptor calibration.
# ====================================

my $lofreq = $Frm->hdr( "LOFREQS" );
my $survey_br = defined( $Frm->uhdr( "SURVEY_BR" ) ) ? $Frm->uhdr( "SURVEY_BR" ) : 'Telescope';

# Sort out bad receptors.  They'll be added to the calibration system
# for either the specific survey or for everything, and only for the
# current LOFREQ +/- 1 GHz.
if ( scalar( @bad_receptors ) > 0 && defined( $lofreq ) ) {
   my %recep_hash = ( %{$Frm->hdr },
                      LOFREQ_MAX => $lofreq + 1,
                      LOFREQ_MIN => $lofreq - 1,
                      DETECTORS => ( join ',',@bad_receptors_uniq ),
                      SURVEY_BR => $survey_br,
                    );

   orac_say( " Masking receptor(s) " .
             join( ",", sort @bad_receptors_uniq ) . " for survey $survey_br." );

   $Cal->bad_receptors_qa_index->add( $first_file_in, \%recep_hash );

}

# Tidy-up output.
orac_print "\n";

RETURN:
