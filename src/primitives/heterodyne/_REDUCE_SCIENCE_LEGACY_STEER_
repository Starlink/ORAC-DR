# -*-cperl-*-

=head1 NAME

=head1 DESCRIPTION

=head1 ARGUMENTS

=over 4

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

orac_say( "\nRecipe parameter overrides:", "yellow" );

# This variable is used to reform comma-separated lists turned into
# stringified array reference.  (Currently not used.)
my $commasep;

# Determine if this is a wide or narrow bandwidth observation.  There
# are different recipe parameters for below 1000Mhz, and 100Mhz and
# above.
my $bwmode = defined( $Frm->hdr( "BWMODE" ) ) ? $Frm->hdr( "BWMODE" ) : "250MHzx4096";
$bwmode =~ s/MHzx\d+$//;
my $wide = $bwmode > 999;

# Put recipe parameters into our uhdr.
my $baseline_order = 1;
$Frm->uhdr( "RECPAR_BASELINE_ORDER", 1 );
orac_say( " Setting baseline order to $baseline_order.", "yellow" );

my $chunksize = 10000;
$Frm->uhdr( "RECPAR_CHUNKSIZE", $chunksize );
orac_say( " Maximum chunksize to form group cube is ${chunksize}MB.", "yellow" );

my $logflat = 1;
my $applyflat = 0;
my $flat_method = "itersum";
$Frm->uhdr( "RECPAR_FLATFIELD", $logflat );
$Frm->uhdr( "RECPAR_FLAT_METHOD", $flat_method );
$Frm->uhdr( "RECPAR_FLAT_APPLY", $applyflat );
orac_say( " Calculate but do not apply flat-fielding.  Use itersum method.", "yellow" );

my $fraction_bad = 0.5;
$Frm->uhdr( "RECPAR_FRACTION_BAD", $fraction_bad );
orac_say( " Setting maximum fraction of bad values allowed in an " .
          "observation or subscan to $fraction_bad.", "yellow" );

my $moments = "integ";
$Frm->uhdr( "RECPAR_MOMENTS", $moments );
my $str = " Will create $moments moments map.";

my $trim_percentage = 2.75;
$Frm->uhdr( "RECPAR_TRIM_PERCENTAGE", $trim_percentage );
orac_say( " Setting spectral trimming to $trim_percentage percent.", "yellow" );


# High-frequency interference
# ===========================

# This assumes that default is true without setting the corresponding
# recipe parameter.
my $highfreq_interference = 1;
$Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE", $highfreq_interference );
orac_say( " Will detect and mask spectra with high-frequency interference.", "yellow" );

if ( $highfreq_interference ) {
   my $highfreq_interference_edge_clip = "2.0,2.0,2.5,3.0";
   $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP", $highfreq_interference_edge_clip );
   orac_say( "    Setting clipping levels to determine dispersion in noise profile to $highfreq_interference_edge_clip standard deviations.", "yellow" );

   my $highfreq_interference_thresh_clip = 4.0;
   $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP", $highfreq_interference_thresh_clip );
   orac_say( "    Setting clipping level to select bad spectra to $highfreq_interference_thresh_clip standard deviations.", "yellow" );

   my $highfreq_ringing = 1;
   $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING", $highfreq_ringing );
   orac_say( "    Filtering of spectra with ringing in H07.", "yellow" );
}

# Low-frequency inteference
# =========================

# This assumes that default is true without setting the corresponding
# recipe parameter.
my $lowfreq_interference = 1;
$Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE", $lowfreq_interference );
orac_say( " Will detect and mask spectra with low-frequency interference.", "yellow" );

my $lowfreq_interference_edge_clip = "2.0,2.0,2.5,3.0";
if ( $lowfreq_interference ) {
   $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_EDGE_CLIP", $lowfreq_interference_edge_clip );
   orac_say( "    Setting clipping levels to determine dispersion in noise profile to $lowfreq_interference_edge_clip standard deviations.", "yellow" );

   my $lowfreq_interference_thresh_clip = 3.0;
   $Frm->uhdr( "RECPAR_LOWFREQ_INTERFERENCE_THRESH_CLIP", $lowfreq_interference_thresh_clip );
   orac_say( "    Setting clipping level to select bad spectra to $lowfreq_interference_thresh_clip standard deviations.", "yellow" );
}

# The bad-baseline detections assume that the receptors supplied are
# not full of bad values.  So set a flag to hunt for such bad receptors
# that are not in the bad_receptors index, and add them to the index.
# Without the bad-baseline filtering the QA stage will pick these up.
# Other primitives may have set this flag already, so OR the current
# value with the existing value.
my $indexbad = $lowfreq_interference || $highfreq_interference;
if ( defined( $Frm->uhdr( "INDEX_BAD_RECEPTORS" ) ) ) {
   $indexbad = $indexbad || $Frm->uhdr( "INDEX_BAD_RECEPTORS" );
}
$Frm->uhdr( "INDEX_BAD_RECEPTORS", $indexbad );


# Baseline linearity for whole receptors
# ======================================

# This assumes that default is true without setting the corresponding
# recipe parameter.
my $linearity = 1;
$Frm->uhdr( "RECPAR_BASELINE_LINEARITY", $linearity );
orac_say( " Rejects receptors with mostly or all non-linear baselines.", "yellow" );

if ( $linearity ) {
   my $baseline_linearity_clip = "2.0,2.3,3.0";
   $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_CLIP", $baseline_linearity_clip );

   orac_say( "    Setting baseline clipping levels to $baseline_linearity_clip standard deviations.", "yellow" );

   my $baseline_linearity_rms = 0.08;
   $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_MINRMS", $baseline_linearity_rms );
   orac_say( "    Setting minimum rms non-linearity to $baseline_linearity_rms.", "yellow" );

   my $baseline_linearity_linewidth = "auto";
   $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_LINEWIDTH", $baseline_linearity_linewidth  );
   if ( lc( $baseline_linearity_linewidth ) =~ /auto/ ) {
      orac_say( "    Masking emission automatically.", "yellow" );
   } else {
      orac_say( "    Masking emission at $baseline_linearity_linewidth km/s.", "yellow" );
   }

   my $baseline_linearity_scalelength = 101;
   $Frm->uhdr( "RECPAR_BASELINE_LINEARITY_SCALELENGTH", $baseline_linearity_scalelength );
   orac_say( "    Setting smoothing scalength to $baseline_linearity_scalelength pixels.", "yellow" );

}

# MAKECUBE parameters
# ===================
my $pixel_scale = 6.44;
$Frm->uhdr( "RECPAR_PIXSIZE", $pixel_scale );
orac_say( " Setting pixel scale to $pixel_scale arcseconds per pixel.", "yellow" );

my $spread_method = "sincsinc";
$Frm->uhdr( "RECPAR_SPREAD_METHOD", uc( $spread_method ) );
orac_say( " Setting MAKECUBE spread method to $spread_method.", "yellow" );

my $spread_width = 0;
$Frm->uhdr( "RECPAR_PARAM1", $spread_width );
orac_say( " Setting MAKECUBE spread width to $spread_width arcseconds.", "yellow" );

my $spread_fwhm_or_zero = 2;
$Frm->uhdr( "RECPAR_PARAM2", $spread_fwhm_or_zero );
orac_say( " Setting MAKECUBE spread to zero to $spread_fwhm_or_zero arcseconds.", "yellow" );

# Store the default legacy QA parameters.
$Frm->uhdr( "LEGACY", 1 );
$Grp->uhdr( "LEGACY", 1 );
$Frm->uhdr( "ORAC_SURVEY", "LEGACY" );
$Grp->uhdr( "ORAC_SURVEY", "LEGACY" );
my $getqa =  $Cal->qaparams;
orac_say( " Obtained the legacy QA parameters in $getqa.", "yellow" );

