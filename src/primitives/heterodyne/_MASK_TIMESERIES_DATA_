# -*-cperl-*-

=head1 NAME

_MASK_TIMESERIES_DATA_

=head1 DESCRIPTION

This primitive applies a time-series mask to time-series data to mask
out emission.

=head1 ARGUMENTS

=over 4

=item SUFFIX = STRING (Given)

The suffix to apply to the output masked file.  ["msk"].

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS data.

=item *

The input masks are recorded via Group internal header TIMESERIES_MASKS.

=item *

The names of the output files are stored the Group internal header
MASKED_TIMESERIES.

=item *

Neither the Frame nor Group object are updated.  However, the output
files are logged as group intermediates.

=back

=head1 OUTPUT DATA

=over 4

=item *

The baselined timeseries data with the suffix given by Argument SUFFIX.

=back

=head1 TASKS

KAPPA: ADD.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2024 Science and Technology Facilities Council.  All
Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $suffix = get_prim_arg( $_PRIM_ARGS_, "SUFFIX", "msk" );
my %masked;

foreach my $Frm ( $Grp->members ) {
  foreach my $i ( 1 .. $Frm->nfiles ) {

# Get input information.
    my ( $in, $out ) = $Frm->inout( $suffix, $i );
    my $masks = $Grp->uhdr( "TIMESERIES_MASKS" );
    my ( $rootname, $suffix ) = split /_([^_]+)$/, $in;
    my $key = $rootname . "_" . $i;
    my $mask = $masks->{$key};

# Add the mask to the input file.
    $Mon{'kappa_mon'}->obeyw( "add", "in1=$in in2=$mask out=$out" );

    # Report to user.
    orac_print "$in to $out:\n";
    orac_print " Masked non-baseline regions using $mask.\n";

# Record the masked timeseries cube.
    $masked{$in} = $out;

# Since the files method is not used, request that this file be deleted once
# group processing completed.
    $Grp->push_intermediates( $out );
  }
}

$Grp->uhdr( "MASKED_TIMESERIES", \%masked );

# Tidy-up output.
orac_print "\n";
