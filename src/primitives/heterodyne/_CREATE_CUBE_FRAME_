# -*-cperl-*-

=head1 NAME

_CREATE_CUBE_FRAME_ -- Create a cube from a time-series ACSIS
observation and stuff it in the Frm object.

=head1 DESCRIPTION

This primitive takes a time-series ACSIS cube and, using
SMURF/MAKECUBE, transforms it into a spatial/spectral cube.

=head1 ARGUMENTS

=over 4

=item BYTES_PER_PIXEL = INTEGER (Given)

The number of bytes per pixel. [4]

=item CHUNK = LOGICAL (Given)

Whether or not to permit chunking.  This is probably only needed to be
set true if processing final frames for HEALPix reductions.  [0]

=item CHUNKSIZE = INTEGER (Given)

The maximum sum of file sizes in megabytes of files to process
simultaneously in MAKECUBE to avoid a timeout.  The choice is
affected by processor speed and memory.  The minimum allowed value
is 100.

This argument can be overridden by the RECPAR_CHUNKSIZE uhdr via the
recipe parameter system.  [5120]

=item DETECTORS = STRING (Given)

A comma-separated list of detectors to use when creating the cube. If
blank or undefined, all detectors will be used. ['']

=item MAXSIZE = INTEGER (Given)

The maximum size, in megabytes, of the output cubes. This value does not
include extra information such as variance or weight arrays, FITS
headers, or any other NDF extensions.  This argument can be overridden
by the RECPAR_MAXSIZE uhdr via the recipe parameter system.  [512]

=item OVERRIDE = LOGICAL (Given)

Whether or not specific arguments can be overridden by the recipe
parameter system. [1]

=item PARAM1 = REAL (Given)

The first parameter required by the spreading method. This parameter
is required by all methods, and specifies how many arcseconds on
either side of the output position are to receive contributions from
the input pixel. A value of zero indicates that a suitable number
should be calculated automatically.

This argument can be overridden by the RECPAR_PARAM1 uhdr via the
recipe parameter system.  [0]

=item PARAM2 = REAL (Given)

The second parameter required by the spreading method, but only for
SombCos, Gauss, SincSinc, SincCos, and SincGauss schemes. For the
SombCos, SincSinc, and SincCos schemes, it specifies the number of
arcseconds at which the envelope of the function goes to zero. The
minimum value is 1.0 pixels, and the run-time default value is 2.0
pixels.  For the Gauss and SincGauss scheme, it specifies the
full-width at half-maximum (FWHM) of the Gaussian envelope.  The
minimum value is 0.1 pixels, and the run-time default is 1.0
pixels. Note that these numbers are given in pixels and this parameter
takes the number of requested arcseconds. This is done because the
pixel scale could be automatically determined from the data.

This argument can be overridden by the RECPAR_PARAM2 uhdr via the
recipe parameter system. []

=item PIXSIZE = REAL (Given)

The output pixel scale. If not defined, this value is automatically
determined from the data.

This argument can be overridden by the RECPAR_PIXSIZE uhdr via the
recipe parameter system.  []

=item PRODUCT = STRING (Given)

Override the default "cube" product designation.

=item REFERENCE = STRING (Given)

The name of an NDF spectral cube that defines the grid on to which the
output group spectral cube will be aligned.  This rarely used option
permits observations taken with different spectral and/or spatial
resolutions to be combined later.  The reference cube is normally one
with wider spectral channels.  This facility does not operate if the
reference NDF is undefined or the NDF does not exist or if the
observation is hybrid.  A warning is issued if the current group data
and the reference NDF do not have matching molecules and transitions.

This argument can be overridden by the RECPAR_REFERENCE_PPV uhdr via
the recipe parameter system.  [undef]

=item SECTION = STRING (Given)

Apply this NDF section specification to files listed for processing with
makecube. []

=item SPREAD = STRING (Given)

The interpolation method to use when regridding the cube. This can be
any of those allowed by MAKECUBE, listed in the SPREAD
parameter.

This argument can be overridden by the RECPAR_SPREAD_METHOD uhdr via the
recipe parameter system. ['nearest']

=item SUFFIX = STRING (Given)

Override the default "_cube" suffix with a new value. This is useful
when processing an iterative result where we do not want to improve
the initial product (the whole point being to retain it).

=item SYSTEM = STRING (Given)

The celestial coordinate system for the output cube. Can be any one of
ICRS, GAPPT, FK5, FK4, FK4-NO-E, AZEL, GALACTIC, or ECLIPTIC. A
special value of TRACKING can also be given, in which case the system
used will be that used as the tracking system during the observation.

If this argument is not defined, then the system is determined from
the data and is typically set to 'tracking'. The only case where this
does not apply is if the observation is a scan and the scanning was
done in AZ/EL, in which case the system will be set to 'AZEL'.

This argument can be overridden by the RECPAR_SYSTEM uhdr via the
recipe parameter system. [undef]

=item TAG = BOOLEAN (Given)

Whether or not to tag the resulting cube(s) as 'reduced'. See the
_TAG_AS_REDUCED_PRODUCT_ primitive. [0]

=item TILE = LOGICAL (Given)

Whether or not to break the spectral cubes into tiles.  The default
depends on whether JSA tiling is being used, in which case the
default is 0 because these options are mutually exclusive.  The
default is 1 otherwise.  []

=item TILEBORDER = INTEGER (Given)

The size of the border to be added to tiles. This is used when
smoothing the cube in spatial extent in later processing, so as to not
add edge effects. [0]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS.

=item *

If MAKECUBE cannot create a VARIANCE component, say because of nonsense
Tsys values, the primitive creates one using the noise in the spectra.
It first removes the slowly varying signal, filters noise spikes,
leaving the noise, which is then copied back into the created spectral
cube.

=back

=head1 OUTPUT DATA

=over 4

=item *

A cube whose filename is of the form aYYYYMMDD_NNNNN_SS_cube.sdf,
where YYYYMMDD is the UT date, NNNN is the zero-padded observation
number, and SS is the zero-padded susbystem number.

=item *

The output cubes are logged as group intermediates except _cube which
are JSA products.

=back

=head1 TASKS

KAPPA: BLOCK, MATHS, NDFTRACE, SETVAR, STATS;
SMURF: MAKECUBE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2010, 2012-2015, 2019 Science and Technology Facilities Council.
Copyright (C) 2006-2007 Particle Physics and Astronomy Research Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Definitions
# ===========

use ORAC::Constants qw/ :badvalues /;
use Starlink::HDSPACK qw/ create_hdsobj copy_hdsobj /;

#  Define the scale factor to determine the pixel size in arcsec given
#  the observed frequency in Ghz.  This assumes a Nyquist sampling of
#  four pixels across the beam and a standard radiation pattern.  The
#  beam size is 1.2 * lambda / D radians, where D is the JCMT aperture of
#  15m.  Thus the factor is 1.2 * c/10**9 * ( 3600*180/pi ) / (4 * 15),
#  where c is the velocity of light in m/s.  The value has more
#  precision than needed, but it shows that the value is floating point.
use constant FREQ2PIXSIZE => 1236.7;
use constant MEGABYTE => 1048576;
use constant JSACHUNK => 1000;

# Deal with parameters.
# =====================

my $bytes_per_pixel = get_prim_arg( $_PRIM_ARGS_, "BYTES_PER_PIXEL", 4 );
my $maxsize = get_prim_arg( $_PRIM_ARGS_, "MAXSIZE", 512 );
my $spread = uc( get_prim_arg( $_PRIM_ARGS_, "SPREAD", 'nearest' ) );
my $param1 = get_prim_arg( $_PRIM_ARGS_, "PARAM1", 0 );
my $param2 = get_prim_arg( $_PRIM_ARGS_, "PARAM2", undef );
my $pixsize = get_prim_arg( $_PRIM_ARGS_, "PIXSIZE", undef );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", 0 );
my $chunksize = get_prim_arg( $_PRIM_ARGS_, "CHUNKSIZE", 5120 );
my $jsatile = get_prim_arg( $_PRIM_ARGS_, "JSATILE", 0 );
my $refppv = get_prim_arg( $_PRIM_ARGS_, "REFERENCE", undef );
my $tile = get_prim_arg( $_PRIM_ARGS_, "TILE", ! $jsatile );
my $chunk = get_prim_arg( $_PRIM_ARGS_, "CHUNK", 0 );
my $section = get_prim_arg( $_PRIM_ARGS_, "SECTION", '' );


my $detectors = ( defined( $_PRIM_ARGS_->{DETECTORS} ) ?
                  "'$_PRIM_ARGS_->{DETECTORS}'"        :
                  "''" );
my $suffix = get_prim_arg( $_PRIM_ARGS_, "SUFFIX", "_cube" );
my $system_arg = get_prim_arg( $_PRIM_ARGS_, "SYSTEM", undef );
my $product = get_prim_arg( $_PRIM_ARGS_, "PRODUCT", "cube" );
my $override = get_prim_arg( $_PRIM_ARGS_, "OVERRIDE", 1 );

# Override various parameters via the recipe parameter system.
if ( $override ) {
  $chunksize = ( defined( $Frm->uhdr( "RECPAR_CHUNKSIZE" ) ) ?
                 $Frm->uhdr( "RECPAR_CHUNKSIZE" )            :
                 $chunksize );
  $maxsize = ( defined( $Frm->uhdr( "RECPAR_CUBE_MAXSIZE" ) ) ?
               $Frm->uhdr( "RECPAR_CUBE_MAXSIZE" )            :
               $maxsize );
  $param1 = ( defined( $Frm->uhdr( "RECPAR_PARAM1" ) ) ?
              $Frm->uhdr( "RECPAR_PARAM1" )            :
              $param1 );
  $param2 = ( defined( $Frm->uhdr( "RECPAR_PARAM2" ) ) ?
              $Frm->uhdr( "RECPAR_PARAM2" )            :
              $param2 );
  $pixsize = ( defined( $Frm->uhdr( "RECPAR_PIXSIZE" ) ) ?
               $Frm->uhdr( "RECPAR_PIXSIZE" )            :
               $pixsize );
  $refppv = ( defined( $Frm->uhdr( "RECPAR_REFERENCE_PPV" ) ) ?
              $Frm->uhdr( "RECPAR_REFERENCE_PPV" )            :
              $refppv );
  $spread = ( defined( $Frm->uhdr( "RECPAR_SPREAD_METHOD" ) ) ?
              $Frm->uhdr( "RECPAR_SPREAD_METHOD" )            :
              $spread );
  $system_arg = ( defined( $Frm->uhdr( "RECPAR_SYSTEM" ) ) ?
                  $Frm->uhdr( "RECPAR_SYSTEM" )            :
                  $system_arg );
  $tile = ( defined( $Frm->uhdr( "RECPAR_TILE" ) ) ?
            $Frm->uhdr( "RECPAR_TILE" )            :
            $tile );
}

# Normal and JSA tiling are mutually exclusive.
$tile = $jsatile ? 0 : $tile;
$chunksize = max( 100, $chunksize );
$chunksize = JSACHUNK if $jsatile;

# Following _CREATE_CUBE_GROUP_, there is no need to keep the border
# as MAKECUBE deals with smoothing border internally.
my $tileborder = 0;

# Main processing begins here.
# ============================

# Create a list of input images.
my $out = $Frm->inout( $suffix );

$Frm->uhdr( "JSA_TILES", 1 ) if $jsatile;

my @files;
foreach my $i ( 1..$Frm->nfiles ) {
  my $in = $Frm->file( $i );
  push @files, $in;
}

my $inlist = write_file_list ( map {$_ . $section} @files );

# Fix the output filename to remove the subscan number.
$out =~ s/_\d{4}_/_/;

# Create the command-line parameters for MAKECUBE.
# ================================================

# This MAKECUBE command line will be assembled in this string.
my $params = '';

# Is there a reference cube to define the WCS, and is it permitted?
# Cope with the NDF file extension being present or not.
my $useref = 0;
if ( defined $refppv ) {
  $refppv .= ".sdf" if $refppv !~ /sdf$/;
  if ( -e $refppv ) {
    $useref = 1;
  } else {
    orac_warn "Reference file $refppv does not exist.  Continuing to " .
              "process without reference grid.\n";
  }
  if ( $Frm->uhdr( "ISHYBRID" ) ) {
    $useref = 0;
    orac_warn "Cannot currently use a reference file for hybrid data.\n";
  }
}

# Determine the MAKECUBE parameters based on the observation type.
my $type = lc( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) );

_GET_MAKECUBE_PARAMS_ TYPE=$type
my $mc_params = $_GET_MAKECUBE_PARAMS_{PARAMS};
my $mc_hash = $_GET_MAKECUBE_PARAMS_{HASH};
$mc_params .= " jsatiles" if $jsatile;

my ( $ppixsize, $crota );
my $autogrid = $mc_hash->{autogrid};
my $system = defined( $system_arg ) ? $system_arg : $mc_hash->{system};
my $badmask = $mc_hash->{badmask};
my $alignsys = $mc_hash->{alignsys};
my $ORAC_STATUS;

# Determine the grid from the reference file.
# -------------------------------------------
if ( $useref ) {
  orac_say "Aligning the output spectral cube to $refppv.";

  # Check that the current Frame and the reference file are observations
  # of the same molecule and transition.  Only issue a warning if there
  # is a mismatch.
  _COMPARE_SPECIES_ GROUP=0 REF=$refppv ABORT=0
  
# Specify the reference cube.
  $params = "ref=$refppv";

  # BADMASK must not be 'AND' lest we not find any overlap with the
  # reference ube.
  $mc_hash->{badmask} = 'OR';

} else {

# Obtain the pixel scale and rotation angle.
# ------------------------------------------
  if ( $type ne "raster" ) {

    my $inlist2 = write_file_list( map {$_ . $section} $Frm->files );

    orac_print "Determining parameters for output cube...";
    $Mon{'smurf_mon'}->obeyw( "makecube", "$mc_params in='^$inlist2' out=!" );
    orac_print "done.\n";

    # Check to see if we have a sparse cube.
    $Frm->uhdr( "SPARSE", 0 );
    ( $ORAC_STATUS, my $sparse ) = $Mon{'smurf_mon'}->get( "makecube", "sparse" );
    if ( uc( $sparse ) eq 'TRUE' ) {
      orac_warn "Resulting cube will be sparse.\n";
      $Frm->uhdr( "SPARSE", 1 );
    } else {

      # Get the returned pixsize and crota.
      ( $ORAC_STATUS, $ppixsize ) = $Mon{'smurf_mon'}->get( "makecube", "pixsize" );
      ( $ORAC_STATUS, $crota ) = $Mon{'smurf_mon'}->get( "makecube", "crota" );

      # Check the pixel size. If it's smaller than a quarter of the
      # beamsize, set it to a quarter of the beamsize, unless it's a
      # pointing.
      if ( $type ne 'pointing' ) {
        my $lofreqs = defined( $Frm->hdr( "LOFREQS" ) ) ?
                      $Frm->hdr( "LOFREQS" )            :
                      $Frm->jcmtstate( "FE_LOFREQ" );

        my $min_pixsize = int( FREQ2PIXSIZE / $lofreqs + 0.5 );
        if ( $ppixsize < $min_pixsize ) {
          orac_warn "Default pixel size enlarged to the minimum pixel (quarter beam size).\n";
          $ppixsize = $min_pixsize;
        }
      }
    }

  } else {
    $ppixsize = $mc_hash->{pixsize};
    $crota = $mc_hash->{crota};
  }

  # Override the system and crota if the system has been passed in as an
  # argument.
  if ( defined( $system_arg ) ) {
    $system = $system_arg;
    $crota = 0;
  }

  # If we haven't been given an override pixel scale, use the one we
  # just determined.
  if ( ! defined( $pixsize ) ) {
    $pixsize = $ppixsize;
  }

  $params = "system=$system";
  if ( ! $Frm->uhdr( "SPARSE" ) ) {
    $params .= " pixsize=$pixsize crota=$crota autogrid=$autogrid";
  } else {
    $params .= " autogrid";
  }

# Obtain the reference pixel and assign its MAKECUBE parameters.
# --------------------------------------------------------------

# Record the reference pixel for the first call to this primitive for
# the current Frm.  If data are excluded by masking the ends of the
# spectrum for example, the autogrid centring can change by a spatial
# pixel.  This is catastrophic for a single spectrum cube as the masked
# and unmasked data have non-overlapping bounds.
  my @refpix;
  if ( $Frm->uhdr( "SPARSE" ) || $autogrid eq 'yes' && $type ne "raster" ) {
    if ( ! defined $Frm->uhdr( "REFPIX1" ) ) {
      ( my $ORAC_STATUS, @refpix ) = $Mon{'smurf_mon'}->get( "makecube", "pixref" );
      $Frm->uhdr( "REFPIX1", $refpix[0] );
      $Frm->uhdr( "REFPIX2", $refpix[1] );
    } else {
      @refpix = ( $Frm->uhdr( "REFPIX1" ), $Frm->uhdr( "REFPIX2" ) );
      $params .= " refpix1=$refpix[0] refpix2=$refpix[1]";
    }
  }
}

# Append other MAKECUBE parameters to the command line.
# -----------------------------------------------------

# Figure out the spread parameters.
_GET_SPREAD_PARAMS_ PARAM1=$param1 PARAM2=$param2 METHOD=$spread PIXSIZE=$pixsize
my $sp_params = $_GET_SPREAD_PARAMS_{PARAMSTRING};

$params .= " spread=$spread params=$sp_params";

foreach my $mc_param ( qw/ detectors usedetpos badmask alignsys / ) {
  if ( defined( $mc_hash->{$mc_param} ) ) {
    $params .= " $mc_param=" . $mc_hash->{$mc_param};
  }
}

# Get the tiling dimensions, but only if we're not doing a pointing
# or focus.
if ( ( lc( $type ) ne 'pointing' && lc( $type ) ne 'focus' ) && $tile && ! $jsatile ) {
  _GET_TILE_DIMENSIONS_ TILEBORDER=$tileborder MAXSIZE=$maxsize BYTES_PER_PIXEL=$bytes_per_pixel
  my $tiledims = $_GET_TILE_DIMENSIONS_{TILEDIMS};
  $params .= " tiledims=$tiledims tileborder=$tileborder trimtiles";
} else {
  $params .= " tiledims=!";
}

# As a quick hack until a proper fix is made. Still undecided
# whether to merge in MAKECUBE after baseline normalising or to
# merge after the cubes are created.  For now merge in MAKECUBE so
# that something happens.  Hybrid mode should use a different
# badmask.
if ( $Frm->uhdr("ISHYBRID") ) {
  $params .= " badmask=AND specunion";
}

# Append variance generation and weighting parameters.
# ----------------------------------------------------

# Check the Tsys values. If the mean is negative, then create the
# variance from the spread of input pixels. Otherwise, test the
# units. If the data units are Kelvin, then we can generate the
# variance from the Tsys values instead.
my $tmptsys = new ORAC::TempFile( 0 );
$ORAC_STATUS = ( create_hdsobj( "$tmptsys", 'NDF' ) ? ORAC__OK : ORAC__ERROR );
$ORAC_STATUS = ( copy_hdsobj( "$files[0].MORE.ACSIS.TSYS", "$tmptsys.DATA_ARRAY" ) ? ORAC__OK : ORAC__ERROR );
$Mon{'kappa_mon'}->obeyw( "stats", "ndf=$tmptsys" );
( $ORAC_STATUS, my $tsysmean ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

if ( $tsysmean < 0 && $tsysmean != VAL__BADD ) {
  orac_warn "Mean Tsys negative ($tsysmean). Using spread of input pixels for variance creation.\n";
  $params .= " genvar=spread noinweight";

} else {
  $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$files[0]" );
  ( $ORAC_STATUS, my $units ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "units" );
  if ( $units eq 'K' ) {
    $params .= " genvar=tsys inweight";
  } else {
    $params .= " genvar=spread inweight=false";
  }
}

$params .= " jsatiles" if $jsatile;

# Store the parameters for later use, but only if we don't have a
# sparse cube.
if ( ! $Frm->uhdr( "SPARSE" ) ) {
  $Grp->uhdr( "MAKECUBE_PARAMETERS", $params );
}

# Form list of input filenames.
# ----------------------------

# Form a list of all the input filenames and determine their total size in
# megabytes.  Also store the filenames in a GRP list text file.
my @infiles;
my $totalsize = 0;
foreach my $i ( 1 .. $Frm->nfiles ) {
  push @infiles, $Frm->file( $i );
  my $fullname = $Frm->file( $i ) . ".sdf";
  $totalsize += ( -s $fullname ) / MEGABYTE;
}
$inlist = write_file_list( map {$_ . $section} @infiles );

# Rather than just fill chunks to the maximum, and then possibly
# have a final chunk much smaller than the rest, creates chunks that
# are the average chunksize.
my ( $num_chunk, $mean_chunksize );
if ( $chunk ) {
  $num_chunk = int( $totalsize / $chunksize ) + 1;
  $mean_chunksize = $totalsize / $num_chunk;
}

# Extract reference co-ordinates and bounds.
#-------------------------------------------

# Do not create the output file, thus this is a quick operation.
$Mon{'smurf_mon'}->obeyw( "makecube", "$params in='^$inlist' out=!" );

# The reference co-ordinates are needed so that the same reference
# position applies to all chunks.
( $ORAC_STATUS, my $reflon ) = $Mon{'smurf_mon'}->get( "makecube", "reflon" );
( $ORAC_STATUS, my $reflat ) = $Mon{'smurf_mon'}->get( "makecube", "reflat" );
( $ORAC_STATUS, my @pixref ) = $Mon{'smurf_mon'}->get( "makecube", "pixref" );
( $ORAC_STATUS, my @flbnd ) = $Mon{'smurf_mon'}->get( "makecube", "flbnd" );
( $ORAC_STATUS, my @fubnd ) = $Mon{'smurf_mon'}->get( "makecube", "fubnd" );
( $ORAC_STATUS, my @lbound ) = $Mon{'smurf_mon'}->get( "makecube", "lbound" );
( $ORAC_STATUS, my @ubound ) = $Mon{'smurf_mon'}->get( "makecube", "ubound" );

# Remove unnecessary precision that only serves to exhaust the
# number of characters allowed in a command line.
my $prx = sprintf( "%.3f", $pixref[0] );
my $pry = sprintf( "%.3f", $pixref[1] );
my $prlb = sprintf( "%.3f", $flbnd[2] );
my $prub = sprintf( "%.3f", $fubnd[2] );

my $specbounds = "'" . $prlb . "," . $prub . "'";
$params .= " reflon=$reflon reflat=$reflat " if ( ! $useref );
$params .= " specunion specbounds=$specbounds";
if ( !$jsatile ) {
   $params .= " lbnd=[" . $lbound[0] . "," . $lbound[1] . "]";
   $params .= " ubnd=[" . $ubound[0] . "," . $ubound[1] . "]";
}

# Disable autogrid and use previously calculated reference pixel.
# This is per DSB's advice (20110326) to avoid double counting
# pixels when chunking and mosaicking.  MAKECUBE sometimes
# sometimes gives borders one pixel more than would be expected.
$params .= " refpix1=$prx refpix2=$pry" if ( ! $useref );
$params =~ s/autogrid /autogrid=n / if ( $totalsize > $chunksize && $chunk );

# Obtain the total number of tiles.
( $ORAC_STATUS, my $totaltile ) = $Mon{'smurf_mon'}->get( "makecube", "ntile" );

# Make the spectral cubes.
# ========================

my @jsatilelist;
my $makecube_outfile;

# Tell user what we're doing.
if ( $totalsize <= $chunksize || !$chunk || $num_chunk < 2 ) {
  orac_say( " Creating cube from " . join( ", ", @files ) . "..." );

  # Run MAKECUBE.
  $Mon{'smurf_mon'}->obeyw( "makecube", "$params in='^$inlist' out=$out" );
  orac_print( "done.\n" );

  # Retrieve the HPX identifiers of tiles created.  Although it
  # appears that we have the number of tiles, a further check of the
  # NTILE output parameter can be somewhat larger for the second call to
  # MAKECUBE with the additional parameters.
  if ( $jsatile ) {
    ( $ORAC_STATUS, @jsatilelist ) = $Mon{'smurf_mon'}->get( "makecube", "jsatilelist" );
    ( $ORAC_STATUS, $totaltile ) = $Mon{'smurf_mon'}->get( "makecube", "ntile" );
    orac_say "Total number of HPX tiles spanned is $totaltile";
  }

  # Create a VARIANCE component, if absent.
  # =======================================

  # See if MAKECUBE created a VARIANCE component.  CADC demands that one be
  # present in reduced products.  Create one if variance is absent and fill
  # it with bad values.

  # Look for and handle missing a VARIANCE component, say from nonsense
  # Tsys values.
  my $makecube_outfile;
  foreach my $j ( 1 .. $totaltile ) {
    if ( $jsatile && defined( $jsatilelist[ $j - 1 ] ) ) {
      $makecube_outfile = "${out}_" . $jsatilelist[ $j - 1 ];

    # The number of tiles is sometimes too large and the missing entries
    # from the JSA tile list cause warnings to appear, making it
    # appear that the job has failed.  So set the output file to some
    # dummy name so that further processing for the current tile is
    # curtailed.
    } elsif ( $jsatile ) {
      $makecube_outfile = "${out}_tilemissing";
    } else {
      $makecube_outfile = ( $totaltile == 1 ) ? $out : "${out}_$j";
    }
    if ( -e "${makecube_outfile}.sdf" ) {

      $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$makecube_outfile" );
      ( $ORAC_STATUS, my $var ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "variance" );
      if ( uc( $var ) eq 'FALSE' ) {

         # Supply the VARIANCE component based upon the detrended spectra.
         my $smoothed = new ORAC::TempFile( 0 );
         my $flattened = new ORAC::TempFile( 0 );
         my $filtered = new ORAC::TempFile( 0 );

         # Remove most, if not all, of the trends.  MFITTREND does not do too
         # well for particularly wobbly spectra associated with nonsense Tsys,
         # even a spline fit with plenty of knots.  However, subtracting a
         # broadly smoothed version seems to work moderately well.  This
         # step assumes that there are a good deal more than 51 elements
         # in each spectrum.
         $params = "in=$makecube_outfile out=$smoothed box=[1,1,51]";
         $Mon{'kappa_mon'}->obeyw( "block", "$params" );

         $params = "ia=$makecube_outfile ib=$smoothed out=$flattened ";
         $params .= "exp=abs(ia-ib)";
         $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

         # Reduce the effect of noise spikes and random fluctuations that
         # will give rise to overestimates and underestimates respectively
         # of the errors
         $params = "in=$smoothed out=$filtered box=[1,1,11] estimator=median";
         $Mon{'kappa_mon'}->obeyw( "block", "$params" );

         # Transfer the detrended and filtered data to a new VARIANCE component
         # in the original cube.
         $params = "ndf=$makecube_outfile from=$filtered comp=Data";
         $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );
         orac_say( " Creating VARIANCE component in $makecube_outfile." );
      }
    }
  }

# Chunking
# ========

# Divide and conquer.  For JSA tiles the chunks are numbered by their
# HPX tile indices.
} else {

  my $fileref = \@infiles;
  _CHUNK_AND_MOSAIC_CUBE_ FILES=$fileref CHUNKSIZE=$chunksize NUM_CHUNK=$num_chunk MEAN_CHUNKSIZE=$mean_chunksize TOTALSIZE=$totalsize TOTALTILE=$totaltile MAKECUBE_PARAMS=$params TILE=$tile JSATILE=$jsatile SUFFIX=$suffix GROUP=0
  if ( $jsatile ) {
    @jsatilelist = @{$_CHUNK_AND_MOSAIC_CUBE_{JSATILELIST}};
    $totaltile = scalar( @jsatilelist );
    orac_say "Total number of chunked tiles to reassemble is $totaltile";
  }
}

# Rename the output cubes.
# ========================

if ( $totaltile > 1 || $jsatile ) {

  my @files;
  my $numbad = 0;
  my $nummissing = 0;
  my $outfilenumber = 1;
  my $outfile;
  foreach my $j ( 1 .. $totaltile ) {
    if ( $jsatile && defined( $jsatilelist[ $j - 1 ] ) ) {
       $makecube_outfile = "${out}_" . $jsatilelist[ $j - 1 ] . ".sdf" ;
       $outfile = "${out}" . sprintf( "%06d", $jsatilelist[ $j - 1 ] ) . ".sdf";

    # The number of tiles is sometimes too large and the missing entries
    # from the JSA tile list cause warnings to appear, making it appear
    # that the job has failed.  So set the output file to some dummy
    # name so that further processing for the current tile is curtailed.
    } elsif ( $jsatile ) {
       $makecube_outfile = "${out}_tilemissing.sdf";
    } else {
       $makecube_outfile = "${out}_$j" . ".sdf";
       $outfile = "${out}" . sprintf( "%03d", $outfilenumber ) . ".sdf";
    }

    # Report processing statistics.
    # =============================

    if ( -e $makecube_outfile ) {

      # Run STATS to find out if this tile is blank or not.
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$makecube_outfile" );
      ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
      if ( $numgood == 0 ) {
        orac_print "$makecube_outfile is blank.\n";
        unlink( $makecube_outfile );
        $numbad++;
        next;
      }

  # We need to rename the output cubes, as MAKECUBE creates _cube_N
  # and we want _cubeNNN.
      rename( $makecube_outfile, $outfile );
      orac_print "Rename ". $makecube_outfile . " to $outfile \n";

      $outfile =~ s/\.sdf$//;
      push( @files, $outfile );
      $outfilenumber++ if ! $jsatile;

      # Request that the output cube be removed upon completion of group processing
      # The minimally unprocessed _cube files are JSA products, so should be retained.
      $Grp->push_intermediates( $outfile ) unless ( $suffix eq "_cube" );

    } else {
      orac_print "$makecube_outfile is absent.\n";
      $nummissing++;
    }
  }

  $totaltile -= $numbad;
  $totaltile -= $nummissing;
  orac_print " $totaltile cubes formed: ";

  $Frm->files( @files );
  my $filestring = join ", ", @files;
  orac_print( "$filestring\n" );

  # The HEALPix TILENUM headers written by MAKECUBE should be known to ORAC-DR.
  $Frm->readhdr() if $jsatile;

# Rename for a single spectral cube.
# ==================================

} elsif ( $totaltile == 1 ) {

  # We want the output file to be named _cube001.
  my $makecube_outfile = "${out}.sdf";
  my $outfile = "${out}001.sdf";
  rename( $makecube_outfile, $outfile );
  $outfile =~ s/\.sdf$//;
  $Frm->files( $outfile );
  $Grp->push_intermediates( $outfile );
  orac_print " 1 cube formed: $outfile\n";

} else {
  $ORAC_STATUS = ORAC__ERROR;
  orac_throw " No cube product formed.  Aborting.\n";
}

# Tagging
# =======

# Set the product.
$Frm->product( $product );
$Frm->sync_headers;

# Tag as reduced, if requested.
if ( $tag ) {
  _TAG_AS_REDUCED_PRODUCT_ GROUP=0 UPDATE=1 FLAG_QUAL_BAD=1
}

# Retrieve and set the Group REFLAT/REFLON if they're not already set.
# ====================================================================

if ( ! defined( $Grp->uhdr( "REFLAT" ) ) ) {
  my $ndf = $Frm->file( 1 );

  # Read the frameset from this file
  my $wcs = $Frm->read_wcs( $ndf );

  # Determine which axis is latitude and which is longitude. Subtract
  # 1 from these to turn them into Perl array indices.
  my $lataxis = $wcs->Get("LatAxis");
  my $lonaxis = $wcs->Get("LonAxis");
  my $plataxis = $lataxis - 1;
  my $plonaxis = $lonaxis - 1;

  # set the format to 'dms.4' for the latitude axis and 'dms.4' for the longitude
  # axis to get some decent precision.
  my $latformat = "dms.4";
  my $lonformat = "hms.4";
  $wcs->Set("Format($lataxis)=$latformat,Format($lonaxis)=$lonformat'");

  # Retrieve the SkyRef position and store it in the Grp uhdr. This is
  # of the form 'dd:mm:ss.ssss, dd:mm:ss.ssss', so split on commas.
  my $skyref = $wcs->Get("SkyRef");
  my @skyref = split /, /, $skyref;
  my $reflat = $skyref[$plataxis];
  $reflat =~ s/ /:/g;
  my $reflon = $skyref[$plonaxis];
  $reflon =~ s/ /:/g;
  $Grp->uhdr( "REFLAT", $reflat );
  $Grp->uhdr( "REFLON", $reflon );

}

# --------------------------------------------------------------------

# Set a tag on this one so we can retrieve it later if necessary.
_SET_TAG_ TAG=POST_CREATE_CUBE_FRAME

# Display.
$Display->display_data( $Frm ) if defined $Display;

# Tidy-up output.
orac_print "\n";
