# -*-cperl-*-

=head1 NAME

_REMOVE_BASELINE_THROUGH_SMOOTHING_

=head1 DESCRIPTION

This primitive performs baseline subtraction of spectra.  It has
different functionality depending on the value of Argument
L<GROUP|/ARGUMENTS>.

If group processing is selected, the primitive only operates when the
recipe is processing the last group member.  In this case and provided
the COPY_FRAME_CUBE Group internal header is true, the primitive
copies the Frame files to the Group files, and synhronises headers.

When processing Frame objects, for each input cube the primitive first
creates a mask of emission, in which smoothing (see Arguments
L<FREQUENCY_SMOOTH|/ARGUMENTS> and L<SPATIAL_SMOOTH|/ARGUMENTS>) helps
delineate the baseline from the emission, and refines the baseline.
The second baseline fit uses the full spectral range, and the baseline
is subtracted from each input Frame's cube.  For hybrid data, which is
most likely to have multiple lines, an offset correction is applied
using the mode of the data histogram to define the baseline level.

The baseline-subtracted data may be tagged (see Argument L<TAG|/ARGUMENTS>).

=head1 ARGUMENTS

=over 4

=item FREQUENCY_SMOOTH = INTEGER (Given)

The number of channels over which the frequency axis is smoothed.  [25]

=item GROUP = INTEGER (Given)

Defines how group handling is done. 0 means the current Frame object
is used, 1 means the current Group object is used, and 2 means every
Frame member in the current Group is used.  [0]

=item KNOTS = INTEGER (Given)

The number of knots to use if spline fitting is being applied.  An
interpolating spline is limited to a 11 knots with a default of 4.
The default is 12 knots for a smoothing spline and up to 60 may be
used.  This argument can be overridden by the RECPAR_BASELINE_KNOTS
recipe parameter.  [!]

=item ORDER = INTEGER (Given)

The order of fit used for the baseline.  A special value of "spline"
uses a spline fit, which is only suitable for narrow-line spectra.
This argument can be overridden by the RECPAR_BASELINE_ORDER recipe
parameter.  [1]

=item SMOOTH_SUBTRACT = BOOLEAN (Given)

Whether or not to subtract a smoothed baseline.  There is no subtraction
if this argument is undefined. [undef]

=item SPATIAL_SMOOTH = INTEGER (Given)

The number of pixels in both spatial dimensions over which the cube is
smoothed.  [3]

=item SPLINE_TYPE = STRING (Given)

The spline type, which is either 'interpolating' for a least-squares fit
that passes through the knots, or 'smooth' for a smooth spline.  These
may be abbrieviated to 'int' and 'smo', respectively.  See
KAPPA:MFITTREND documentation for details.  It will be ignored unless
the chosen order is set to 'spline'. This argument can be overridden
by the RECPAR_BASELINE_SPLINE_TYPE recipe parameter.  If the resultant
value is neither of the allowed alternatives, it is defaulted to
'interpolating'.  ['interpolating']

=item TAG = LOGICAL (Given)

Whether or not to tag the resulting group masked cube as 'reduced'.  [1]

=back

=head1 NOTES

=over 4

=item *

The output files are logged as group intermediates.

=back

=head1 OUTPUT DATA

=over 4

=item

The output baseline-corrected cubes, each with suffix _bl.
For JSA processing, its tile-naming convention is adhered
to for these cubes.

=back

=head1 TASKS

KAPPA: ADD, MFITTREND, NDFCOPY, NDFTRACE, SETVAR, SUB.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2012, 2014, 2016, 2018, 2022 Science and Technology
Facilities Council.  All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle parameters.
my $freqsmooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $knots = get_prim_arg( $_PRIM_ARGS_, "KNOTS", undef );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $smosub = get_prim_arg( $_PRIM_ARGS_, "SMOOTH_SUBTRACT", undef );
my $spatsmooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $spline_type = get_prim_arg( $_PRIM_ARGS_, "SPLINE_TYPE", "interpolating" );
$knots = $spline_type =~ /smo/ ? 12 : 4 if ! defined( $knots );
my $tag = get_prim_arg( $_PRIM_ARGS_, "TAG", 1 );

# Override various arguments been given them as recipe
# parameters.
$order = ( defined( $Frm->uhdr( "RECPAR_BASELINE_ORDER" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_ORDER" )            :
           $order );
$knots = ( defined( $Frm->uhdr( "RECPAR_BASELINE_KNOTS" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_KNOTS" )            :
           $knots );
$spline_type = ( defined( $Frm->uhdr( "RECPAR_BASELINE_SPLINE_TYPE" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_SPLINE_TYPE" )                  :
           $spline_type );
$spline_type = 'interpolating' if ( $spline_type !~ /int/ && $spline_type !~ /smo/ );

my $spline = 1 if $order =~ /spl/;

# Write a heading to structure the commentary.
orac_say "\n\nBaseline removal";
my $underline = "-" x 24;
orac_say "$underline\n";

# Collect objects to process.
my @objs;
if( $group == 0 ) {
  push @objs, $Frm;
} elsif( $group == 1 ) {
  push @objs, $Grp;
} elsif( $group == 2 ) {
  @objs = $Grp->members;
}

# At the group-processing stage, it is only necessary to copy the
# Frame files into the Group files when copying has been selected.
if( $group != 1 ||
    ( ( $group == 1 ) && ( $Grp->lastallmembers( $Frm ) ) ) ) {

  # We only need to do this if we have more than one member in the
  # group.
  if( $group == 1 && $Grp->uhdr( "COPY_FRAME_CUBE" ) ) {

    # Retrieve the tagged frame and copy it into the Group object.
    _RETRIEVE_TAG_ TAG=POST_REMOVE_BASELINE

    # Now copy over each of the Frame files.
    foreach my $i ( 1 .. $Frm->nfiles ) {

      my $in = $Frm->file( $i );
      ( undef, my $out ) = $Grp->inout( "_bl", $i );

      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );

      $Grp->allow_header_sync( 1 );
      $Grp->file( $i, $out );
      $Grp->sync_headers( $i );

      # Remove the output file after group processing.
      $Grp->push_intermediates( $out );

      orac_print "$in to $out:\n";
      orac_print " Copied to Group file.\n";

    }

    # Tag the group files as 'reduced', if requested.
    if( $tag ) {
      _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 GROUP=1 FLAG_QUAL_BAD=1
    }

    # Set Frame back to whatever it was before.
    _RETRIEVE_TAG_ TAG=PREVIOUS

# Not at the group-prcoessing stage.  Find and subtract baselines for
# all the chosen objects.
  } else {

    orac_print "Removing baseline through smoothing and masking.\n";
    if ( $spline ) {
      my $spltype = $spline_type =~ /int/ ? "interpolating" : "smoothed";
      orac_print "Baselines are fitted to a $spltype spline with $knots knots.\n";
    } else {
      orac_print "Baselines are fitted to a polynomial of order $order.\n";
    }

    _CREATE_BASELINE_MASK_ GROUP=$group FREQUENCY_SMOOTH=$freqsmooth SPATIAL_SMOOTH=$spatsmooth ORDER=$order REPORT=0

    foreach my $Obj ( @objs ) {

      foreach my $i ( 1 .. $Obj->nfiles ) {

        my ( $in, $out ) = defined( $Obj->uhdr( "JSA_TILES" ) ) && $Obj->uhdr( "JSA_TILES" ) ?
                           $Obj->inout_jsatile( "_bl", $i ) :
                           $Obj->inout( "_bl", $i );
        my $mask = $Obj->uhdr( "BASELINE_MASKS" )->[$i];

        # Mask out the non-baseline regions in the original cube.
        my $temp1 = new ORAC::TempFile( 0 );
        my $temp1file = $temp1->file;
        my $params = "in1=$in in2=$mask out=$temp1file";
        $Mon{'kappa_mon'}->obeyw( "add", "$params" );

        # Fit better baselines to the masked cube. We can use the
        # whole range but don't use auto.
        my $temp2 = new ORAC::TempFile( 0 );
        my $temp2file = $temp2->file;

        # Perform the baseline fit of the desired type.
        $params = "in=$temp1file out=$temp2file axis=3 auto=false ranges=\! ";
        $params .= "variance subtract=false method=single ";

        if ( $spline ) {
          if ( $spline_type =~ /int/ ) {
            $params .= " fittype=spline interpol knots=$knots";
          } else {
            $params .= " fittype=spline interpol=false knots=$knots";
          }
        } else {
           $params .= "order=$order";
        }
        $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

        # Subtract these baselines from the input cube.
        $params = "in1=$in in2=$temp2file out=$out";
        $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

        if ( defined( $smosub ) && $smosub ) {
           my $Frm = new $Frm( $out );
           _SUBTRACT_SMOOTHED_BASELINE_ GROUP=$group VELOCITY_WIDTH=$smosub
           my $outsms = $Frm->file;
           $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$outsms out=$out" );
        }

        # For hybrid data that is often a line forest, apply an offset
        # correction to the baselines from finding the mode of the data
        # histogram that should be dominated by baseline signal.
        my %uhdrs = ( %{$Frm->uhdr} );
        {
           my $Frm = new $Frm;
           $Frm->file( $out );
           %{$Frm->uhdr} = %uhdrs;
           _ESTIMATE_LINEFOREST_BASELINE_OFFSET_ GROUP=$group SKEWNESS=1.2
        }

        # Copy the variance across over from the input cube, but only
        # if the input cube has a variance.
        $params = "ndf=$in";
        $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "$params" );
        my( $ORAC_STATUS, $var ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "variance" );
        if( uc( $var ) eq 'TRUE' ) {
          $params = "ndf=$out from=$in comp=VARIANCE";
          $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );
        }

        orac_print "$in to $out:\n";
        orac_print " Removed baseline.\n";

        $Obj->product( "bl" );
        $Obj->file( $i, $out );

        # Remove the output file after group processing.
        $Grp->push_intermediates( $out );

        if( $group == 0 ) {
          _SET_TAG_ TAG=POST_REMOVE_BASELINE
        }

      }

      if( $tag ) {
        $Frm = $Obj;
        _TAG_AS_REDUCED_PRODUCT_ UPDATE=1 FLAG_QUAL_BAD=1
      }

    }

  }

  # Tidy-up output.
  orac_print "\n";

}
