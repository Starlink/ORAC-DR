# -*-cperl-*-

=head1 NAME

_GET_MAKECUBE_PARAMS_

=head1 DESCRIPTION

This primitive creates a hash of parameter values for MAKECUBE.  The
main factor used to select parameters is the type of observation, as
give by Argument TYPE.

The default values as part of the MAKECUBE command line are as follows.
C<system=tracking autogrid badmask=and alignsys usedetpos=no poserrfatal>

For jiggle, pixsize is set.  Other primitives are called for raster/scan maps
(L<_GET_MAKECUBE_PARAMS_SCAN_|_GET_MAKECUBE_PARAMS_SCAN_>, and pointing
observations (L<_GET_MAKECUBE_PARAMS_POINTING_|_GET_MAKECUBE_PARAMS_POINTING_>).

=head1 ARGUMENTS

=over 4

=item HASH = Associative array (Returned)

The MAKECUBE parameters and their values.

=item PARAMS = STRING (Returned)

The parameters that can be passed to MAKECUBE for the given
observation. The parameters do not include the IN or OUT parameters.

=item PASS = INTEGER (Given)

The MAKECUBE pass number. 1 for first pass, 2 for second pass. The
first pass is typically used to determine output bounds without
creating a cube in order to determine whether or not to create
tiles. [1]

=item TYPE = STRING (Given)

The type of observation done. This must be one of 'jiggle', 'raster',
'pointing', 'focus', or 'grid'.   It is case-insensitive. ['']

=back

=head1 NOTES

=over 4

=item *

POSERRFATAL is set to true so that if a significant difference between the
detector positions and those implied by the FPLANEX/Y arrays causes
the recipe to fail, except for a summit recipe.

=item *

An error ensues if TYPE is not one of the recognised observation types.

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

None.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2008, 2013, 2017-2018 Science and Technology Facilities
Council.  All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle parameters.
my $type = get_prim_arg( $_PRIM_ARGS_, "TYPE", undef, 1 );
$type = uc( $type );

my $pass = get_prim_arg( $_PRIM_ARGS_, "PASS", 1 );
my $file = $Frm->file;

orac_print "Determining MAKECUBE parameters for $type for $file.\n";

# Set up some defaults.
my %return_hash = ( 'system' => 'tracking',
                    'autogrid' => 'yes',
                    'badmask' => 'and',
                    'alignsys' => 'yes',
                    'usedetpos' => 'no',
                    'poserrfatal' => 'yes',
                  );

if( $type eq 'RASTER' or $type eq 'SCAN' ) {

  _GET_MAKECUBE_PARAMS_SCAN_

  %return_hash = ( %return_hash, %{$_GET_MAKECUBE_PARAMS_SCAN_{HASH}} );

} elsif( $type eq 'JIGGLE' ) {

  # JIGGLEs always use autogrid.
  $return_hash{'autogrid'} = 'yes';
  $return_hash{'usedetpos'} = 'no';

  # HARP4 and HARP5 jiggles get their pixel scale set to 7.5 or 6,
  # respectively.
  my $jiggle_name = ( defined( $Frm->hdr( "JIGL_NAM" ) ) ?
                      $Frm->hdr( "JIGL_NAM" )            :
                      "" );
  if( $jiggle_name =~ /harp([45])/i ) {
    my $pixsize = ( $1 == 4 ? 7.5 : 6 );
    $return_hash{'pixsize'} = $pixsize;
  }

} elsif( $type eq 'GRID' ) {

  # GRIDs just use autogrid.
  $return_hash{'autogrid'} = 'yes';
  $return_hash{'usedetpos'} = 'no';

} elsif( $type eq 'POINTING' or $type eq 'FOCUS' ) {

  _GET_MAKECUBE_PARAMS_POINTING_ PASS=$pass

  %return_hash = ( %return_hash, %{$_GET_MAKECUBE_PARAMS_POINTING_{HASH}} );

} else {
  orac_throw "Unable to determine MAKECUBE parameters for observation type $type."
}

# Override USEDETPOS for RxW.
if( $Frm->uhdr( "ORAC_INSTRUMENT" ) =~ /rxw/i ) {
  $return_hash{'usedetpos'} = "yes";
}

# Form the parameter string and wrap it in spaces.
my $params = join " ", map { join( "=", $_, $return_hash{$_} ) } keys %return_hash;
$params = " $params ";


# And set the return value.
$_PRIM_ARGS_->{PARAMS} = $params;
$_PRIM_ARGS_->{HASH} = \%return_hash;
