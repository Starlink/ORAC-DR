=head1 NAME

_SET_BASELINE_RECPARS_ - Obtains and reports the recipe parameters that
control baseline fitting.

=head1 DESCRIPTION

This primitive obtains the recipe parameters associated with the
fitting of baselines to spectra.  It copies the values to internal headers
for access by the relevant primitives.  The primitive also reports the
settings to the log in yellow.

This primitive serves the heterodyne recipes' steering files in order
to avoid duplicated code.

=head1 NOTES

=over 4

=item

The recipe parameters accessed by this primitive are: BASELINE_EDGES,
BASELINE_EMISSION_CLIP, BASELINE_METHOD, BASELINE_NUMBIN,
BASELINE_REGIONS, BASELINE_ORDER, STANDING_WAVE,
STANDING_WAVE_EMISSION_MASK. STANDING_WAVE_EMISSION_REGIONS,
STANDING_WAVE_INTERPOLATE, STANDING_WAVE_REFINE, and STANDING_WAVE_SMOOTH.
These should be added to the list of parameters to verify with
ORAC::Recipe::Parameters::verify_parameters in the calling steering
primitive.

=item

If BASELINE_METHOD is set to 'auto', BASELINE_EDGES and BASELINE_REGIONS
recipe parameters are ignored.

=item

If STANDING_WAVE is undefined or false, the other STANDING_WAVE_*
parameters are ignored.

=item

The internal headers have names "RECPAR_" followed by the recipe
parameter name.

=back

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2018-2023 Science and Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# This variable is used to reform comma-separated lists turned into
# stringified array reference.
my $commasep;

# Put the recipe parameters into our uhdr.

orac_say( " Baseline subtraction:", "yellow" );

# For the moment only permit the auto method.
if ( defined( $RECPARS{'BASELINE_METHOD'} &&
     $RECPARS{'BASELINE_METHOD'} =~ /^auto/i ) ) {
  my $baseline_method = 'auto';
  $Frm->uhdr( "RECPAR_BASELINE_METHOD", $RECPARS{'BASELINE_METHOD'} );
  orac_say( "    Setting baseline method to $RECPARS{'BASELINE_METHOD'}.", "yellow" );

} elsif ( defined( $RECPARS{'BASELINE_EDGES'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_EDGES", $RECPARS{'BASELINE_EDGES'} );
  orac_say( "    Setting baseline regions to outer $RECPARS{'BASELINE_EDGES'}% " .
            "at each end of noise-clipped spectra.", "yellow" );

# Note although this may duplicate the assignment of RECPAR_BASELINE_REGIONS,
# say in _SET_BAD_BASELINE_RECPARS, it is needed to ensure it is set, and to
# report its usage in context.
} elsif ( defined( $RECPARS{'BASELINE_REGIONS'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_REGIONS", $RECPARS{'BASELINE_REGIONS'} );
  if ( ref( $RECPARS{'BASELINE_REGIONS'} ) eq 'ARRAY' ) {
    $commasep = join( ",", @{$RECPARS{'BASELINE_REGIONS'} } );
  } else {
    $commasep = $RECPARS{'BASELINE_REGIONS'};
  }

  orac_say( "    Setting baseline-fit regions to $commasep km/s.", "yellow" );
}

if ( defined( $RECPARS{'BASELINE_ORDER'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_ORDER", $RECPARS{'BASELINE_ORDER'} );
  my $order = lc( $RECPARS{'BASELINE_ORDER'} );

# Set the spline recipe parameters.  Include defaults should the
# number of knots not be supplied.  Set allowed ranges
  my ( $spline_type, $knots, $maxknots );
  if ( $order =~ /spl/ ) {
    my $minknots = 4;
    if ( defined( $RECPARS{'BASELINE_SPLINE_TYPE'} ) ) {
      $Frm->uhdr( "RECPAR_BASELINE_SPLINE_TYPE", $RECPARS{'BASELINE_SPLINE_TYPE'} );
      $spline_type = $RECPARS{'BASELINE_SPLINE_TYPE'};
      if ( $spline_type =~ /int/ ) {
        $spline_type = "interpolating";
        $knots = 4;
        $maxknots = 11;
      } else {
        $spline_type = "smoothing";
        $knots = 12;
        $maxknots = 60;
      }
    }

    if ( defined( $RECPARS{'BASELINE_KNOTS'} ) ) {
      $knots = max( $minknots, min( $RECPARS{'BASELINE_KNOTS'}, $maxknots ) );
    }
    $Frm->uhdr( "RECPAR_BASELINE_KNOTS", $knots );
    orac_say( "    Fit baselines using a ${spline_type} spline with $knots knots.", "yellow" );

  } else {
    orac_say( "    Setting baseline polynomial order to ${order}.", "yellow" );
  }
}

if ( defined( $RECPARS{'BASELINE_NUMBIN'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_NUMBIN", $RECPARS{'BASELINE_NUMBIN'} );
  orac_say( "    Number of bins for emission masking is $RECPARS{'BASELINE_NUMBIN'}.", "yellow" );
}


if ( defined( $RECPARS{'BASELINE_EMISSION_CLIP'} ) ) {
  $Frm->uhdr( "RECPAR_BASELINE_EMISSION_CLIP", $RECPARS{'BASELINE_EMISSION_CLIP'} );

# If the user enters a single value for the emission clipping, the recipe
# parameter's value can be reported directly.  However, should a comma-separated
# list be supplied, the returned value is a stringified ARRAY(address).  To
# circumvent this convert the reference to an array, and reassemble the pieces.
   if ( ref( $RECPARS{'BASELINE_EMISSION_CLIP'} ) eq 'ARRAY' ) {
      $commasep = join( ",", @{ $RECPARS{'BASELINE_EMISSION_CLIP'} } );
   } else {
      $commasep = $RECPARS{'BASELINE_EMISSION_CLIP'};
   }
   orac_say( "    Emission-masking clipping levels to $commasep standard deviations.", "yellow" );
}

if ( defined( $RECPARS{'STANDING_WAVE'} ) ) {
   $Frm->uhdr( "RECPAR_STANDING_WAVE", $RECPARS{'STANDING_WAVE'} );

   if ( $RECPARS{'STANDING_WAVE'} ) {
      orac_say( "    Subtract standing waves.", "yellow" );
   }

   if ( defined( $RECPARS{'STANDING_WAVE_EMISSION_MASK'} ) ) {
      $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_MASK", $RECPARS{'STANDING_WAVE_EMISSION_MASK'} );
      if ( $RECPARS{'STANDING_WAVE_EMISSION_MASK'} != 0 ) {
          orac_say( "       Use the group integ map to select spectra free of emission.", "yellow" );
      }
      if ( defined( $RECPARS{'STANDING_WAVE_EMISSION_THRESHOLD'} ) ) {
         $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_THRESHOLD", $RECPARS{'STANDING_WAVE_EMISSION_THRESHOLD'} );
         if ( $RECPARS{'STANDING_WAVE_EMISSION_THRESHOLD'} > 0 ) {
             orac_say( "          Thresholding at $RECPARS{'STANDING_WAVE_EMISSION_THRESHOLD'}.", "yellow" );
         }
      }
   }

   if ( defined( $RECPARS{'STANDING_WAVE_SMOOTH'} ) ) {
      $Frm->uhdr( "RECPAR_STANDING_WAVE_SMOOTH", $RECPARS{'STANDING_WAVE_SMOOTH'} );
      if ( $RECPARS{'STANDING_WAVE_SMOOTH'} > 0 ) {
         orac_say( "       Block smooth the waves with a width of $RECPARS{'STANDING_WAVE_SMOOTH'} channels.", "yellow" );
      }
   }

   if ( defined( $RECPARS{'STANDING_WAVE_INTERPOLATE'} ) ) {
      $Frm->uhdr( "RECPAR_STANDING_WAVE_INTERPOLATE", $RECPARS{'STANDING_WAVE_INTERPOLATE'} );
      if ( $RECPARS{'STANDING_WAVE_INTERPOLATE'} ) {
         orac_say( "       Interpolate spatially across blank spectra and spectrally across emission gaps.", "yellow" );
      } else {
         orac_say( "       Do not interpolate across blank standing-wave spectra and gaps due to emission", "yellow" );
      }
   }

   if ( defined( $RECPARS{'STANDING_WAVE_REFINE'} ) ) {
      $Frm->uhdr( "RECPAR_STANDING_WAVE_REFINE", $RECPARS{'STANDING_WAVE_REFINE'} );
      if ( $RECPARS{'STANDING_WAVE_REFINE'} ) {
         orac_say( "       Refine estimation by creating and applying PPV emission mask.", "yellow" );
      } else {
         orac_say( "       Do not refine using a PPV emission mask.", "yellow" );
      }
   }

# This could be an elsif as the two methods are currently independent.
   if ( defined( $RECPARS{'STANDING_WAVE_EMISSION_REGIONS'} ) ) {
      $Frm->uhdr( "RECPAR_STANDING_WAVE_EMISSION_REGIONS", $RECPARS{'STANDING_WAVE_EMISSION_REGIONS'} );
      if ( ref( $RECPARS{'STANDING_WAVE_EMISSION_REGIONS'} ) eq 'ARRAY' ) {
         $commasep = join( ",", @{ $RECPARS{'STANDING_WAVE_EMISSION_REGIONS'} } );
      } else {
         $commasep = $RECPARS{'STANDING_WAVE_EMISSION_REGIONS'};
      }
      orac_say( "       Mask and interpolate across velocity ranges $commasep.", "yellow" );
   }
}
