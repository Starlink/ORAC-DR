=head1 NAME

_REMOVE_FLAT_FIELD_ITERATE_ - Remove flat-field effects iteratively.

=head1 DESCRIPTION

This primitive first evaluates the receptor-to-receptor responses of
one or more baselined time-series cubes.  Then it applies the relative
sensitivities to flat field those same cubes.  It segregates a group
of cubes by observation date, and derives a flat field for each date.
To derive the relative responses the primitive generates spectral
cubes for each receptor individually, then collapses each cube along
the frequency and time axes to form a composite spectrum for each
receptor.  Then it has a choice of methods to analyse them (see
Argument METHOD).

The first sums the flux over a velocity range for each individual
receptor (Curtis, Richer & Buckle 2009) integrating over all the
spectra.  This assumes that all receptors see the same flux which in
general will not be true, but in practice this does a decent job
provided the velocity range just spans the emission.  One case where
it din't work so well is where there appeared to be non-linearity in
the data and the flat field for the bright parts seemed not to be the
same as near the background.

The second selects signal above the median plus four standard
deviations, particularly when there are multiple lines.  This offers
a simple means to exclude the noisy baseline and reduce the
uncertainty in the relative data values in each receptor.  It then
normalizes the flux in the receptors to the tracking receptor's flux.
It then uses this multiplicative factor to normalize the input
time-series data.  Since there are differences in the baselines and
relative signal between receptors, the thresholding introduces a bias.
This primitive employs an iterative method, first applying the initial
corrections, which raise or lower the mean spectrum of a receptor so
that the thresholding is more consistent with other receptors.  It
then recalculates the correction factors and folds these in with the
earlier factors.  The procedure stops after MAX_ITERATIONS iterations
or when convergence has been met, currently set at no more than 1 per
cent shift from the previous iteration.

=head1 ARGUMENTS

=over 4

=item APPLY = BOOLEAN (Given)

Whether or not to apply the calculated flatfield.  If APPLY is false
the ratios are still calculated and logged.  This argument can be
overridden by the RECPAR_FLAT_APPLY uhdr via the recipe parameter
system. [1]

=item COMBINE_BY_DATE = BOOLEAN (Given)

When this is set true and GROUP is 2, the data are analysed by date,
combining all the observations on the same UT date to improve the
signal-to-noise in the flat field.  While this is generally a good
thing, if only to combine both directions of a weave, there are times
when the receptor-to-receptor performance changes during a night,
hence this argument to disable this behaviour.  [1]

=item GROUP = INTEGER (Given)

How to process group files. 0 means use the current Frame object. 1
means use the current Group object. 2 means use each Frame member of
the current Group object. [0]

=item LOWER_VELOCITY = REAL (Given)

The requested lower velocity for the flat-field estimations.
This argument can be overridden by the RECPAR_FLAT_LOWER_VELOCITY uhdr
via the recipe parameter system.  [undef]

=item MAX_ITERATIONS = INTEGER (Given)

The maximum number of iterations to seek convergence for METHOD set to
'itersum'.  This will be ignored (effectively set to 1) if the
METHOD is 'sum'.  [5]

=item METHOD = STRING (Given)

This selects the method used to derive the relative gains of the
receptors.  The allowed selection comprises 'sum' which finds the
integrated flux in a velocity window, or 'itersum' which uses
thresholiding to define the contributing signal.  This argument can be
overridden by the RECPAR_FLAT_METHOD uhdr via the recipe parameter
system.  ['sum']

=item REFERENCE_RECEPTOR = STRING (Given)

Which receptor is the reference receptor to which the others are
normalized.  The default comes from the REFRECEP header.  []

=item RESERVE_REFERENCE = STRING (Given)

A second receptor to be used when the reference receptor is defective, say
suffering from bad baselines.  ['H10']

=item UPPER_VELOCITY = REAL (Given)

The requested upper velocity for the flat-field estimations.
This argument can be overridden by the RECPAR_FLAT_UPPER_VELOCITY uhdr
via the recipe parameter system.  [undef]

=back

=head1 NOTES

=over 4

=item *

This primitive should only be used when you can be assured that each
receptor has sampled approximately the same amount of flux across the
observation. Rasters of clouds are good candidates, jiggles or grids
are not.

=item *

This primitive is suitable for baselined time-series ACSIS cubes.

=item *

The cube is collapsed along the time and frequency axes using the
'sum' estimator.

=item *

Only applies to RASTER of SCAN types.

=back

=head1 OUTPUT DATA

=over 4

=item *

The flat-fielded time-series cube with suffix _ff.

=back

=head1 TASKS

KAPPA: BLOCK, CDIV, CHPIX, COLLAPSE, DIV, MANIC, MATHS, MSTATS, MULT,
NDFCOPY, NDFTRACE, PASTE, SETUNITS, SETVAR, STATS, THRESH, TRANDAT.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2012-2014 Science and Technology Facilities Council.  All
Rights Reserved.

=cut

# Need more data than a stare or jiggle provides.
my $obstype = uc( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) );
if ( $obstype ne 'RASTER' and $obstype ne 'SCAN' ) { goto RETURN }

# Obtain arguments and recipe parameters.
# =======================================

my $apply = get_prim_arg( $_PRIM_ARGS_, "APPLY", 1 );
my $combine_date = get_prim_arg( $_PRIM_ARGS_, "COMBINE_BY_DATE", 1 );
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $reference_receptor = get_prim_arg( $_PRIM_ARGS_, "REFERENCE_RECEPTOR", undef );
my $reserve_ref = get_prim_arg( $_PRIM_ARGS_, "RESERVE_REFERENCE", 'H10' );
my $flatmethod = get_prim_arg( $_PRIM_ARGS_, "METHOD", 'sum' );
my $maxiter = get_prim_arg( $_PRIM_ARGS_, "MAX_ITERATIONS", 5 );
my $lower_vel = get_prim_arg( $_PRIM_ARGS_, "LOWER_VELOCITY", undef );
my $upper_vel = get_prim_arg( $_PRIM_ARGS_, "UPPER_VELOCITY", undef );

$flatmethod = ( defined( $Frm->uhdr( "RECPAR_FLAT_METHOD" ) ) ?
                $Frm->uhdr( "RECPAR_FLAT_METHOD" )            :
                $flatmethod );
$apply = ( defined( $Frm->uhdr( "RECPAR_FLAT_APPLY" ) ) ?
           $Frm->uhdr( "RECPAR_FLAT_APPLY" )            :
           $apply );
$lower_vel = ( defined( $Frm->uhdr( "RECPAR_FLAT_LOWER_VELOCITY" ) ) ?
             $Frm->uhdr( "RECPAR_FLAT_LOWER_VELOCITY" )              :
             $lower_vel );
$upper_vel = ( defined( $Frm->uhdr( "RECPAR_FLAT_UPPER_VELOCITY" ) ) ?
             $Frm->uhdr( "RECPAR_FLAT_UPPER_VELOCITY" )              :
             $upper_vel );

# Integer velocity must be made floating point so that NDF sectioning
# does not regard it as pixels.
if ( defined( $lower_vel ) && $lower_vel =~ /^[+-]?\d+$/ ) {
   $lower_vel = sprintf( "%.1f", $lower_vel );
}
if ( defined( $upper_vel ) && $upper_vel =~ /^[+-]?\d+$/ ) {
   $upper_vel = sprintf( "%.1f", $upper_vel );
}

# Provide a shorthand for the selecting the method.
my $sum = lc( $flatmethod ) eq 'sum' ? 1 : 0;

my $flat_range = "";
if ( $sum ) {
   if ( defined( $lower_vel ) && defined( $upper_vel ) ) {
     $flat_range = "$lower_vel" . ":" . "$upper_vel";
   } else {
      orac_warn "Flat fielding selected without specifying the velocity range to perform \n";
      orac_warn "receptor-to-receptor comparisons.  Using the full spectrum, but the analysis \n";
      orac_warn "may be affected by noise. \n";
      orac_warn "Set FLAT_LOWER_VELOCITY and FLAT_UPPER_VELOCITY to span the astronomical signal.\n";
   }
}

# For the sum method there is no iteration.
$maxiter = 1 if ( $sum );

# Write a header to structure the commentary
# ==========================================

orac_say "\n\nIterative flat-field correction";
my $underline = "-" x 39;
orac_say "$underline\n";

# Select objects to analyse and flat field.
# =========================================

# We want to combine data taken on the same night to improve the
# signal-to-noise in the derived receptor performances, and also use
# the same ratios for both directions in a basket weave.
my $MAX_RECEPTOR = 16;
my $isok = eval { require JCMT::ACSIS::Array; 1; };
if ( ! $isok ) {
   orac_warn "Could not load the JCMT::ACSIS::Array Perl module: $@\n";
   orac_warn "Cannot remove flat-field.\n";
} else {

   my @Objs;
   my @dategrps;
   my $singleGrp;
   if ( $group == 0 ) {
      $singleGrp->push( $Frm );
      push @dategrps, $singleGrp;
   } elsif ( $group == 1 ) {
      $singleGrp->push( $Grp );
      push @dategrps, $singleGrp;
   } elsif ( $group == 2 ) {
      @dategrps = $combine_date ? $Grp->subgrps( "ORAC_UTDATE" ) :
                                  $Grp->members;
   }

# Only do this if we're not doing a Group, or if we are doing a
# Group and this Frame is the last member of the Group.
   if ( $group != 1 ||
        ( $group == 1 && $Grp->lastallmembers( $Frm ) ) ) {
      my $params;
      my $useref;
      my $firstobs = 1;
      my $ORAC_STATUS;
      my ( %flat_ratio, %flat_ratio_error, %first_flat_ratio );

      orac_say "Detector gain correction";

# Loop over the UT date or current group
# ======================================
      foreach my $Grp ( @dategrps ) {
         @Objs = $Grp->members;
         my $number_on_date = scalar( @Objs );
         my ( @obsnums, @mean_spectra );
         my ( $in, $nval, $nreceptor, $ref, $units );
         my ( $array, $lbound, $ubound );

# Create temporary file name for each observation's mean spectra.
         foreach my $f ( 0.. $number_on_date - 1 ) {
            $mean_spectra[ $f ]  = new ORAC::TempFile( 0 );
         }

# Obtain required attributes of each object
# =========================================

# Each object (group or observation) may comprise more than one file.
         my $obs = -1;
         OBJECT: foreach my $Obj ( @Objs ) {
            $obs++;
            $in = $Obj->file;
            orac_say "Processing observation: $in.";
            push @obsnums, $Obj->uhdr( "ORAC_OBSERVATION_NUMBER" );

# Determine valid spectral range.  This will either be the regular central 85%,
# or to user-defined final velocity limits, whichever is more extensive.
            my $wcs_spec_bounds = '';
            my ( $lower_spect, $upper_spect );
            if ( ! ( defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) &&
                     $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) ) {
               _GET_SPECTRAL_LIMITS_ FILE=$in TRIM_PERCENT=85
               $lower_spect = $_GET_SPECTRAL_LIMITS_{LBOUND};
               $upper_spect = $_GET_SPECTRAL_LIMITS_{UBOUND};
               $wcs_spec_bounds = "$lower_spect:$upper_spect";
            }

# Find the reference receptor's name.
            if ( $firstobs ) {
               $ref = ( defined( $reference_receptor ) ?
                        $reference_receptor            :
                        $Obj->hdr( "REFRECEP" ) );

# Retrieve the units of the input cube.
               $Mon{'ndfpack_mon'}->obeyw( "ndftrace", "ndf=$in fullframe" );
              ( $ORAC_STATUS, $units ) = $Mon{'ndfpack_mon'}->get( "ndftrace", "units" );
            }

# Retrieve bounds of input cube needed to create out flat-field sub-files.
            _GET_DIMENSIONS_ FILE=$in
            $lbound = $_GET_DIMENSIONS_{LBOUND};
            $ubound = $_GET_DIMENSIONS_{UBOUND};

# Obtain the number of receptors.
            $array = new JCMT::ACSIS::Array( File => $in );
            my @receptors = $array->receptors;
            $nreceptor = scalar( @receptors );

            my $tempfile = new ORAC::TempFile( 0 );
            my $tempfile2 = new ORAC::TempFile( 0 );

# Form the array to store the mean spectrum for each receptor.
# NDFCOPY is needed first as MANIC seems not to deal with the revised
# WCS correctly leaving a dangling WCS axis.  This in turn causes
# COLLAPSE to fail when the input NDF is supplied with a section,
# because there's no corresponding pixel axis when it is passing a
# section.  The NDFCOPY removes the time WCS axis.  MANIC merely
# reshapes and sets the bounds of the second axis.
            $params = "in=$in($wcs_spec_bounds,,1) ";
            $params .= "out=$tempfile trim trimwcs";
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

            $params = "in=$tempfile axes=[1,0] ";
            $params .= "out=$tempfile2 lbound=1 ubound=$MAX_RECEPTOR";
            $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Fill this mean-spectrum array with bad values to allow for any
# receptor disabled during observing or failed to pass quality control
# during reduction.
            $params = "in=$tempfile2 out=$mean_spectra[$obs] newval=Bad ";
            $params .= "section=','";
            $Mon{'kappa_mon'}->obeyw( "chpix", "$params" );

# Create a VARIANCE component filled with bad values.
            $params = "ndf=$mean_spectra[$obs] variance=Data";
            $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );

# Analyse by receptor
# ===================

# One reason for this is reduce the data volume; the raw data were
# divided to avoid demanding too much storage or memory at any one
# time.
            my @time_bounds;
            for ( my $r = 1; $r <= $nreceptor; $r++ ) {
               my $no_times = 0;

# Set up some temporary files.
               my $fulltimes = new ORAC::TempFile( 0 );
               my $temp0file = new ORAC::TempFile( 0 );
               my $temp1file = new ORAC::TempFile( 0 );
               my $temp2file = new ORAC::TempFile( 0 );
               my $temp3file = new ORAC::TempFile( 0 );
               my $tempvar = new ORAC::TempFile( 0 );

# Combine all the subfiles for the current receptor.
# --------------------------------------------------
               my $receptor = $array->receptor( $r );
               if ( $r == 1 ) {
                  orac_print "Concatenate time series for receptor $receptor";
               } elsif ( $r == $nreceptor ) {
                  orac_print ", $receptor.\n";
               } else {
                  orac_print ", $receptor";
               }

               my $insub;
               if ( $Obj->nfiles > 1 ) {
                  foreach my $i ( 1 .. $Obj->nfiles ) {
                     $insub = $Obj->file( $i );

# We need the dimensions of the input file for later.
                     my ( $lbnd, $ubnd, $dims, $nel );
                     if ( $r == 1 ) {
                        _GET_DIMENSIONS_ FILE=$insub
                        $lbnd = $_GET_DIMENSIONS_{LBOUND};
                        $ubnd = $_GET_DIMENSIONS_{UBOUND};
                        $dims = $_GET_DIMENSIONS_{DIMS};
                        $nel = $ubnd->[0] - $lbnd->[0] + 1;
                        push @time_bounds, $lbnd->[2] + $no_times, $ubnd->[2] + $no_times;
                        $no_times += $ubnd->[2] - $lbnd->[2] + 1;
                     }

# Concatenate the spectra for the receptor.
# -----------------------------------------

# Form a profile for each receptor throughout a whole observation.
                     if ( $i == 1 ) {
                        $params = "in=$insub($wcs_spec_bounds,$r,) out=$fulltimes";
                        $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

                     } else {

# Shift the origin of the time and receptor index during concatenation.
# Exclude the very noisy peripheries.
                        my $time_origin = $time_bounds[-2] - 1;
                        $params = "shift=[0,0,$time_origin] ";
                        $params .= "in=$fulltimes p1=$insub($wcs_spec_bounds,$r,) out=$temp0file";
                        $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

# Ready for the next slice to concatenate.  Another, but brave, way
# is to make the input and output the same on PASTE.
                        $params = "in=$temp0file out=$fulltimes";
                        $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
                     }
                  }

# No concatenation is required so avoid unnecessary processing.
               } else {
                  $insub = $Obj->file( 1 );
                  $fulltimes = "$insub($wcs_spec_bounds,$r,)";
               }

# Collapse along the time axis.  Use a clipped mean to exclude single
# spectra with strongly negative values and very bright features that
# could be present in just a few of the receptors.
               my $params = "in=$fulltimes out=$temp1file estimator=cmean wlim=0.0 axis=3";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Reduce the noise by smoothing.
               $params = "in=$temp1file out=$temp2file box=[25,1] estimator=mean";
               $Mon{'kappa_mon'}->obeyw( "block", "$params" );

# There is no variance available.  We shall need this to weight
# observations during a night, if conditions have changed or an
# observation was interrupted and broken into parts.  This is only
# approximation, but should be adequate.
               $params = "ia=$temp1file ib=$temp2file out=$tempvar ";
               $params .= "exp='(IA-IB)**2'";
               $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Insert the errors just found into the smoothed spectrum copying from
# the DATA_ARRAY to VARIANCE components.
               $params = "ndf=$temp2file from=$tempvar comp=Data";
               $Mon{'ndfpack_mon'}->obeyw( "setvar", "$params" );

# Store the smoothed mean spectrum for later analysis.
               my $ri = substr( $receptor, 1, 2 ) + 1;
               my $receptor_offset = $ri - $r;
               $params = "shift=[0,$receptor_offset] ";
               $params .= "in=$mean_spectra[$obs] p1=$temp2file out=$temp3file";
               $Mon{'kappa_mon'}->obeyw( "paste", "$params" );

               $params = "in=$temp3file out=$mean_spectra[$obs]";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
            }
         }

# Average the spectra for all the observations on the date, weighting by
# the errors to allow for the different signal-to-noise ratios between
# observations.
         my $mean_spectra_by_date;
         $mean_spectra_by_date = new ORAC::TempFile( 0 );
         if ( $number_on_date > 1 ) {
            my $inlist = write_file_list( @mean_spectra );
            $params = "in=^$inlist out=$mean_spectra_by_date estimator=wmean";
            $Mon{'kappa_mon'}->obeyw( "mstats", "$params" );

         } else {
            $mean_spectra_by_date = $mean_spectra[ 0 ];
         }

# At this point mean_spectra_by_date contains the mean spectra for all
# observations being reduced from the current date.  There is one
# spectrum per receptor.

# Obtain the pixel bounds of the trimmed spectra.
         _GET_DIMENSIONS_ FILE=$mean_spectra_by_date
         my $trim_lbnd = $_GET_DIMENSIONS_{LBOUND};
         my $trim_ubnd = $_GET_DIMENSIONS_{UBOUND};
         my $lower_bound = $trim_lbnd->[0];
         my $upper_bound = $trim_ubnd->[0];

# Set up some temporary files.
         my $previousfile = new ORAC::TempFile( 0 ); # Previous itaration's ratios
         my $ratiofile = new ORAC::TempFile( 0 ); # Current iteration's ratios
         my $spectfile = new ORAC::TempFile( 0 ); # Mean spectra for each receptor
         my $temp4file = new ORAC::TempFile( 0 );
         my $temp5file = new ORAC::TempFile( 0 ); # Thresholded spectra for each receptor
         my $temp6file = new ORAC::TempFile( 0 ); # Integrated flux over thresholded spectra
         my $temp8file = new ORAC::TempFile( 0 ); # Sum of differences between current and
                                                  # previous ratios
         my $temp9file = new ORAC::TempFile( 0 );
         my $ratiocube = new ORAC::TempFile( 0 );

# Iteration
# =========
         my $ratio_shift = 10000.0;
         my $previous_shift = $ratio_shift + 1.;
         my $first = 1;
         my $iter = 1;
         my $derive_flat = 1;
         my $max_thresh = 100000.;
         $nval = $MAX_RECEPTOR;

# A one-percent shift is about 0.001 per receptor, and the best data will
# have errors several times that.  Stop if the solution is diverging, i.e.
# the shifts are increasing.
         while ( $ratio_shift > 0.01 && $ratio_shift < $previous_shift &&
                 $iter <= $maxiter && $nval > 1 ) {
            orac_print "\nIteration $iter:";

# Apply the previous iterations to the fit, except when there was not
# a previous iteration.
            if ( $first ) {
               $params = "in=$mean_spectra_by_date out=$spectfile trim trimwcs";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Grow the vector ratios into an array with the dimensions of the mean
# spectra.
            } else {
               $params = "in=$previousfile out=$temp9file axes=[0,1] ";
               $params .= "lbound=$lower_bound ubound=$upper_bound";
               $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Apply the ratio to the spectra.
               $params = "in1=$mean_spectra_by_date in2=$temp9file out=$temp4file";
               $Mon{'kappa_mon'}->obeyw( "div", "$params" );
               $params = "in=$temp4file out=$spectfile trim trimwcs";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );
            }

# Section to select the astronomical signal.
# ------------------------------------------

# It is possible to use more-sophisticated clump finding... but it is unclear
# whether this is justified given we assume that all receptors are receiving
# the same flux, which we know is incorrect.

# First the non-iterative simple approach, summing over the line.
            if ( $sum ) {

# Collapse along the velocity axis giving the mean emission.  We do
# not care if some are entirely bad. (wlim=0).
               $params = "in=$spectfile($flat_range,,) out=$temp6file estimator=mean wlim=0.0 axis=1";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

            } else {

# Calculate clipped statistics on the array.
               $params = "ndf=$spectfile clip=[2,2.0,2.5,3.0] order";
               $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
               ( $ORAC_STATUS, my $sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );
               ( $ORAC_STATUS, my $median ) = $Mon{'kappa_mon'}->get( "stats", "median" );

# Threshold to select the astronomical signal.
               my $clip = 4.0;
               my $thresh = min( $median + $clip * $sigma, $max_thresh );
               my $fs_thresh = sprintf( "%.4f", $thresh );
               orac_print " Set threshold to $fs_thresh.\n";
               $params = "in=$spectfile out=$temp5file thrlo=$thresh thrhi=1.0e30 newlo=bad newhi=1E30";
               $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );

# Aim to prevent divergence especially for small observations and ones
# with bad baselines that can be rejected automatically because there
# are too few.  After rejecting a receptor because its value lie below the
# threshold, more weight is given to wobbly baselines, which in turn
# raises the bar causing more decent receptors to be rejected. 10% is
# a number picked out of the air and will likely need to be changed.
               $max_thresh = $thresh * 1.10;

# Want to avoid having too few and especially no good values that will
# cause problems later.  The number is somehat arbitrary.
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp5file" );
               ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
               if ( $numgood < 10 * $nreceptor ) {
                  orac_warn "Unable to calculate the flat field.  There are too few data data values\n";
                  orac_warn "either because the scan is small or lacks tangible astronomical signal.\n";
                  $derive_flat = 0;
                  last;
               }

# Collapse along the velocity axis giving the summed emission.
               $params = "in=$temp5file out=$temp6file estimator=sum wlim=0.0 axis=1";
               $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );
            }

# Obtain the number of good receptors.
            $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp6file" );
            ( $ORAC_STATUS, $nval ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

# Extract the mean value for the reference receptor.
            my $array = new JCMT::ACSIS::Array( File => $temp6file );
            my $pixel = substr( $ref, 1, 2 ) + 1;

            $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp6file($pixel)" );
            ( $ORAC_STATUS, my $ref_numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

# Try the reserve receptor if the designated reference receptor is bad.
            if ( $ref_numgood == 0 ) {
               $pixel = $array->pixel( $reserve_ref );
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp6file($pixel)" );
               ( $ORAC_STATUS, my $res_numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

# Since neither receptor has valid values the means cannot be
# normalised.  The choice here is either to try a good (central) receptor
# to normalise the good receptors but the flux may be affected, or to
# fail to apply a flat field.  Do the latter.
               if ( $res_numgood == 0 ) {
                  orac_warn "Unable to flat field $in as both $ref and $reserve_ref are bad.\n";
                  next OBJECT;
               }
               orac_say "  Using the reserve reference receptor: $reserve_ref.";
               $useref = $reserve_ref;
            } else {
               $useref = $ref;
            }

# Obtain the mean value for the reference receptor or its reserve.
            ( $ORAC_STATUS, my $refvalue ) = $Mon{'kappa_mon'}->get( "stats", "mean" );

# Normalize to the value in the reference receptor.
            $Mon{'kappa_mon'}->obeyw( "cdiv", "in=$temp6file out=$ratiofile scalar=$refvalue" );

            if ( ! $first && $nval > 1 ) {

# Update the ratios for the factors derived in the current iteration.
               $params = "in1=$previousfile in2=$ratiofile out=$temp9file";
               $Mon{'kappa_mon'}->obeyw( "mult", "$params" );
               $params = "in=$temp9file out=$ratiofile";
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Sum the differences for the non-reference receptors.  Since the
# reference receptor is by defintion set to 1.0, there is one fewer
# degree of freedom.
               $params = "ia=$ratiofile ib=$previousfile out=$temp8file exp='abs(ia-ib)'";
               $Mon{'kappa_mon'}->obeyw( "maths", "$params" );
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp8file" );
               ( $ORAC_STATUS, my $total ) = $Mon{'kappa_mon'}->get( "stats", "total" );
               $previous_shift = $ratio_shift;
               $ratio_shift = $total / max( $nval - 1, 1 );
               my $fs_ratio = sprintf( "%.4f", $ratio_shift );
               orac_say "  Ratio shift is $fs_ratio.";
               if ( $ratio_shift > $previous_shift ) {
                  orac_say "  Ratio shift is not converging.";
                  last;
               }
            }

# Prepare for the next iteration.  This iteration's ratios is the
# next iteration's previous set of ratios.
            $params = "in=$ratiofile out=$previousfile";
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$params" );

# Report the receptor ratios.
# ---------------------------

# It does seem a little clunky to have to call STATS for every element.
# LOOK only outputs a single value to a parameter. Along the way derive
# the index within the mean_spectra array for the receptor.  The receptors
# run from H00 to H15, but the indices are 1 to MAX_RECEPTOR (16).
            for ( my $i = 1; $i <= $MAX_RECEPTOR; $i++ ) {
               my $receptor = $array->receptor( $i );
               if ( defined( $receptor ) ) {
                  my $ri = substr( $receptor, 1, 2 ) + 1;

                  $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$ratiofile($ri)" );
                  ( $ORAC_STATUS, my $ratio ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
                  $flat_ratio{$receptor} = $ratio if ( uc($ratio) ne "BAD" );

# Errors will grow because of the incremental calculation of the ratios
# at each division of the new ratios into the old ratios.  While the
# first set of errors may slightly underestimate the true internal errors,
# but it is much better than inflated errors going up roughly as the
# square root of the number of iterations before convergence.  However,
# the errors will need scaling for the different ratios.
                  if ( $first ) {
                     $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$ratiofile($ri) comp=error" );
                     ( $ORAC_STATUS, my $ratio_error ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
                     $flat_ratio_error{$receptor} = $ratio_error if ( uc($ratio_error) ne "BAD" );

                     $first_flat_ratio{$receptor} = $flat_ratio{$receptor};
                  }
               }
            }

# Report the current set of ratios.
            orac_say "";
            my $type = "Flat field normalisation";
            _PRETTYPRINT_RECEPTOR_QA_ HASH=\%flat_ratio TYPE=$type

            $iter++;
            $first = 0;
         }

# Scale the first-cycle errors to their final ratios.
         for ( my $i = 1; $i <= $MAX_RECEPTOR; $i++ ) {
            my $receptor = $array->receptor( $i );
            if ( defined( $receptor ) &&
                 defined( $first_flat_ratio{$receptor} ) &&
                 $first_flat_ratio{$receptor} > 0 ) {
               $flat_ratio_error{$receptor} *= $flat_ratio{$receptor} /
                                               $first_flat_ratio{$receptor};
            }
         }

# We only report the errors after the iterations cease, so they are
# adjacent to the ratios.
         my $type = "Flat field error";
         _PRETTYPRINT_RECEPTOR_QA_ HASH=\%flat_ratio_error TYPE=$type

# Apply the flat field to each file in each observation for the
# current night.
         if ( $derive_flat & $apply ) {
            foreach my $Obj ( @Objs ) {

# Obtain the receptors present in the current observation.  Note we
# assume that different subscans are not treated differently in QA
# and interference filtering.
               $in = $Obj->file;
               $array = new JCMT::ACSIS::Array( File => $in );
               my @receptors = $array->receptors;
               $nreceptor = scalar( @receptors );

# Extract the relative fluxes for the current observation.
               my @ratios;
               foreach ( @receptors ) {
                  if ( defined( $flat_ratio{$_} ) ) {
                     push @ratios, $flat_ratio{$_};
                  } else {
                     push @ratios, 1.0;
                  }
               }

               my $ratiolist = 'ratio.list';
               open ( my $fh, '>', $ratiolist ) or
                 orac_err "Could not open file $ratiofile\n";
               print $fh join( "\n", @ratios );
               close $fh;
               $params = "auto freename=$ratiolist dtype=_REAL ";
               $params .= " shape=$nreceptor ndf=$ratiofile";
               $Mon{'kappa_mon'}->obeyw( "trandat", "$params" );
               unlink $ratiolist;

# Grow the vector of receptor ratios into a cube.
               $params = "in=$ratiofile out=$ratiocube axes=[0,1,0] lbound=[";
               $params .= join( ',', $lbound->[0], $lbound->[2] );
               $params .= "] ubound=[";
               $params .= join( ',', $ubound->[0], $ubound->[2] );
               $params .= "]";
               $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

               foreach my $i ( 1 .. $Obj->nfiles ) {
                  my ( $in, $out ) = $Obj->inout( "_ff", $i );

# Divide this ratio cube into the input cube, creating the flat-fielded
# output.
                  $params = "in1=$in in2=$ratiocube out=$out";
                  $Mon{'kappa_mon'}->obeyw( "div", "$params" );

# Set the units back to what they were.
                  $Mon{'ndfpack_mon'}->obeyw( "setunits", "ndf=$out units=$units" );

# Update the Object.
                  $Obj->file( $i, $out );

# Request that the output file be removed upon completion of group processing.
                  $Grp->push_intermediates( $out );

                  orac_say "$in to $out:";
                  orac_say " Removed flat-field.\n";
               }
            }
         }

# Log the flat field.
         _WRITE_FLATFIELD_LOG_ RATIO=\%flat_ratio ERROR=\%flat_ratio_error REF=$useref OBSNUMBERS=\@obsnums
      }
   }
}

# Tidy up output.
orac_print "\n";

RETURN:
