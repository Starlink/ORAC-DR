# -*-cperl-*-

=head1 NAME

_CREATE_BASELINE_MASK_

=head1 DESCRIPTION

This primitive creates a mask that masks out line emission, thus
preserving baseline regions. It does so by smoothing the input cube
first in the two spatial dimensions, then in the frequency
dimension. Baselines are then fit, and clipping levels are such that
the resulting mask masks out any emission.

=head1 ARGUMENTS

=over 4

=item CLIP = STRING (Given)

A comma-separated list of standard-deviation limits for progressive
clipping of outlying binned (see NUMBIN) residuals to an initial
linear fit to the baseline.  This is used to determine the fitting
ranges automatically.  Its purpose is to exclude features that are not
part of the trends.

Pixels are rejected at the ith clipping cycle if they lie beyond plus
or minus CLIP(i) times the dispersion about the median of the
remaining good pixels.  Thus lower values of CLIP will reject more
pixels.  The normal approach is to start low and progressively
increase the clipping factors, as the dispersion decreases after the
exclusion of features.

Between one and five values may be supplied. The minimum value is 1.0.
If undefined, the default for MFITTREND's CLIP is used, which is fine
in most cases.  Where the emission is intense and extends over a
substantial fraction of the spectrum, harsher clipping is need to
avoid biasing the fits.  This argument can be overridden by the
RECPAR_BASELINE_EMISSION_CLIP recipe parameter.  [undef]

=item FREQUENCY_SMOOTH = INTEGER (Given)

The number of channels over which the frequency axis is smoothed. [25]

=item GROUP = INTEGER (Given)

Defines how group handling is done. 0 means the current Frame object
is used, 1 means the current Group object is used, and 2 means every
Frame member in the current Group is used. [0]

=item KNOTS = INTEGER (Given)

The number of knots to use if spline fitting is being applied.  An
interpolating spline is limited to a 11 knots with a default of 4.
The default is 12 knots for a smoothing spline and up to 60 may be
used.  This argument can be overridden by the RECPAR_BASELINE_KNOTS
recipe parameter.  [!]

=item NUMBIN = INTEGER (Given)

The number of smoothing bins to used for the baseline determination
and hence the emission masking.  The default lets MFITTREND choose
(currently 32 bins), and is normally sufficient for narrow lines.  For
line forests more resolution is needed so as not to include emission
in the majority of bins, and so a value that will provide a few bins
across the a line's width is better, typically 128, which is the default
if the RECPAR_LINEFOREST_BASELINE recipe parameter is true and KAPPA
Version 2.4-4 or later performs the baseline fitting.  This
argument can be overridden by the RECPAR_BASELINE_NUMBIN recipe parameter.
[]

=item ORDER = INTEGER (Given)

The order of fit used for the baseline.  A special value of "spline"
uses a spline fit, which is only suitable for narrow-line spectra.
This argument can be overridden by the RECPAR_BASELINE_ORDER recipe
parameter. [1]

=item REPORT = BOOLEAN (Given)

Whether or not to report the baseline fitting order and fit model.
This primitive is called by others that may or may not have already
reported this information.  To avoid duplication, as with
L<_REMOVE_BASELINE_THROUGH_SMOOTHING_|_REMOVE_BASELINE_THROUGH_SMOOTHING_>
by setting this argument to false.  [1]

=item SPATIAL_SMOOTH = INTEGER (Given)

The number of pixels in both spatial dimensions over which the cube is
smoothed. [3]

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS cubes.

=item *

If there are fewer than five pixels in either of the spatial
dimensions, then spatial smoothing is not performed.

=item *

The PRODUCT header is set to 'blmask'.

=item *

The names of the baseline masks are stored in the BASELINE_MASKS uhdr
of whichever object is used (see the GROUP argument) as an array
reference.

=back

=head1 OUTPUT DATA

=over 4

=item *

The output baseline mask with suffix _blmask.

=back

=head1 TASKS

KAPPA: BLOCK, MFITTREND.

=head1 REQUIRED PERL MODULES

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

Malcolm J. Currie E<lt>mjc@star.rl.ac.ukE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2009, 2014, 2016, 2018, 2022 Science and
Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

my $forest = 0;
if ( starversion_gt( 'KAPPA', 'v2.4-3' ) ) {
   $forest = ( defined( $Frm->uhdr( "RECPAR_LINEFOREST_BASELINE" ) ) ?
               $Frm->uhdr( "RECPAR_LINEFOREST_BASELINE" )            :
               $forest );
}

my $clip = get_prim_arg( $_PRIM_ARGS_, "CLIP", undef );
my $group = get_prim_arg( $_PRIM_ARGS_, "GROUP", 0 );
my $freqsmooth = get_prim_arg( $_PRIM_ARGS_, "FREQUENCY_SMOOTH", 25 );
my $spatsmooth = get_prim_arg( $_PRIM_ARGS_, "SPATIAL_SMOOTH", 3 );
my $order = get_prim_arg( $_PRIM_ARGS_, "ORDER", 1 );
my $knots = get_prim_arg( $_PRIM_ARGS_, "KNOTS", 12 );
my $report = get_prim_arg( $_PRIM_ARGS_, "REPORT", 1 );
my $numbin = get_prim_arg( $_PRIM_ARGS_, "NUMBIN", ( $forest ? undef: 128 ) );

# Override order and number of averaging bins if we've been given a
# recipe parameter.
$order = ( defined( $Frm->uhdr( "RECPAR_BASELINE_ORDER" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_ORDER" )            :
           $order );
$knots = ( defined( $Frm->uhdr( "RECPAR_BASELINE_KNOTS" ) ) ?
           $Frm->uhdr( "RECPAR_BASELINE_KNOTS" )            :
           $knots );
my $spline = 1 if $order =~ /^spl/;

$numbin = ( defined( $Frm->uhdr( "RECPAR_BASELINE_NUMBIN" ) ) ?
            $Frm->uhdr( "RECPAR_BASELINE_NUMBIN" )            :
            $numbin );

# Override clipping of residuals by a defined recipe parameter.
$clip = ( defined( $Frm->uhdr( "RECPAR_BASELINE_EMISSION_CLIP" ) ) ?
          $Frm->uhdr( "RECPAR_BASELINE_EMISSION_CLIP" )            :
          $clip );
if ( ref( $clip ) eq 'ARRAY' ) { $clip = join( ",", @{ $clip } ) };

# Select the objects to analyse.
my @objs;
if( $group == 0 ) {
  push @objs, $Frm;
} elsif( $group == 1 ) {
  push @objs, $Grp;
} elsif( $group == 2 ) {
  @objs = $Grp->members;
}

foreach my $Obj ( @objs ) {

  my @baseline_masks;
  my $params;

  orac_print "Creating baseline region mask.\n";

  foreach my $i ( 1 .. $Obj->nfiles ) {

    my ( $in, $mask ) = defined( $Obj->uhdr( "JSA_TILES" ) ) && $Obj->uhdr( "JSA_TILES" ) ?
                        $Obj->inout_jsatile( "_blmask", $i ) :
                        $Obj->inout( "_blmask", $i );

# Need to ensure that the maximum number of bins permitted by MFITTREND
# is not exceeded.  This is currently half of the number of channels.
    _GET_DIMENSIONS_ FILE=$in
    my $dims = $_GET_DIMENSIONS_{DIMS};
    $numbin = min( $numbin, int( $dims->[2] / 2 ) );

    my $temp2 = new ORAC::TempFile( 0 );
    my $temp2file = $temp2->file;

    # Smooth the cube.
    orac_say " Smoothing cube $in with [$spatsmooth,$spatsmooth,$freqsmooth] tophat.";
    $params = "in=$in out=$temp2file box=[$spatsmooth,$spatsmooth,$freqsmooth] estimator=mean";
    $Mon{'kappa_mon'}->obeyw( "block", "$params" );

    # Find line-free regions in the smoothed cube. We do this by doing
    # an 'auto' fit with a high-order baseline and rejecting outliers by
    # clipping.
    my $temp3 = new ORAC::TempFile( 0 );
    my $temp3file = $temp3->file;
    $params = "in=$temp2file out=$temp3file axis=3 auto ";
    if ( $spline ) {
      $params .= "fittype=spline interpol=false knots=$knots ";
    } else {
      $params .= "order=$order ";
    }
    $params .= "mask=$mask method=single variance subtract=false";
    $params .= " numbin=$numbin" if defined( $numbin );
    $params .= " clip=[$clip]" if defined( $clip );
    $params .= " forest" if $forest;
    $Mon{'kappa_mon'}->obeyw( "mfittrend", "$params" );

    # Report to user.   Only report the fitting method, if requested.
    orac_print " $mask: baseline region mask created.\n";
    if ( $report ) {
      if ( $spline ) {
        orac_print "Baselines were fitted to a spline with 12 knots.\n";
      } else {
        orac_print "Baselines were fitted to a polynomial of order $order.\n";
      }
    }

    $baseline_masks[$i] = $mask;

    _SET_FILE_FITS_ITEM_ FILE=$mask KEY=PRODUCT VALUE=blmask

    # Request that the mask be removed at the end of group processing.
    $Grp->push_intermediates( $mask )

  }

  # Store the baseline mask names.
  $Obj->uhdr( "BASELINE_MASKS", \@baseline_masks );

}

# Tidy-up output.
orac_print "\n";
