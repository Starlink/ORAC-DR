=head1 NAME

_FLAG_HIGHFREQ_INTERFERENCE_SPECTRA_

=head1 DESCRIPTION

This primitive identifies and masks spectra affected by high-frequency
noise.

It achieves this through the following steps:
  -  Copies the current time-series cube to form a mask cube.
  -  Analyses the spectral-time-series image for each good receptor in
     turn.
     o  Applies a one-dimensional Laplacian edge filter to all the
        spectra, trimming the outer 15% where noise is always present.
        This approximates to a difference of Gaussian filter.
     o  Derives an rms `edginess' array to provide a rectified signal.
     o  Averages the signal along the spectral axis to form an edginess
        profile through the time series.
     o  Corrects for drifts or steps in the profile.
     o  Rejects spectra whose mean edginess exceeds the median level plus
        a nominated number of clipped standard deviations (see Arguments
        EDGE_CLIP and THRESH_CLIP).
     o  Pastes bad values in the mask cube at the location of any rejected
       spectrum.
  -  Applies the mask to the input cube.

It has the advantage of retaining good data for receptors that are only
occasionally bad, rather than rejecting all spectra for a receptor
as _MASK_BAD_BASELINE_* primitives do.

There is an option to detect bands of spectra affected by `ringing'
interference, where the same high-frequency ripple extends over tens
of spectra and strength has a steady increase then decline.  This is
enabled through Argument RINGING.

=head1 ARGUMENTS

=over 4

=item DILATE = INTEGER (Given)

The thresholding approach for rejection of the noisy spectra can leave
affected spectra at the start and end of episodes of interference.
This is particularly the case when there is ringing present, which
amplifies the standard deviation of the normal level used for the
threshold.  If this parameter is set to 1 or 2, the thresholded
masked regions of high interference are dilated by one or two pixels
respectively to catch the start and end spectra partly affected by the
interference.  For other values no dilation occurs.  The default is 2
if Argument RINGING is true, and 0 otherwise.  []

=item EDGE_CLIP = STRING (Given)

The standard deviation to clip iteratively the summed-edginess
profile in order to measure the mean and standard deviation of the
profile unaffected by bad spectra.  A comma-separated list
will perform iterative sigma clipping of outliers, but standard
deviations in the list should not decrease.  This argument
can be overridden by the RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP
uhdr via the recipe parameter system.  ["2.0,2.0,2.5,3.0"]

=item MIN_SPECTRA = INTEGER (Given)

Minimum number of good spectra for high-frequency interference
filtering to be attempted. This argument can be overridden by the
RECPAR_HIGHFREQ_INTERFERENCE_MIN_SPECTRA uhdr via the recipe parameter
system.  This should be at least 10.  [20]

=item RINGING = BOOLEAN (Given)

Whether or not to test for ringing in the spectra.  This argument
can be overridden by the RECPAR_HIGHFREQ_RINGING uhdr via the recipe
parameter system.  Even if set to 1 (true), at least RINGING_MIN_SPECTRA
spectra are required to give a sufficient baseline against which to
detect spectra with ringing.  [0]

=item RINGING_ALL = BOOLEAN (Given)

If RINGING is true, should it be applied to to all receptors.  By
default ringing filtering is limited to Receptor H07.  This argument
can be overridden by the RECPAR_HIGHFREQ_RINGING_ALL uhdr via the
recipe parameter system. [0]

=item RINGING_MIN_SPECTRA = INTEGER (Given)

Minimum number of good spectra for ringing filtering to be attempted.
This argument can be overridden by the RECPAR_HIGHFREQ_RINGING_MIN_SPECTRA
uhdr via the recipe parameter system.  [400]

=item THRESH_CLIP = REAL (Given)

The number of standard deviations at which to threshold the noise
profile above the median level.  This argument can be overridden by
the RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP uhdr via the recipe
parameter system.  The default is 4.0 is RINGING is true and 3.0
otherwise.  This is because we do not want to bifurcate any ringing
regions that would cause the clump to be split.  The weaker outliers
are taken care of via the dilation of non-correlated noise bands
when ringing is expected.  []

=back

=head1 NOTES

=over 4

=item *

This primitive is suitable for ACSIS time-series data comprising at
least 15 spectra.

=item *

This primitive is suitable for spectral-line observations.

=item *

This primitive will not run if the HIGHFREQ_INTERFERENCE uhdr in the current
Frame object is defined and false.

=item *

The 85% trimming of the spectra is the same trim applied in the
QA primitives.

=item *

The primitive excludes analysis of the bad receptors, defaulting to
those listed in either the master (F<$ORAC_DATA_CAL/index.bad_receptors>)
or the local index F<$ORAC_DATA_OUT/index.bad_receptors_qa>).

=back

=head1 OUTPUT DATA

=over 4

=item *

A cleaned version of the supplied time-series cube in which the noisy
spectra are set to bad.  It has the suffix _hfimasked (for High
Frequency Interference).

=back

=head1 TASKS

CUPID: FINDBACK;
KAPPA: COPYBAD, COLLAPSE, MANIC, MATHS, NDFCOPY, PASTE, SETORIGIN,
       SETTYPE, SLIDE, STATS, THRESH;
SMURF: FIXSTEPS.

=head1 REQUIRED PERL MODULES

JCMT::ACSIS::Array.

=head1 AUTHORS

Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2011-2013 Science & Technology Facilities Council.
All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

use JCMT::ACSIS::Array;

# Inquire whether or not  non-linear baseline filtering is required.
my $apply = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE" ) ) ?
            $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE" )              :
            1 );
my $type = lc( $Frm->uhdr( "ORAC_OBSERVATION_TYPE" ) );
if ( ! $apply ) { goto RETURN }

# Handle arguments.
# =================

my $edge_clip = get_prim_arg( $_PRIM_ARGS_, "EDGE_CLIP", "2.0,2.0,2.5,3.0" );
my $ringing = get_prim_arg( $_PRIM_ARGS_, "RINGING", "0" );
my $ringing_all = get_prim_arg( $_PRIM_ARGS_, "RINGING_ALL", "0" );
my $ringing_min_spec = get_prim_arg( $_PRIM_ARGS_, "RINGING_MIN_SPECTRA", "400" );
my $min_spec = get_prim_arg( $_PRIM_ARGS_, "MIN_SPECTRA", "20" );
my $thresh_def = $ringing ? 4.0 : 3.0;
my $thresh_clip = get_prim_arg( $_PRIM_ARGS_, "THRESH_CLIP", $thresh_def );
my $dilate_def = $ringing ? 2 : 0;
my $dilate = get_prim_arg( $_PRIM_ARGS_, "DILATE", $ringing );

# Handle recipe parameter overrides.

# Generate a comma-separated list if this has been turned into a stringified
# ARRAY reference.
$edge_clip = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP" ) ) ?
             $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_EDGE_CLIP" )              :
             $edge_clip );
if ( ref( $edge_clip ) eq 'ARRAY' ) { $edge_clip = join( ",", @{ $edge_clip } ) }

$ringing = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING" ) ) ?
             $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING" )            : $ringing );

$ringing_all = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING_ALL" ) ) ?
                 $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING_ALL" )    : $ringing_all );

$ringing_min_spec = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING_MIN_SPECTRA" ) ) ?
                   $Frm->uhdr( "RECPAR_HIGHFREQ_RINGING_MIN_SPECTRA" )              :
                   $min_spec );

$thresh_clip = ( defined( $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP" ) ) ?
             $Frm->uhdr( "RECPAR_HIGHFREQ_INTERFERENCE_THRESH_CLIP" )                :
             $thresh_clip );

# Convert list of standard-deviation clip levels to an array.
my @clips = split( ',', $edge_clip );

# Constrain parameters to allowed values.
# ---------------------------------------

# Sigma clipping levels should not decrease. Do not set the initial
# threshold too low lest we exclude acceptable but slightly deviant
# spectra in an otherwise good set.
my @clip_sigma = ();
my $last = 2.0;
foreach ( @clips ) {
   $_ =~ tr/["']+//d;
   push @clip_sigma, max( $last, $_ );
}

$edge_clip = "[" . join( ",", @clip_sigma ) . "]";

# Smaller than this give poorer results emprically.
$min_spec = max( 10, $min_spec );

# Heading for commentary
# ======================

orac_say "\n\nRemove high-frequency interference";
my $underline = "-" x 50;
orac_say "$underline\n";

# Are there sufficient spectra?
# =============================
#
# First determine if there are sufficient spectra to do a meaningful
# analysis.  Sum through all the files, but almost certainly if there is
# more than one file, there are sufficient spectra.  The default limit is
# arbitrary trying to permit removal of bad spectra in small rasters.
_GET_NUMBER_OF_SPECTRA_
my $nspectra = $_GET_NUMBER_OF_SPECTRA_{COUNT};

if ( $nspectra < $min_spec ) {
   orac_warn "Too few spectra ($nspectra) for high-frequency-interference analysis.  The minimum is $min_spec.\n";
   goto RETURN;
}

# Form arrays of bad detectors.
# =============================

# The default argument of $Cal->bad_receptors is "INDEXORMASTER".  However,
# the master index is far too underpopulated and can lead to picking an
# entry that is months before or after the date of the observation being
# processed.  Valid receptors can then be rejected and bad ones included.
# While this could be circumvented, such as making a private
# $ORAC_DATA_CAL/index.bad_receptors and enter a null (H14) entry if
# a night has no bad receptors.  A better technique is to use the
# -calib bad_receptors command-line option, through which one can also
# supply a list of bad receptors directly.  Here we specify INDEX to only
# use the pipeline-generated bad receptors.
#
# The reading of INDEX also sets up the survey (survey_br).
$Cal->bad_receptors( "INDEX" );
my @baddets = $Cal->bad_receptors_list;
orac_say "  Receptors disabled by the calibration system: " . join( ",", sort @baddets );

# Get the mapping between receptors and index along the second
# dimension of the time-series array.
my $in = $Frm->file;
my $array = new JCMT::ACSIS::Array( File => $in );

# Form set of receptors that are not bad in the master list.
my @receptors = grep{ my $x=$_; not grep { $x =~ /\Q$_/i} @baddets} $array->receptors;
@receptors = sort @receptors;
my $nreceptors = scalar( @receptors );

# Set some other parameters.
# ==========================

# We need at least twice the number of elements in the filtering boxes
# for FIXSTEPS and FINDBACK.
my $boxsize = max( 7, min( $nspectra / 2 - 1, 50 ) );
next if $nspectra < 2 * $boxsize;

# Set spectral limits to trim off the noisy edges if not already done so.
my $spec_percent = "~85%";
if ( defined( $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) &&
     $Frm->uhdr( "SPECTRAL_TRIMMED" ) ) { $spec_percent = "" }

# Ringing filter
# ==============

# See later for a description.  Suffice it to say the filter to remove
# ringing uses FINDCLUMPS.
my $fc_param;
if ( $ringing ) {

# Create configuration-parameter file for FINDCLUMPS.
# ---------------------------------------------------

# The main ones are ClumpFind.MaxBad, ClumpFind.MinPix (although double the
# default it could be set larger to weed out peaks from lines),
# ClumpFind.FwhmBeam, and the dynamic ClumpFind.Tlow added on the command
# line.  ClumpFind.VeloRes could be set to 1 channel.
   $fc_param = new ORAC::TempFile( 1 );
   open my $fc_fh, ">", $fc_param;
   print $fc_fh "ClumpFind.Minpix=50\n";
   print $fc_fh "ClumpFind.AllowEdge=1\n";
   print $fc_fh "ClumpFind.FwhmBeam=0.0\n";
   print $fc_fh "ClumpFind.MaxBad=1\n";
   print $fc_fh "ClumpFind.VeloRes=0\n";
   print $fc_fh "ClumpFind.DeltaT=0.003\n";
   close $fc_fh;
}

# Allow primitive to work on unmerged hybrid data.
# ================================================

# Form separate Frames each with a common SUBSYSNR (subband index) value.
my @subband_Frms;
if ( defined( $Frm->uhdr( "MERGED_HYBRID" ) ) ) {
   push @subband_Frms, $Frm;
} else {
   my @subband_key = ( 'SUBSYSNR' );
   @subband_Frms = $Frm->subfrms( @subband_key );
}
my $nsubsys = scalar( @subband_Frms );

# Specify output and temporary filenames, and their bounds.
# =========================================================

my $params;
my $osuffix = "_hfimasked";
my ( %numvalid, %totspect );

# Loop through all subsystems forming a representative spectrum for each.
# Normally there will be just one band.
my @outfiles;
foreach my $subsys ( 0 .. $nsubsys - 1 ) {

   my $ntimes = 0;
   my @time_bounds;

# Process each subband independently.
   my $Frm = $subband_Frms[$subsys];
   $in = $Frm->file;

   if ( $nsubsys > 1 ) {
      orac_say "Determine spectra exhibiting transient high-frequency " .
               "noise interference in $in ($subsys subsystem).";
   } else {
      orac_say "Determine spectra exhibiting transient high-frequency " .
               "noise interference in $in.";
   }

   my $temp1file = new ORAC::TempFile( 0 );
   my $temp2file = new ORAC::TempFile( 0 );
   my $temp3file = new ORAC::TempFile( 0 );
   my $temp4file = new ORAC::TempFile( 0 );
   my $temp5file = new ORAC::TempFile( 0 );
   my $temp6file = new ORAC::TempFile( 0 );
   my $temp7file = new ORAC::TempFile( 0 );
   my $temp8file = new ORAC::TempFile( 0 );
   my $temp9file = new ORAC::TempFile( 0 );
   my $temp10file = new ORAC::TempFile( 0 );
   my $temp11file = new ORAC::TempFile( 0 );
   my $temp12file = new ORAC::TempFile( 0 );
   my $temp13file = new ORAC::TempFile( 0 );
   my $temp14file = new ORAC::TempFile( 0 );
   my $temp15file = new ORAC::TempFile( 0 );
   my $temp16file = new ORAC::TempFile( 0 );
   my $temp17file = new ORAC::TempFile( 0 );
   my $temp18file = new ORAC::TempFile( 0 );
   my $pasted = new ORAC::TempFile( 0 );

# We need the bounds of the input file's first axis for later.
   _GET_DIMENSIONS_ FILE=$in
   my $lbnd = $_GET_DIMENSIONS_{LBOUND};
   my $ubnd = $_GET_DIMENSIONS_{UBOUND};
   my $nel = $ubnd->[0] - $lbnd->[0] + 1;

# Create a mask NDF.
# ==================
#
# As we shall be filling every receptor plane with a mask of any noisy
# spectra, create a two-dimensional (receptor, time) structure to hold
# the masks for all the spectra for each receptor..
   $params = "out=$temp6file mode=bl variance=no ";
   $params .= "lbound=[1,1] ubound=[$nreceptors,$nspectra]";
   $Mon{'kappa_mon'}->obeyw( "creframe", "$params" );

# Find the interference.
# ======================

# The data thus appear noisy because of a 5-pixel frequency sinusoid
# in an envelope whose amplitude oscillates with at least one other
# frequency (around 60 pixels).

# Form concatenated set of spectra for the current receptor.
# ----------------------------------------------------------
   my ( $samesize, $refbounds );
   my $first_receptor = 1;
   foreach my $receptor ( @receptors ) {
      orac_say "  Receptor $receptor.";
      my $pixel = $array->pixel( $receptor );

# Concatenate the subscans for the receptor.  First time through find
# the bounds of each subscan within the concatenated array and whether
# or not the subscans all have the same number of spectra.  Then
# subsequently use this to save recomputing them.
      if ( $first_receptor ) {
         _PASTE_SUBSCANS_BY_RECEPTOR_ FILE=$pasted RECEPTOR=$receptor SECTION=$spec_percent
         $samesize = $_PASTE_SUBSCANS_BY_RECEPTOR_{SAMESIZE};
         $refbounds = $_PASTE_SUBSCANS_BY_RECEPTOR_{BOUNDS};
         $first_receptor = 0;
      } else {
         _PASTE_SUBSCANS_BY_RECEPTOR_ FILE=$pasted RECEPTOR=$receptor SECTION=$spec_percent SAMESIZE=$samesize BOUNDS=$refbounds
      }
      @time_bounds = @$refbounds;
      $ntimes = $time_bounds[-1] - $time_bounds[0] + 1;

# Perform an approximate Difference of Gaussian filter along the spectral axis.
# -----------------------------------------------------------------------------
#
# Since the interference has lots of zero crossings an edge detector is
# one way to identify this inference signal.  Note as currently coded
# LAPLACE only operates on two-dimensional data and thus includes
# variation along the time-series axis into the signal, rejecting more
# spectra than is necessary.
      orac_say "    Computing squared Laplacian of spectra.";
      $params = "in=$pasted out=$temp8file stype=absolute";
      $params .= " method=nearest abs=[-1,0,0]";
      $Mon{'kappa_mon'}->obeyw( "slide", "$params" );

      $params = "in=$pasted out=$temp9file stype=absolute";
      $params .= " method=nearest abs=[1,0,0]";
      $Mon{'kappa_mon'}->obeyw( "slide", "$params" );

      $params = "ia=$pasted ib=$temp8file ic=$temp9file";
      $params .= " exp=2*IA-IB-IC out=$temp1file";
      $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Form clean 'edginess' profile.
# ------------------------------
#
# Find the rms `edginess' i.e. a positive measure of the deviation from flatness.
# The normalisation is arbitrary so just approximate with the full spectral
# dimension.
      $params = "ia=$temp1file out=$temp2file exp='sqrt(IA*IA/$nel)'";
      $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Collapse the spectral axis using a clipped mean to form average
# edginess for each spectrum for the current detector.
      orac_say "    Collapsing spectra to form average edge detection per spectrum.";
      $params = "in=$temp2file out=$temp3file estimator=mean";
      $params .= " axis=spec trim=f wlim=0.0 variance=false";
      $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# There may be glitches or drift in the levels.  Correct for these
# before thresholding. FIXSTEPS needs double-precision data.  Also the
# JCMTSTATE must be concatenated.
      my $rejected = 1;
      my $ORAC_STATUS;
      if ( $Frm->nfiles == 1 ) {
         orac_say "    Correcting for glitches or drift in the edginess profile.";
         $Mon{'ndfpack_mon'}->obeyw( "settype", "$temp3file type=_DOUBLE" );
         $params = "in=$temp3file out=$temp11file";
         $params .= " meanshift=no dcfitbox=$boxsize";
         my $FIXSTEPS_STATUS = $Mon{'smurf_mon'}->obeyw( "fixsteps", "$params" );
         if ( $FIXSTEPS_STATUS == 0 ) {
            ( $ORAC_STATUS, $rejected ) = $Mon{'smurf_mon'}->get( "fixsteps", "nrejected" );
         }
      }

# Check that FIXSTEPS has not rejected the receptor.  This seems to
# happen extremely rarely when there are no genuine steps and too few
# points in the profile.  In this case we can pass the original profile
# directly to FINDBACK.
      if ( $rejected > 0 ) {
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp3file out=$temp11file" );
      }

# Reset the data type.
      $Mon{'ndfpack_mon'}->obeyw( "settype", "$temp11file type=_REAL" );

# Estimate and subtract the 'continuum' level.
      my $oddboxsize = $boxsize + ( $boxsize + 1 ) % 2;
      $params = "in=$temp11file out=$temp12file box=$oddboxsize sub accept";
      my $FINDBACK_STATUS = $Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# FINDBACK can fall over, but this should not be fatal.
      if ( $FINDBACK_STATUS != ORAC__OK ) {
         if ( starversion_gt( 'CUPID', 'V1.6' ) && $FINDBACK_STATUS == 262703466 ) {
            orac_say "Unable to find the background level due to insufficient good data.";
            orac_say "Attempting to continue.";
            next;
         }
         $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp11file out=$temp12file" );
      }

# Estimate the noise in the profile.
# -----------------------------------

# Ringing and oscillations can amplify the apparent standard deviation.

# Smooth and subtract to estimate the noise.
      $params = "in=$temp12file out=$temp16file fwhm=15";
      $Mon{'kappa_mon'}->obeyw( "gausmooth", "$params" );
      $params = "in1=$temp12file in2=$temp16file out=$temp17file";
      $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

# Identify anomalous spectra.
# ---------------------------

# Estimate the normal level, and standard deviation excluding anomalous spectra.
# This assumes that most of the spectra are good and the drift is not
# significant compared with the noise.
      $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp17file clip=$edge_clip" );
      ( $ORAC_STATUS, my $sigma ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );
      ( $ORAC_STATUS, my $numgood ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
      $numvalid{$receptor} = $numgood;

# Threshold spectra whose mean rms edginess exceeds an outlier limit.
# The median will give a reliable normal signal on which there are
# spikes or broader mountains caused by the oscillating noise in the
# time series for the detector.  In most cases there is no interference
# noise, so protect against drift and signal variations in the timeseries
# causing the dispersion; these should be small compared with the signal
# being detected.
      if ( $numgood > 0 ) {
         my $threshold = $thresh_clip * $sigma;
         orac_say "    Turning off spectra with rms edginess above " . sprintf( "%.4f", $threshold );
         $params = "in=$temp12file out=$temp4file thrlo=-1 newlo=bad thrhi=$threshold newhi=bad";
         $Mon{'kappa_mon'}->obeyw( "thresh", "$params" );
         ( $ORAC_STATUS, my $eject ) = $Mon{'kappa_mon'}->get( "thresh", "numhi" );

# The clipping can leave residual spikes in the edginess profile because
# the standard deviation includes both the noise and actual low-level
# variations.  FINDBACK treats them as features, not background.  Thus
# the threshold is too high.  This next step excludes elements/spectra
# either side of the expunged spectra.  Using BLOCK instead of FINDBACK
# will often remove the edginess signal.  Instead dilate by two
# spectra either side with block after thresholding.
         if ( $dilate == 1 || $dilate == 2 ) {
            $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp4file" );
            ( $ORAC_STATUS, my $numgood_predilate ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );

            my $dilate_box = 2 * $dilate + 1;
            $params = "in=$temp4file out=$temp15file box=$dilate_box wlim=1.0";
            $Mon{'kappa_mon'}->obeyw( "block", "$params" );
            $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp15file out=$temp4file" );

            $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp4file" );
            ( $ORAC_STATUS, my $numgood_postdilate ) = $Mon{'kappa_mon'}->get( "stats", "numgood" );
            $eject += $numgood_predilate - $numgood_postdilate;
         }

         if ( $eject == 1 ) {
            orac_say "       One spectrum removed out of $nspectra.";
         } elsif ( $eject > 0 ) {
            orac_say "       $eject spectra removed out of $nspectra.";
         } else {
            orac_say "       No spectra removed out of $nspectra.";
         }
         $numvalid{$receptor} -= $eject;
         $totspect{$receptor} = $nspectra;

# Ringing filter
# ==============

# Early data exhibit a further effect, a persistent beating oscillatory
# high-frequency noise that has the same phase for all affected spectra,
# just the intensity varies.  The signal this generates peaks about 5%
# of the strong signal.  This is just a first crude attempt at
# filtering them.  They seem to occur between the first type of
# high-frequency interference and only in Receptor H07.
         if ( $ringing && ( $receptor eq "H07" || $ringing_all ) ) {
            my $hfi = new ORAC::TempFile( 0 );
            my $temp19file = new ORAC::TempFile( 0 );
            orac_say "\nFilter spectra affected by correlated ringing noise.";

# Mark previously rejected spectra for the current receptor.
# ----------------------------------------------------------

# Expand the thresholded image to the size of the current receptor's
# plane in the cube comprising the full observation.
            if ( $eject > 0 ) {
               orac_say "    Expand the masked profile.";
               $params = "in=$temp4file out=$temp5file axes=[0,2,3] lbound=" .
                          $lbnd->[0] . " ubound=" . $ubnd->[0];
               $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# Mask the previously detected bad spectra.
               $params = "in=$pasted ref=$temp5file out=$temp19file";
               $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp19file out=$pasted" );
            }

# Since the pattern is correlated we can improve the signal-to-noise
# ratio and discrimination in the profile by first smoothing along the
# time axis.
            $params = "in=$pasted out=$hfi box=[0,0,7]";
            $Mon{'kappa_mon'}->obeyw( "block", "$params" );

# Perform an approximate Difference of Gaussian filter along the spectral axis.
# -----------------------------------------------------------------------------
#
# Since the interference has lots of zero crossings an edge detector is
# one way to identify this inference signal.  Note as currently coded
# LAPLACE only operates on two-dimensional data and thus includes
# variation along the time-series axis into the signal, rejecting more
# spectra than is necessary.  While the smoothing have been applied
# before the earlier DoG filter to avoid repirition, it would degrade
# the uncorrelated noise signal.
            orac_say "    Computing squared Laplacian of spectra.";
            $params = "in=$hfi out=$temp8file stype=absolute";
            $params .= " method=nearest abs=[-1,0,0]";
            $Mon{'kappa_mon'}->obeyw( "slide", "$params" );

            $params = "in=$hfi out=$temp9file stype=absolute";
            $params .= " method=nearest abs=[1,0,0]";
            $Mon{'kappa_mon'}->obeyw( "slide", "$params" );

            $params = "ia=$hfi ib=$temp8file ic=$temp9file";
            $params .= " exp=2*IA-IB-IC out=$temp1file";
            $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Form clean 'edginess' profile.
# ------------------------------
#
# Find the rms `edginess' i.e. a positive measure of the deviation from flatness.
# The normalisation is arbitrary so just approximate with the full spectral
# dimension.
            $params = "ia=$temp1file out=$temp2file exp='sqrt(IA*IA/$nel)'";
            $Mon{'kappa_mon'}->obeyw( "maths", "$params" );

# Collapse the spectral axis using a clipped mean to form average
# edginess for each spectrum for the current detector.
            orac_say "    Collapsing spectra to form average edge detection per spectrum.";
            $params = "in=$temp2file out=$temp3file estimator=mean";
            $params .= " axis=spec trim=f wlim=0.0 variance=false";
            $Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# There may be glitches or drift in the levels.  Correct for these
# before thresholding.  FIXSTEPS needs double-precision data.
            my $rejected = 1;
            my $ORAC_STATUS;
            if ( $Frm->nfiles == 1 ) {
               orac_say "    Correcting for glitches or drift in the edginess profile.";
               $Mon{'ndfpack_mon'}->obeyw( "settype", "$temp3file type=_DOUBLE" );
               $params = "in=$temp3file out=$temp11file";
               $params .= " meanshift=no dcfitbox=$boxsize";
               my $FIXSTEPS_STATUS = $Mon{'smurf_mon'}->obeyw( "fixsteps", "$params" );
               if ( $FIXSTEPS_STATUS == 0 ) {
                  ( $ORAC_STATUS, $rejected ) = $Mon{'smurf_mon'}->get( "fixsteps", "nrejected" );
               }
            }

# Check that FIXSTEPS has not rejected the receptor.  This seems to
# happen extremely rarely when there are no genuine steps and too few
# points in the profile.  In this case we can pass the original profile
# directly to FINDBACK.
            if ( $rejected > 0 ) {
               $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp3file out=$temp11file" );
            }

# Reset the data type.
            $Mon{'ndfpack_mon'}->obeyw( "settype", "$temp11file type=_REAL" );

# Given that ringing has been observed thus far to extend typically over tens and
# even over 200 spectra, and that some reference level for unaffected spectra is
# needed, define a minimum number of spectra.
            if ( $numvalid{$receptor} >= $ringing_min_spec ) {

# Estimate and subtract the 'continuum' level.  0.4 aims to exclude
# broad regions of affected spectra but still allow for trending.
# While the 500 is arbitrary, it is based on a few empirical
# observations the time extent of blocks of affected spectra.
               my $box = min( int( 0.4 * $totspect{$receptor} ), 500 );
               $params = "in=$temp11file out=$temp14file box=$box sub accept";
               my $FINDBACK_STATUS = $Mon{'cupid_mon'}->obeyw( "findback", "$params" );

# FINDBACK can fall over, but this should not be fatal.
               if ( $FINDBACK_STATUS != ORAC__OK ) {
                  if ( starversion_gt( 'CUPID', 'V1.6' ) && $FINDBACK_STATUS == 262703466 ) {
                     orac_say "Unable to find the background level due to insufficient good data.";
                     orac_say "Attempting to continue.";
                     next;
                  }
                  $temp14file = $temp11file;
               }

# Estimate the noise in the profile.
# -----------------------------------

# Ringing and oscillations can amplify the apparent standard deviation.

# Smooth and subtract to estimate the noise.
               $params = "in=$temp14file out=$temp16file fwhm=11";
               $Mon{'kappa_mon'}->obeyw( "gausmooth", "$params" );
               $params = "in1=$temp14file in2=$temp16file out=$temp17file";
               $Mon{'kappa_mon'}->obeyw( "sub", "$params" );

# Find the noise level that lay on top of possibly varying base level.
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp17file clip=3" );
               ( $ORAC_STATUS, my $rms ) = $Mon{'kappa_mon'}->get( "stats", "sigma" );

# Obtain the mean level from the background-subtracted profile.
               $Mon{'kappa_mon'}->obeyw( "stats", "ndf=$temp14file clip=$edge_clip" );
               ( $ORAC_STATUS, my $baselevel ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
               my $minlevel = $baselevel + 3.0 * $rms;
               my $minpeak = max( 0.006, $baselevel + 5.0 * $rms );

# Smooth the profile so only broad clumps are identified rather than
# being subdivided into overlapping regions, as this reduced the widths
# leaving the tails of the ringing after masking.
               $params = "in=$temp14file out=$temp18file fwhm=15";
               $Mon{'kappa_mon'}->obeyw( "gausmooth", "$params" );

# Measure the properties of peaks in the profile.
# -----------------------------------------------

# Identify the peaks in the histogram, storing the results table to a
# Starlink STL file.  Since the quanta are integers ensure the RMS level
# is at least that.
               my $outmap = new ORAC::TempFile( 0 );
               my $outcat = new ORAC::TempFile( 0 );
               $outcat .= ".TXT";
               my $nclumps = 0;

               $params = "in=$temp18file out=$outmap outcat=$outcat method=clumpfind ";
               $params .= "rms=$rms config='^$fc_param,ClumpFind.Tlow=$minlevel' accept";
               my $FINDCLUMPS_STATUS = $Mon{'cupid_mon'}->obeyw( "findclumps", "$params" );
               if ( $FINDCLUMPS_STATUS == ORAC__OK ) {

# Check number of clumps using NCLUMPS output parameter.
                  ( $ORAC_STATUS, $nclumps ) = $Mon{'cupid_mon'}->get( "findclumps", "nclumps" );
               }
               if ( $nclumps > 0 ) {

# Extract the desired information from the output table.
# ------------------------------------------------------

# Access the required data in the file.  It searches the STL
# format for the start of the table and given by the BEGINTABLE, and
# there is no development of this format so this should be robust.
                  open( TABLE, "< $outcat" ) or
                    die "Could not find catalogue $outcat specifying the ringing peaks: $!\n";
                  unlink $outcat;
                  my @lines = <TABLE>;
                  my $i = 0;
                  my $nlines = scalar( @lines );
                  while ( $i < $nlines ) {
                     chomp $lines[$i];
                     if ( $lines[$i] =~ /BEGINTABLE/ ) {
                        last;
                     }
                     $i++;
                  }

 # Move beyond the BEGINTABLE line.
                  $i++;

# The fields are Index, Peak1, Cen1, Size1, Sum, Peak.  So search to find the
# rows with peaks above a 5-sigma threshold.
                  my @ring_limits;
                  my $eject = 0;
                  my $mask_ringing = 0;
                  while ( $i < $nlines ) {
                     chomp $lines[$i];
                     $lines[$i] =~ s/^\s+//;
                     my @fields = split( /\s+/, $lines[$i] );
                     s/D/e/ for @fields;
                     if ( $fields[5] > $minpeak ) {
                        my $lbnd_ring = int( $fields[1] - 3.0 * $fields[3] );
                        my $ubnd_ring = int( $fields[1] + 3.0 * $fields[3] ) + 1;
                        push @ring_limits, $lbnd_ring, $ubnd_ring;
                        $eject += $ubnd_ring - $lbnd_ring + 1;
                        $mask_ringing = 1;
                     }
                     $i++;
                  }

# Store the thresholded file for the masking primitive.
                  if ( $mask_ringing ) {
                     my $Frm = new $Frm;
                     my $temp17file = new ORAC::TempFile( 0 );
                     $temp17file = "$temp14file";
                     $Frm->file( $temp17file );

# Further indirection appears to be needed for passing the ranges to
# _MASK_SINGLE_AXIS_REGIONS_.
                     my @em_bounds = \@ring_limits;

                     _MASK_SINGLE_AXIS_REGIONS_ INVERSE=0 USEAXIS=3 REGIONS=\@em_bounds SUFFIX=emmask

# Capture the masked file, and default to remove at the end of processing.
                     $temp4file = $Frm->file;

                     my $kept = $numvalid{$receptor};
                     if ( $eject == 1 ) {
                        orac_say "       One spectrum removed out of $kept.";
                     } elsif ( $eject > 0 ) {
                        orac_say "       $eject spectra removed out of $kept.";
                     } else {
                        orac_say "       No spectra removed out of $kept.";
                     }
                  }
               }
            }  # ringing_min_spec satsfied?
         }  # ringing?
      }  # numgood > 0?

# Add profile mask for receptor into mask image.
# ----------------------------------------------

# Paste the data to the mask file.
      orac_say "    Paste the masked profile into the image mask.";
      $Mon{'kappa_mon'}->obeyw( "manic", "in=$temp4file out=$temp7file axes=[2,3]" );
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp7file out=$temp4file" );
      $params = "in=$temp6file p1=$temp4file out=$temp7file confine=false transp=false";
      $Mon{'kappa_mon'}->obeyw( "paste", "$params" );
      $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$temp7file out=$temp6file" );
   }  # receptor loop

# Mask each of the subscans.
# ==========================

# At this point we have amask of the bad spectra for each receptor
# in temp6file.  This is not expanded into a mask for the spectrum as
# it may be very large.  Instead just expand each subscan's portion.
   foreach my $i ( 1 .. $Frm->nfiles ) {

# Set/get filenames.
      my ( $in, $out ) = $Frm->inout( $osuffix, $i );

# Extract the temporal-axis bounds of the subscan.
      my $lb = $time_bounds[2 * ( $i - 1 )];
      my $ub = $time_bounds[2 * $i - 1];

# Expand an extract of the mask image to the size of the current subscan.
      orac_say( "    Expand the masked profile." );
      $params = "in=$temp6file(,$lb:$ub) out=$temp5file axes=[0,1,2] ";
      $params .= "lbound=" . $lbnd->[0] . " ubound=" . $ubnd->[0];
      $Mon{'kappa_mon'}->obeyw( "manic", "$params" );

# The expanded mask will have the wrong bounds in the spectral axis
# and its origin along that axis should be 1.  The simplest way is to
# match bounds with the NDF about to be masked.
      $Mon{'ndfpack_mon'}->obeyw( "setorigin", "ndf=$temp5file like=$in" );

# Copy the bad spectra to the output image.
      orac_say "  Apply the mask of noisy spectra to the input time series to form $out.";
      $params = "in=$in ref=$temp5file out=$out";
      $Mon{'kappa_mon'}->obeyw( "copybad", "$params" );

# Record the files to update the input Frm at the end of processing.
      push @outfiles, $out;

# Display if necessary.
      $Display->display_data( $Frm ) if defined $Display;
   }
}  # subsys loop

# Update the current files in the Frm object.
$Frm->files( @outfiles );

# Tidy-up output.
orac_print "\n";

RETURN:
