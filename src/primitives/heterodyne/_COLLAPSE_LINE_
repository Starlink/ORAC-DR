# -*-cperl-*-

=head1 NAME

_COLLAPSE_LINE_ - Collapse a cube around a given range.

=head1 DESCRIPTION

This primitive collapses a cube along a given axis around a line. The
line centre and width are passed as parameters.

=head1 ARGUMENTS

=over 4

=item AXIS = INTEGER (Given)

The axis along which to collapse. [3]

=item CENTRE = REAL (Given)

The central wavelength, frequency, or velocity around which to
collapse. This value should be in the same units as the units of the
axis that will be collapsed. [0.0]

=item ESTIMATOR = STRING (Given)

The method to use for estimating the output pixel values. This can be any of those listed for the KAPPA/COLLAPSE task. ['integ']

=item RANGE = REAL (Given)

The range over which to collapse. This value should be in the same
units as the units of the axis that will be collapsed. [50.0]

=item SUFFIX = STRING (Given)

File suffix to use. ['linteg']

=back

=head1 NOTES

=over 4

=back

=head1 OUTPUT DATA

=over 4

The collapsed image in a file of the form
aE<lt>YYYYMMDDE<gt>_E<lt>NNNNNE<gt>_E<lt>MME<gt>_linteg001.

=back

=head1 TASKS

KAPPA: COLLAPSE.

=head1 REQUIRED PERL MODULES

None.

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007 Science and Technology Facilities
Council.  All Rights Reserved.

=head1 LICENCE

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either Version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
MA 02111-1307, USA.

=cut

# Handle arguments.
my $axis = ( defined( $_COLLAPSE_LINE_{AXIS} ) ?
             $_COLLAPSE_LINE_{AXIS}            :
             3 );

my $centre = ( defined( $_COLLAPSE_LINE_{CENTRE} ) ?
               $_COLLAPSE_LINE_{CENTRE}            :
               0 );

my $estimator = ( defined( $_COLLAPSE_LINE_{ESTIMATOR} ) ?
                  $_COLLAPSE_LINE_{ESTIMATOR}            :
                  'integ' );

my $range = ( defined( $_COLLAPSE_LINE_{RANGE} ) ?
              $_COLLAPSE_LINE_{RANGE}            :
              50 );

my $suffix = get_prim_arg( $_PRIM_ARGS_, 'SUFFIX', 'linteg' );

# Make sure the CENTRE and RANGE parameters have decimal points.
if( $centre !~ /\./ ) {
  $centre = sprintf( "%.1f", $centre );
}
if( $range !~ /\./ ) {
  $range = sprintf( "%.1f", $range );
}

_GET_DIMENSIONS_
my $ndim = $_GET_DIMENSIONS_{'NDIM'};
my $sectionrange = "$centre~$range";
my $section = join ',', map {$_ == $axis ? $sectionrange : ''} 1 .. $ndim;

# Set up filenames.
my ( $in, $out ) = $Frm->inout( '_' . $suffix, 1 );

# Collapse.
my $params = "in=$in($section) out=$out axis=$axis estimator=$estimator title='Integrated line intensity' trim=false";
$Mon{'kappa_mon'}->obeyw( "collapse", "$params" );

# Report to the user.
orac_print "$in to $out:\n";
orac_print " Collapsed $range km/s around line centered at $centre km/s.\n";

# For multiline plot of file with trimmed WCS (and presumed NDF section
# bug handling it), convert section to pixel range.
$Mon{'ndfpack_mon'}->obeyw('ndftrace', "ndf=$in($section)");
(my $ORAC_STATUS, my @lbound) = $Mon{'ndfpack_mon'}->get('ndftrace', 'lbound');
($ORAC_STATUS, my @ubound) = $Mon{'ndfpack_mon'}->get('ndftrace', 'ubound');
$Frm->uhdr('COLLAPSED_RANGE', $lbound[$axis - 1] . ':' . $ubound[$axis - 1]);

# Update the Frame object.
$Frm->file( $out );

# Display.
$Display->display_data( $Frm ) if defined $Display;

# Tidy-up output.
orac_print "\n";
