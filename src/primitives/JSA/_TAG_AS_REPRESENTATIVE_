# -*-cperl-*-

=head1 NAME

_TAG_AS_REPRESENTATIVE_ - Tag a file as representative.

=head1 DESCRIPTION

This primitive tags a file, Frame, or Group as representative,
It copies the current file to a new file with a new chosen suffix.
It also sets the PRODUCT header within the copied file, and creates
three square preview images of 64, 256, and 1024 pixels on a side.

=head1 ARGUMENTS

=over 4

=item COMMENT = STRING (Given)

The comment string for the PRODUCT header.  The product identification
may be terse to avoid very long file names and the comment may be used
to write an unabbreviated form.  ['Pipeline product']

=item DISPLAY = LOGICAL (Given)

Whether to display the current Group or Frame (see GROUP) file.  [1]

=item PREVIEW_BACKGROUND = CHARACTER (Given)

A file to be plotted in the background of the preview image.  For example
an emission map on top of which catalog objects should be plotted.  This
can also be the special string "TRUE" to indicate that the image should
be plotted as if this is the background, but for the case that there is
nothing to be plotted over it.

=item PREVIEW_ONLY = LOGICAL (Given)

Suppress actual processing of the input file and instead only generate
the preview image.  This is useful when a preview is required for a
plane which does not have any SDF product files.

=item PREVIEW_TEXT = STRING (Given)

Text to be overlaid on the preview. [undef]

=item FILE = STRING (Given)

By default the file to tag comes from either the current Frame or
current Group object (see GROUP argument). If the FILE argument is
supplied, then this file overrides the GROUP argument. ['']

=item GROUP = LOGICAL (Given)

Whether to operate on the current Group or Frame. Defaults to
Frame. [0]

=item POINTCAT = STRING (Given)

Point catalog for plotting.  (Applies only when PREVIEW_BACKGROUND is
given.)

=item PRODUCT = STRING (Given)

The string written to the PRODUCT keyword.  If it is undefined the
PRODUCT string defaults to the value of SUFFIX for backwards
compatability.

=item SUFFIX = STRING (Given)

The suffix to add.  It is also the value assigned to the PRODUCT
keyword.  ['rimg'].

=item UPDATE = LOGICAL (Given)

Whether or not to update the current Frame or Group object with the
tagged file. [0]

=item VECTOR_FILE = CHARACTER (Given)

A FITS file generated by POLPACK containing vectors to plot over the
image in the preview graphics files.  If the file is given, then
an attempt will also be made to set its PRODUCT header.

=back

=head1 OUTPUT DATA

=over 4

=item *

The file with the requested suffix.

=item *

If UPDATE is true, the input Frame or Group object has product defined
as the requested suffix, and the output file(s) is(are) tagged with
that suffix.

=back

=head1 SEE ALSO

_CREATE_GRAPHIC_FROM_FILE_

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>,
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2013-2014 Science and Technology Facilities Council.
Copyright (C) 2013 the University of British Columbia.
All Rights Reserved.

=cut

use Astro::FITS::CFITSIO qw/:constants/;

my $display = get_prim_arg( $_PRIM_ARGS_, "DISPLAY", 1 );
my $file = $_PRIM_ARGS_->{FILE};
my $group = ( $_PRIM_ARGS_->{GROUP} ? 1 : 0 );
my $product = get_prim_arg( $_PRIM_ARGS_, "PRODUCT", undef );
my $suffix = get_prim_arg( $_PRIM_ARGS_, "SUFFIX", "rimg" );
my $comment = get_prim_arg( $_PRIM_ARGS_, "COMMENT", "Pipeline product" );
my $update = ( $_PRIM_ARGS_->{UPDATE} ? 1 : 0 );
my $vector_file = get_prim_arg( $_PRIM_ARGS_, 'VECTOR_FILE', undef );
my $preview_background = get_prim_arg( $_PRIM_ARGS_, 'PREVIEW_BACKGROUND', undef );
my $preview_only = get_prim_arg( $_PRIM_ARGS_, 'PREVIEW_ONLY', 0 );
my $preview_text = get_prim_arg( $_PRIM_ARGS_, 'PREVIEW_TEXT', undef );
my $point_cat = get_prim_arg( $_PRIM_ARGS_, 'POINTCAT', undef );

$product = defined( $product ) ? $product : $suffix;

my $Obj = ( $group ? $Grp : $Frm );

my $jsa_tiles = $Obj->uhdr('JSA_TILES') // 0;
my ( $in, $out ) = $jsa_tiles ? $Obj->inout_jsatile($suffix, 1)
                              : $Obj->inout( "_$suffix" );

$in = $file if ( defined( $file ) );

unless ($preview_only) {
  $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "in=$in out=$out" );
  orac_print "$in to $out:\n Tagged as representative.\n\n";
}
else {
  # For the sake of generating the previews, consider the output (file to
  # be plotted) to just be the input.
  $out = $in;
}

# Product identifier for the header.  If there is a product ID prefix in play
# then we must use it rather than forcing the use of the product name as the
# product ID prefix.  Normally the product_id method would handle this logic,
# but unfortunately in this case we don't set the product in the object so
# product_id can't see it.
my $productID = $Obj->can("product_id")
    ? $Obj->product_id($Obj->get_product_id_prefix() // $product)
    : "";
my $productIDcomment = 'Product ID';
unless ($preview_only) {
  _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRODUCT VALUE=$product COMMENT=$comment
  if ($productID) {
    _SET_FILE_FITS_ITEM_ FILE=$out KEY=PRODID VALUE=$productID COMMENT=$productIDcomment
  }
}

# If we are also processing a FITS vector file, then attempt to do the
# equivalent FITS header operation to it too.
if ( defined $vector_file and not $preview_only ) {
  my $status = 0;
  my $fitsvector = Astro::FITS::CFITSIO::open_file( $vector_file, READWRITE,
                                                    $status );
  if ( $status ) {
    orac_warn( "Failed to open vector file to add product header\n" );
  }
  else {
    $fitsvector->update_key( TSTRING, "PRODUCT", $product, $comment, $status );
    $fitsvector->close_file( $status );
  }
}

if ( $display and not $preview_only ) {
  _DISPLAY_FILE_ FILE=$out GROUP=$group
}

if ( defined( $vector_file ) ) {
  _CREATE_GRAPHIC_FROM_FILE_ FILE=$out ADDRES=1 XRES=64,256,1024 TYPE=PNG PRODUCT=$product PRODUCTID=$productID VECTOR_FILE=$vector_file TEXT_OVERLAY=$preview_text

} elsif (defined $preview_background) {
  # This is currently only used for JSA catalog previews.  In this case we
  # want one preview for a plane which contains multiple products.  Therefore
  # make an image OUTROOT based on the product ID prefix.
  my $outroot = $jsa_tiles
    ? $Obj->inout_jsatile($Obj->get_product_id_prefix(), 1)
    : $Obj->inout($Obj->get_product_id_prefix());

  if ($preview_background eq 'TRUE') {
    _CREATE_GRAPHIC_FROM_FILE_ FILE=$out TYPE=PNG XRES=64,256,1024 ADDRES=1 SIGHIGH=5 SIGLOW=2 PRODUCT=$product PRODUCTID=$productID OUTROOT=$outroot TEXT_OVERLAY=$preview_text
  }
  elsif (defined $point_cat) {
    _CREATE_GRAPHIC_FROM_FILE_ FILE=$preview_background TYPE=PNG EXTENTS=$out POINTCAT=$point_cat XRES=64,256,1024 ADDRES=1 SIGHIGH=5 SIGLOW=2 PRODUCT=$product PRODUCTID=$productID OUTROOT=$outroot TEXT_OVERLAY=$preview_text
  }
  else {
    _CREATE_GRAPHIC_FROM_FILE_ FILE=$preview_background TYPE=PNG EXTENTS=$out XRES=64,256,1024 ADDRES=1 SIGHIGH=5 SIGLOW=2 PRODUCT=$product PRODUCTID=$productID OUTROOT=$outroot TEXT_OVERLAY=$preview_text
  }

} else {
  _CREATE_GRAPHIC_FROM_FILE_ FILE=$out ADDRES=1 XRES=64,256,1024 TYPE=PNG PRODUCT=$product PRODUCTID=$productID TEXT_OVERLAY=$preview_text
}

if( $update and not $preview_only ) {
  $Obj->force_product_update( $product, $out );
  $Obj->tagset( $suffix );
}
