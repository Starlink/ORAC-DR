# -*-perl-*-

=head1 NAME

_CREATE_JSA_PEAKS_CAT_ - create JSA style 'peaks' catalogues.

=head1 DESCRIPTION

This primitive takes in input maps and extent masks, and produces a
JSA style 'peaks' catalogue for each input file.

It uses stilts to concatenate the peak catalaogues for each extent
island, and also to add in the IDs and the IDS of the parent extent.

=head1 ARGUMENTS

=over 4

=item GROUP

Whether to operate on the group or not.

=back

=head1 COPYRIGHT

Copyright (C) 2014 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
fbut WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut

use File::Temp;


# Determine on which object to work.
my $group = get_prim_arg($_PRIM_ARGS_, 'GROUP', 0);
my $Obj = $group ? $Grp : $Frm;

# All products from this primitive should go in the "peak" plane, so set
# a product ID prefix.
$Obj->set_product_id_prefix('peak');

# Find an emission and extent file from the frame.
my ($extent, $extent_cat);
_RETRIEVE_TAG_ TAG=extent GROUP=$group

my $tag_status = $_RETRIEVE_TAG_{STATUS};
if ( $tag_status) {
    $extent = $Obj->file();
    $extent_cat = $Obj->uhdr('JSA_EXTENT_CAT');
    orac_termerr('Extent tag found but no JSA_EXTENT_CAT uhdr')
        unless defined $extent_cat;
}

_RETRIEVE_TAG_ TAG=emission THROW=1 GROUP=$group
my $emission = $Obj->file();



if ($tag_status)
{
    # Holder for intermediate files that should be tidied up.
    my @intermediates = ();

    orac_say("Identifying peaks of emission in $emission" .
             " using extents from $extent." );


    # Set up the fellwalker params.
    my $minheight = "5*RMS";
    my $mindip    = "5*RMS";
    my $noise     = "3*RMS";
    my $minpix    = "9";

    # Write out config.
    my $fc_param = new ORAC::TempFile;
    open my $fc_h, ">", $fc_param;
    print $fc_h "FellWalker.AllowEdge=1\n";
    print $fc_h "FellWalker.FwhmBeam=0\n";
    print $fc_h "FellWalker.MaxBad=1.0\n";
    print $fc_h "FellWalker.Noise=$noise\n";
    print $fc_h "FellWalker.FlatSlope=0\n";
    print $fc_h "FellWalker.MinHeight=$minheight\n";
    print $fc_h "FellWalker.MinDip=$mindip\n";
    print $fc_h "FellWalker.CleanIter=1\n";
    print $fc_h "FellWalker.MinPix=$minpix\n";
    print $fc_h "FellWalker.MaxJump=0\n";
    close $fc_h;
    my $cupidparams = "config='^$fc_param' method=fellwalker deconv=no";


    # Arrays to hold peak catalogues and parent extent ids.
    my @peakcats = ();
    my @parentextents = ();

    # Stilts is used for dealing with catalogs.
    my $stilts_path = File::Spec->catfile( $ENV{STARLINK_DIR}, "starjava", "bin", "stilts" );

    # Find out how many clumps there are.
    $Mon{'kappa_mon'}->obeyw("stats", "$extent");
    (my $ORAC_STATUS, my $nclumps) = $Mon{kappa_mon}->get("stats", "maximum");

    # Create the correct output name for the peak catalogue
    my $jsa_tiles = $Obj->uhdr('JSA_TILES') // 0;
    my $peakcat = ($jsa_tiles ? $Obj->inout_jsatile('peak-cat', 1)
                              : $Obj->inout('_peak-cat')) . '.fits';
    orac_say("Output file is $peakcat.");

    # Now create each one as an ndf.
    for (my $i = 1; $i <= $nclumps; $i++)
    {
        # Create a postage stamp of just this clumps.
        my $postage = $Obj->inout("_$i" . "_clump");

        orac_say("Finding peaks for clump $i.");
        my $clumpstring = "$extent.more.CUPID.CLUMPS($i)";
        my $params = "ref=$clumpstring in=$emission out=$postage";
        $Mon{'kappa_mon'}->obeyw("copybad", "$params");

        # Mark the postage stamp of this clump as an intermediate.
        push @intermediates, $postage;

        # Read the median noise from this file.
        $Mon{'kappa_mon'}->obeyw("stats", "$postage order=True comp=ERR");
        my ($ORAC_STATUS, $medrms) = $Mon{kappa_mon}->get("stats", "median");

        # Set up file names.
        my $outclumps = $Obj->inout("_$i" . "_peak");
        my $jsacat = $Obj->inout("_$i" . "_peak.FITS");
        my $log = new ORAC::TempFile;

        # Perform the clumpfinding
        $Mon{'cupid_mon'}->obeyw("findclumps", "in=$postage out=$outclumps jsacat=$jsacat log=$log outcat=! rms=$medrms $cupidparams");

        ($ORAC_STATUS, my $nclumps) = $Mon{cupid_mon}->get("findclumps","nclumps");
        orac_say("$nclumps peak" .
                 " identified inside island $i.");

        # Get the ID of the parent extent.
        chomp(my $parent_extent_id =`$stilts_path tpipe in=$extent_cat cmd='keepcols ID;select index==$i' omode=out ofmt=csv-nohead`);

        # Clean up various files
        push @intermediates, $log;
        if (-e $jsacat) {

            # Concatenate this file into the output file.
            my $id = "addcol ID -before \$1 \"\\\"JCMTPP_J\\\"+replaceAll(degreesToHms(PEAK1,1),\\\":\\\",\\\"\\\")+replaceAll(degreesToDms(PEAK2,0),\\\":\\\",\\\"\\\")\";";
            my $parent = "addcol PARENT_EXTENT \"split(ID,\\\"J\\\")[0]+\\\"$parent_extent_id\\\"\";";
            my $ra = "replacecol -name RA -desc \"RA of peak pixel\" PEAK1 PEAK1;";
            my $dec = "replacecol -name DEC -desc \"Dec of peak pixel\" PEAK2 PEAK2;";
            my $peak = "replacecol -name PEAK_FLUX PEAK PEAK;";
            my $deletecol = "delcols \"CEN1 CEN2 SIZE1 SIZE2 SUM VOLUME SHAPE\";";
            my $icmd ="\'$id $parent $ra $dec $peak $deletecol\'";
            my ($nin, $in1, $in2, $icmd1, $icmd2);

            if (-e $peakcat) {
                orac_say("Peak cat exists! $peakcat");
                $nin = "2";
                $in1 = "in1=$peakcat";
                $in2 = "in2=$jsacat";
                $icmd1 = "";
                $icmd2="icmd2=$icmd";
            }
            else {
                $nin = "1";
                $in1 = "in1=$jsacat";
                $icmd1="icmd1=$icmd";
                $in2 = "";
                $icmd2="";
            }
            my $stilts_arguments = "$stilts_path tcatn $in1 $icmd1 $in2 $icmd2 out=$peakcat nin=$nin ofmt=fits-basic";

            system($stilts_arguments);

            # Remove the intermediate catalogs.
            if (-e $jsacat) {
                unlink $jsacat;
            }

        }

        push @intermediates, $outclumps;
    }

    # Concatenate the peak catalogues, if any were found.
    if (-e $peakcat) {

        # Add JSA FITS headers to the catalog.
        _COPY_JSA_HEADERS_TO_FITS_FILE_ IN=$emission OUT=$peakcat GROUP=$group PRODUCT=peak-cat

        # Push the output peaks catalogue into the uhdr.
        if (-e $peakcat) {
          $Obj->uhdr('JSA_PEAK_CAT', $peakcat);
        }

        # Create preview images.
        my $kappa_peaks = new ORAC::TempFile;

        # Create a fits catalogue that listmake won't complain about...
        system("$stilts_path tpipe in=$peakcat cmd=\'addskycoords -epoch 2000 -inunit deg -outunit sex icrs icrs RA DEC RA2000 Dec2000; delcols \"ID RA DEC PEAK_FLUX PARENT_EXTENT\"\' omode=out ofmt=ascii out=$kappa_peaks");

        # Create a 2d map so that listmake doesn't complain.
        my $temp2dmap = $jsa_tiles ? $Obj->inout_jsatile('temp2dmap', 1)
          : $Obj->inout('_temp2dmap');
        $Mon{ndfpack_mon}->obeyw('ndfcopy', "in=$emission out=$temp2dmap trimwcs=True trim=True");
        push @intermediates, $temp2dmap;

        my $listshowobj = new File::Temp(TEMPLATE => 'kappa_peaks_XXXXXX',
                                         SUFFIX => '.fits');
        my $listshowcat = $listshowobj->filename();
        my $listmake_params = "mode=file file=$kappa_peaks ndf=$temp2dmap outcat=$listshowcat describe=True";

        $Mon{kappa_mon}->obeyw( "listmake", "$listmake_params" );

        # Use "_TAG_AS_REPRESENTATIVE_" in PREVIEW_ONLY mode to generate the
        # preview with the required JSA product headers.
        _TAG_AS_REPRESENTATIVE_ FILE=$extent PREVIEW_ONLY=1 DISPLAY=0 GROUP=$group PRODUCT=peak-cat PREVIEW_BACKGROUND=$emission POINTCAT=$listshowcat
    }
    else {
        orac_say("No peaks found in any islands for this map; no peak catalog created.");
    }
    $Obj->push_intermediates(@intermediates);
}

else {

    orac_say("No extents were found, so not searching for peaks.");

}

# Unset the product ID prefix again before leaving the primitive.
$Obj->set_product_id_prefix();
