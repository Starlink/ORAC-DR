# -*-cperl-*-

=head1 NAME

_TAG_AS_REDUCED_PRODUCT_ -- Tag current file as "reduced".

=head1 DESCRIPTION

For the relevant file (or files), copy it to a new name with product
"reduced" and filename ending in _reduced, or "healpix" and filename
ending with _healpixNNNNNN if in JSA tiles mode.

=head1 ARGUMENTS

=over 4

=item FILE = STRING (Given)

By default all files in the given Frame object are tagged as
reduced. This argument allows an explicit file to be tagged.

=item FLAG_QUAL_BAD = LOGICAL (Given)

Whether or not to flag any pixels with a non-zero quality flag as
bad. [0]

=item GRAPHIC = LOGICAL (Given)

If true, create a PNG file of the reduced data. Default is to do
nothing. No special check is made to make sure the dimensionality
of the reduced data are suitable. No graphic will be created if there
is more than one file to be marked "reduced".

=item GROUP = LOGICAL (Given)

Whether to operate on the current Frame or Group object. Defaults to
Frame. [0]

=item TRIM = LOGICAL (Given)

Whether to trim the file while NDFCOPYing it. Only applies
in "UPDATE" mode as otherwise no NDFCOPY occurs. [0]

=item UPDATE = LOGICAL (Given)

If true, the output files are stored in the current Frame or Group
object (see C<GROUP> argument) and tagged as product
"reduced". Default is for this update to not happen. [0]

=item UNTRIMMED_TILE_PREVIEW = LOGICAL (Given)

If in JSA tiles mode (i.e. the JSA_TILES uhdr is true), and preview
graphics are being created, then this argument controls whether the
previews should be made from untrimmed versions of the files. [0]

=back

=head1 NOTES

=over 4

=item *

The JSA tiles mode is recognised by a true value stored in the boolean
internal header JSA_TILES of either the Group or Frame object,
depending on the choice selected by Argument GROUP.

=back

=head1 OUTPUT DATA

=over 4

=item *

Products with suffix _reducedNNN. If a single file is given (see C<FILE>
argument), then the suffix will be _reduced.

=item *

If UPDATE is true, the input Frame or Group object has product defined
as the requested suffix, and the output file(s) is(are) tagged with
that suffix.

=back

=head1 AUTHORS

Brad Cavanagh E<lt>b.cavanagh@jach.hawaii.eduE<gt>
Andy Gibb E<lt>agg@astro.ubc.caE<gt>
Graham Bell E<lt>g.bell@jach.hawaii.eduE<gt>
Malcolm J. Currie E<lt>mjc@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2008, 2014 Science and Technology Facilities Council.
Copyright (C) 2013 the University of British Columbia.
All Rights Reserved.

=cut

# Handle arguments.
my $file = get_prim_arg( $_PRIM_ARGS_, "FILE", undef );
my $flag = get_prim_arg( $_PRIM_ARGS_, "FLAG_QUAL_BAD", 0 );
my $group = ( $_PRIM_ARGS_->{GROUP} ? 1 : 0 );
my $update = ( $_PRIM_ARGS_->{UPDATE} ? 1 : 0 );
my $graphic = ( $_PRIM_ARGS_->{GRAPHIC} ? 1 : 0 );
my $trim = get_prim_arg($_PRIM_ARGS_, "TRIM", 0);
my $untrim_tp = get_prim_arg($_PRIM_ARGS_, "UNTRIMMED_TILE_PREVIEW", 0);

my $Obj = ( $group ? $Grp : $Frm );

# Return immediately if the object is bad or missing
if ( $Obj->can( "isgood" ) ) {
  return ORAC__OK unless $Obj->isgood > 0;
} elsif ( $Obj->can( "file_exists" ) ) {
  return ORAC__OK unless $Obj->file_exists;
}

# Check whether JSA_TILES mode is active or not.
my $jsa_tiles = $Obj->uhdr( "JSA_TILES" ) // 0;

# Product name for the header. We know this is "reduced" or "healpix"
my $product = $jsa_tiles ? 'healpix' : 'reduced';
my $productID = ( $Obj->can( "product_id" ) ?
                  $Obj->product_id( $jsa_tiles ? 'healpix' : "reduced" ) :
                  "" );

# A little callback
my $create_graphic = sub {
  my $out = my $outroot = shift;
  if ( $graphic ) {
    if ( $jsa_tiles and $untrim_tp ) {

      # Need to untrim the tile before plotting it.  Therefore place
      # it in a temporary frame and use _UNTRIM_JSA_TILES_.
      my $Frm = $Frm->new();
      my $Grp = $Grp->new( 'untrimmed' );
      $Frm->configure( $out );
      $Grp->push( $Frm );
      $Grp->files( $out );
      _UNTRIM_JSA_TILES_ GROUP=$group
      ( $out ) = ( $group ? $Grp : $Frm )->files();
      $Obj->push_intermediates( $out );
    }

    _CREATE_GRAPHIC_FROM_FILE_ FILE=$out OUTROOT=$outroot ADDRES=1 XRES=64,256,1024 TYPE=PNG PRODUCT=$product PRODUCTID=$productID
  }
};

if ( ! defined( $file ) ) {

  my @to_update;
  foreach my $i ( 1 .. $Obj->nfiles ) {

    my $in = $Obj->file( $i );
    my $out;
    if ( $in =~ /reduced$/ || $in =~ /healpix$/ ) {

      # It is already tagged.
      $out = $in;
    } else {
      if ( $jsa_tiles ) {
        ( $in, $out ) = $Obj->inout_jsatile( 'healpix', $i );
      }
      else {
        ( $in, $out ) = $Obj->inout( "_reduced", $i );
      }
    }

    if ( $flag ) {

      # We need to set the quality bad-bits mask to 255 so everything
      # with a non-zero quality can get flagged as bad.
      my $params = "ndf=$in bb=255";
      $Mon{'ndfpack_mon'}->obeyw( "setbb", "$params" );

    }

    # We can only do a hardlink if we're not updating the current
    # Object. This is because updating it also sets the product(),
    # which sets the PRODUCT header, and we want the original file to
    # remain untouched.
    if ( $update ) {
      if ( $in ne $out ) {
        my $args = "in=$in out=$out";
        $args .= ' trimbad exten' if $trim;
        $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$args" );
      }
      push( @to_update, $out );

    } else {

      if ( $in ne $out ) {
        hardlink( "$in.sdf", "$out.sdf" ) or orac_throw "Could not link $in.sdf to $out.sdf: $!\n";
      }
    }

    orac_say "$in to $out:\n Tagged as reduced product.";

    _DISPLAY_FILE_ FILE=$out GROUP=$group

  }

  # Force header synchronisation.
  if ( @to_update ) {
    $Obj->force_product_update($jsa_tiles ? 'healpix' : 'reduced', @to_update);
    $Obj->tagset( "reduced" );
  }

  # We should be tagging as representative if we have more than
  # one file, not trying to create multiple images.
  if ( $Obj->nfiles == 1 ) {
    $create_graphic->( $Obj->file( 1 ) );
  }

} else {

  my $in = $file;
  ( undef, my $out ) = defined( $Obj->uhdr( "JSA_TILES" ) ) && $Obj->uhdr( "JSA_TILES" ) ?
                       $Obj->inout_jsatile( "_healpix" ) :
                       $Obj->inout( "_reduced" );

  # We can only do a hardlink if we're not updating the current
  # Object. This is because updating it also sets the product(), which
  # sets the PRODUCT header, and we want the original file to remain
  # untouched.
  if ( $update ) {
    my $args = "in=$in out=$out";
    $args .= ' trimbad exten' if $trim;
    $Mon{'ndfpack_mon'}->obeyw( "ndfcopy", "$args" );

    $Obj->force_product_update( "reduced", $out );
    $Obj->tagset( "reduced" );
  } else {

    hardlink( "$in.sdf", "$out.sdf" ) or orac_throw "Could not link $in.sdf to $out.sdf: $!\n";

  }

  orac_say "$in to $out:\n Tagged as reduced product.";

  _DISPLAY_FILE_ FILE=$out GROUP=$group
  $create_graphic->( $out );

}
