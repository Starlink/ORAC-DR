# -*-cperl-*-

=head1 NAME

_ADD_AUTO_ASTROMETRY_ -- Performs automated astrometric corrections.

=head1 DESCRIPTION

This primitive automatically corrects astrometry for a given
observation.  It does so by downloading a catalogue from a source
(typically UCAC-3), detects objects in the observation, correlates
between the two catalogues, and calculates an astrometric solution.

=head1 ARGUMENTS

=over 4

=item GROUP = LOGICAL (Given)

If set to true (1), then the current Group object will have its
astrometry corrected. Otherwise, this primitive operates on the
current Frame object. [1]

=item MAXCOEFF = INTEGER (Given)

The maximum coefficient model to perform. The allowed values are 4, 6,
7, 8, and 9. See SUN/5 for a description of the models. If, for
example, ASTROM can only calculate a 6-coefficient model and a
9-coefficient model was requested, then the 6-coefficient model will
be used. [9]

=item OUTPUT_CATALOGUE = STRING (Given)

If set, then an output catalogue of detected objects will be written
to this value.

=item STATISTICS = LOGICAL (Given)

If set to true (1), then image statistics will be calculated for the
resulting frame. For a full list of statistics, see the
C<_CALCULATE_IMAGE_STATISTICS_> primitive. [0]

=head1 NOTES

=over 4

=item *

This primitive is suitable for optical imaging instruments.

=item *

Processing only occurs when the steering header ADD_ASTROMETRY is
true.

=item *

Processing occurs on the current Group object.

=item *

Astrometric correction will probably fail if fewer than five objects
are detected in the frame. Should this occur, the original WCS will be
retained.

=item *

Should an astrometric solution be found, the WCS in the current Group
will be overwritten with the solution.

=back

=head1 REQUIRED PERL MODULES

Starlink::Autoastrom.

=head1 AUTHORS

Brad Cavanagh (JAC) <b.cavanagh@jach.hawaii.edu>
Tim Lister (LCOGT) <tlister@lcogt.net>

=head1 COPYRIGHT

Copyright (C) 2005 Particle Physics and Astronomy Research
Council.  All Rights Reserved.
Copyright (C) 2012-2015 Las Cumbres Observatory Global Telescope Inc.
All Rights Reserved.

=cut

use Time::HiRes qw/ gettimeofday tv_interval /;

use constant R2DEG => 57.29577951;

# Only do this if we're told.
if( $Frm->uhdr( "ADD_ASTROMETRY" ) ) {

  # Deal with parameters.
  my $in;
  my $group;
  my $Obj;
  if( defined( $_ADD_AUTO_ASTROMETRY_{GROUP} ) &&
      $_ADD_AUTO_ASTROMETRY_{GROUP} == 0 ) {
    ( $in, my $out ) = $Frm->inout( "_cat" );
    $group = 0;
    $Obj = $Frm;
  } else {
    $in = $Grp->file;
    $group = 1;
    $Obj = $Grp;
  }
  my $statistics = $_ADD_AUTO_ASTROMETRY_{STATISTICS};
  if( ! defined( $statistics ) ) {
    $statistics = 0;
  }
  my $maxcoeff = $_ADD_AUTO_ASTROMETRY_{MAXCOEFF};
  if( ! defined( $maxcoeff ) ||
      ! ( $maxcoeff == 4 ||
          $maxcoeff == 6 ||
          $maxcoeff == 8 ||
          $maxcoeff == 9 ) ) {
    $maxcoeff = 9;
  }

  orac_print "Adding accurate astrometry to $in (maxcoeff=$maxcoeff).\n";
  $Obj->uhdr( "ASTROMETRY_ADDED", 0 );

  # We need the Starlink::Autoastrom module. Display a warning
  # to the user if it cannot be loaded.
  my $isok = eval { require Starlink::Autoastrom; 1; };
  if( ! $isok ) {
    orac_warn "Could not load the Starlink::Autoastrom Perl module: $@\n";
    orac_warn "Continuing with data reduction.\n";
  } else {
#    print "Retrieving original WCS\n";
    my $orig_wcs = $Obj->read_wcs( );

    # Determine the output catalogue filename.
    _GET_CATALOGUE_NAME_ GROUP=$_ADD_AUTO_ASTROMETRY_{GROUP}
    my $output_catalogue = $_GET_CATALOGUE_NAME_{NAME};

    orac_print "Writing to " . $output_catalogue ."\n";

    # Get the RA and Dec of the tracking centre for this frame.
    my $ra = $Frm->uhdr( "ORAC_RA_BASE" );
    my $dec = $Frm->uhdr( "ORAC_DEC_BASE" );

    # Replace decimal points with the letter 'p'.
    $ra =~ s/\./p/g;
    $dec =~ s/\./p/g;

    # The SkyCat cache filename will be ${ra}${dec}.cat.
    my $skycat_cache = "$ra$dec.cat";

    # If one exists and it's older than 24 hours, delete it.
    if( -e $skycat_cache ) {
      my $mtime = (stat $skycat_cache)[9];
      my $age_days = ( time() - $mtime ) / ( 60 * 60 * 24 );
      if( $age_days > 1 ) {
        unlink $skycat_cache or die "Could not unlink $skycat_cache: $!";
      }
    }

    # Use a five arcsecond aperture. Need to convert this to pixels
    # for autoastrom.
    my $aperture_as = 5.0;
    _GET_PLATE_SCALE_
    my $platescale = $_GET_PLATE_SCALE_{PLATESCALE};
    my $aperture_pixel = $aperture_as / $platescale * 2;
    orac_print "Got platescale of " . sprintf("%.2f",$platescale) . " arcsec/pixel.\n";
    orac_print "Using aperture of " . sprintf("%.2f",$aperture_pixel) . " pixels.\n";

    # Retrieve the SkyCat configuration file.
    my $skycat_cfg = $Cal->find_file( "skycat.cfg" );

    # Retrieve the SkyCat catalogue list.
    my $skycat_cats = $Cal->skycat_catalogue;

    # Create a new Starlink::Autoastrom object.
    my $auto = new Starlink::Autoastrom( ndf => $in,
                                         aperture => $aperture_pixel,
                                         catalogue => $skycat_cats,
                                         detected_catalogue => $output_catalogue,
                                         detection_threshold => 3.5,
                                         skycatconfig => $skycat_cfg,
                                         skycatcatalogue_in => $skycat_cache,
                                         skycatcatalogue_out => $skycat_cache,
                                         maxfit => $maxcoeff,
                                         maxobj_corr => 500,
                                         match => 'RITMatch',
#                                         match => 'FINDOFF',
                                         messages => 0,
                                         verbose => 0,
                                         keeptemps => 0,
                                         starlink_output => 0,
                                         maxiter => 30,
                                         iterrms_diff => 0.01,
                                         iterrms_abs => 0.1,
                                         std_output => sub { orac_print @_; },
                                         error_output => sub { orac_err @_; },
                                         timeout => 60,
					 bestfitlog => 'fit.log',
                                       );

    # Variable to hold astrom-ized catalogue.
    my $catalogue;
    my $merged_catalogue;

    my $starttime = [ gettimeofday ];
    my $endtime;
    # Find the solution, wrapping in an eval to trap any errors.
    eval{

      # The following line is an ungodly hack. It's there in case
      # Astro::Catalog::IO::TST cannot figure out which column is ID,
      # RA, or Dec, in which case it throws a warning using
      # warnings::warnif. Unfortunately none of the following worked
      # to stop the warning from appearing:
      #
      # no warnings;
      # no warnings "all";
      # local $^W = 0;
      #
      # Thus the super-sledgehammer of redefining the warning signal
      # handler to do absolutely nothing when a warning appears.
      local $SIG{'__WARN__'} = sub {};
      ( $catalogue, $merged_catalogue ) = $auto->solve;
    };
    my $raoffset = 0.0;
    my $decoffset = 0.0;
    my $fitrms;
    my $fitstatus = '3';
    my %results;
    if( $@ ) {

      my $endtime = [ gettimeofday ];
      my $elapsed = tv_interval( $starttime, $endtime );

      orac_warn "Error adding accurate astrometry to $in: $@";
      undef $@;

      if( $elapsed > 60 ) {

        my @cats = split ",", $skycat_cats;
        push( @cats, shift( @cats ) );
        $skycat_cats = join ",", @cats;

        orac_warn "Automated astrometry took longer than 60 seconds. Assuming something wrong with query catalogue. Setting order to $skycat_cats.\n";

        $Cal->skycat_catalogueindex->add( 2, { SKYCAT_CATALOGUE => $skycat_cats,
                                               ORACTIME => $Frm->hdr( "ORACTIME" ) } );

      }

      if( defined( $auto->rawcatalogue ) &&
          $auto->rawcatalogue->sizeof > 0 && $statistics ) {
        orac_warn "Objects were detected, so can calculate some image quality statistics.\n";

        my $rawcat = $auto->rawcatalogue;
        _CALCULATE_IMAGE_STATISTICS_ IMAGE_CATALOGUE=$rawcat GROUP=$group MAGNITUDE_TYPE=MAG_APER1

      } else {
        orac_warn "No objects were detected, cannot calculate image quality statistics.\n";
        orac_warn "Continuing with data reduction.\n";

	$results{'plate'} = $platescale;
	$results{'xrms'} = -99.0;
	$results{'yrms'} = -99.0;
	$results{'nstars'} = 0;
	$results{'nterms'} = 0;
      }
    } else {
      # Read in 'fit.log' file
      my $fitlog;
      open($fitlog, $auto->bestfitlog) or orac_warn "Couldn't open fit log file.\n";

      my $line = "";
      my @cols;
      if (defined $fitlog) {
	while (<$fitlog>) {
	  chomp($_);
	  $line = $_;
	  if ( $line =~ /\t/ ) {
	    @cols = split(/\s+/, $line);
	    $results{$cols[1]} = $cols[3];
	  }
	}
	close($fitlog);

#	foreach my $key (keys (%results)) {
#	  print "key=$key, value=$results{$key}\n";
#	}
# Calculate RA/Dec offsets in arcsecs
	$raoffset = ($Frm->uhdr( "ORAC_RA_BASE" ) - ($results{'rarad'}*R2DEG))*3600.0;
	$decoffset = ($Frm->uhdr( "ORAC_DEC_BASE" ) - ($results{'decrad'}*R2DEG))*3600.0;
	my $ratrim = $Frm->uhdr( "ORAC_X_LOWER_BOUND" ) * $platescale;
	my $dectrim = $Frm->uhdr( "ORAC_Y_LOWER_BOUND" ) * $platescale;
	$raoffset = $raoffset - $ratrim;
	$decoffset = $decoffset - $dectrim;
      	$fitstatus = '0';
      }
# Check fit quality
      if ( $results{'nstars'} < 6 or abs($results{'plate'}-$platescale) > 0.05*$platescale
      	   or ( $results{'xrms'} == 0.00 and $results{'yrms'} == 0.00 ) ) {
      	orac_print "Bad astrometric fit detected.\n";
      	print "DBG: Bad astrometric fit detected.\n";
	print "DBG: nstars=$results{'nstars'},\nDBG: plates=$results{'plate'},";
	print "\nDBG: pscale=$platescale,\nDBG:   xrms=$results{'xrms'},\nDBG:   yrms=$results{'xrms'}\n";
# Put original WCS back
	$Obj->write_wcs( $orig_wcs );
	orac_print  "WCS reset in " . $Obj->file . ".\n";

	$results{'plate'} = $platescale;
	$results{'xrms'} = -99.0;
	$results{'yrms'} = -99.0;
#	$results{'nstars'} = 0;
#	$results{'nterms'} = 0;
	$raoffset = 0.0;
	$decoffset = 0.0;
      	$fitstatus = '4';
      } else {
	orac_print "Accurate astrometry added to $in.\n";
	orac_print "Catalogue written to $output_catalogue.\n";
	$Obj->uhdr( "ASTROMETRY_ADDED", 1 );

	orac_print "Changing system to ICRS\n";
	$Mon{ "ndfpack_mon" }->obeyw( "wcsattrib", "ndf=$in mode=set name=System newval=ICRS");

	# Display, if requested.
	$Display->display_data( $Obj ) if ( defined( $Display ) );

	# Now we might want to do some image statistics.
	if( $statistics ) {
          orac_print "\n";
          _CALCULATE_IMAGE_STATISTICS_ IMAGE_CATALOGUE=$catalogue MATCHED_CATALOGUE=$merged_catalogue GROUP=$group MAGNITUDE_TYPE=MAG_APER1
	}
      }
    }
    $fitrms = $results{'xrms'} . "/" . $results{'yrms'};
    my $catsize=$auto->rawcatalogue->sizeof;
    my $refcat = $auto->{'SKYCAT_CATALOGUE_IN'};
    my $rawcat = 'inputframe';
    if (defined $auto->detected_catalogue) {
      $rawcat = $auto->detected_catalogue;
    }
    my @cats = split(',', $auto->{'CATALOGUE'});
    my $cattype = $cats[0];
    my $astromver = "AUTOASTROMv0.6.0" . "-" . $auto->match;
    # File the whole shebang with the calibration system.
    my %calhash = ( %{$Frm->hdr},
    		    SECPIX => $results{'plate'},
    		    XRMS => $results{'xrms'},
    		    YRMS => $results{'yrms'},
		    NSTARS => $results{'nstars'},
		    OFFSETRA => $raoffset,
		    OFFSETDEC => $decoffset,
    		  );
    $Cal->astromqcindex->add( $Frm->file, \%calhash );
# Update FITS header items
    if ( $fitstatus == '0' ) {
      _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=SECPIX VALUE=$results{'plate'} COMMENT=[arcsec/pixel]|Fitted|pixel|scale|on|sky
    } else {
      _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=SECPIX VALUE=$results{'plate'} COMMENT=[arcsec/pixel]|Nominal|pixel|scale|on|sky
    }
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSSOLVR STRING=TRUE VALUE=$astromver COMMENT=WCS|solver
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSRFCAT VALUE=$refcat COMMENT=Fname|of|astrometric|catalog
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSIMCAT VALUE=$rawcat COMMENT=Fname|of|detection|catalog
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSNREF VALUE=$catsize COMMENT=Stars|in|image|available|to|define|WCS
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSMATCH VALUE=$results{'nstars'} COMMENT=Stars|in|image|matched|against|ref|catalog
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCCATTYP VALUE=$cattype COMMENT=Reference|catalog|used
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCNTERMS VALUE=$results{'nterms'} COMMENT=No.|of|terms|used|in|WCS|fit
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSRDRES VALUE=$fitrms COMMENT=[arcsec]|WCS|fitting|residuals|(x/y)
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSDELRA VALUE=$raoffset COMMENT=[arcsec]|Shift|of|fitted|WCS|w.r.t.|nominal
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSDELDE VALUE=$decoffset COMMENT=[arcsec]|Shift|of|fitted|WCS|w.r.t.|nominal
    _SET_FILE_FITS_ITEM_ FILE=$Obj->file KEY=WCSERR VALUE=$fitstatus COMMENT=Error|status|of|WCS|fit.|0|for|no|error

    orac_print "Removing catalogue $output_catalogue.\n";
    unlink $output_catalogue;
  }
  # Tidy up output.
  orac_print "\n";

}
