# -*-perl-*-

=head1 NAME

_CALCULATE_IMAGE_STATISTICS_ - Calculate various image quality
statistics based on an input catalogue.

=head1 DESCRIPTION

This primitive calculates image quality statistics based on an input
catalogue. This catalogue is typically the output from either
C<Starlink::Extractor> or C<Starlink::Autoastrom>, so that object
morphology information is available for calculations.

This primitive calculates the mean axial ratio of bright sources, the
average object diameter converted to K-band equivalent, the sky
brightness, the limiting magnitude, and the instrumental zero point.

=head1 ARGUMENTS

=over 4

=item GROUP = LOGICAL (Given)

If true, use the current Group file for sky brightness
calculations. Otherwise, use the current Frame. [0]

=item IMAGE_CATALOGUE = C<Astro::Catalog> object (Given)

=item MAGNITUDE_TYPE = CHARACTER (Given)

The magnitude type to use when  calculating zeropoint. This can be any
of the MAG_* output parameters from SExtractor. [MAG_ISO]

=item MATCHED_CATALOGUE = C<Astro::Catalog> object (Given)

=back

=head1 NOTES

=over 4

=item *

Files results with the Calibration system. FWHM is obtained with the
fwhm() method, axial ratio is obtained with the axial_ratio() method,
sky brightness is obtained with the sky_brightness() method, limiting
magnitude is obtained with the limiting_mag() method, and the zero
point is obtained with the zeropoint() method.

=back

=head1 OUTPUT DATA

=over 4

None.

=back

=head1 TASKS

=head1 REQUIRED PERL MODULES

Astro::Catalog.

=head1 AUTHORS

Brad Cavanagh <b.cavanagh@jach.hawaii.edu>

=head1 COPYRIGHT

Copyright (C) 2005 Particle Physics and Astronomy Research
Council.  All Rights Reserved.

=cut

# Find out if we want to do statistics on the current Group or Frame
# object.
my $group = $_CALCULATE_IMAGE_STATISTICS_{GROUP};
my $Obj;
$group = defined( $group ) ? $group : 0;
if( $group ) {
  $Obj = $Grp;
} else {
  $Obj = $Frm;
}

my $minhist = 20; # Minimum number of objects needed to do histogram-based stats.

my $hack = 0;

# Get the magnitude type, defaulting to MAG_ISO.
my $magnitude_type = $_CALCULATE_IMAGE_STATISTICS_{MAGNITUDE_TYPE} || 'MAG_ISO';

# Get the catalogue containing all of the objects detected in the image.
my $image_catalogue = $_CALCULATE_IMAGE_STATISTICS_{IMAGE_CATALOGUE};

# And get the catalogue containing only those objects that matched
# between the standard star catalogue and the catalogue of all objects
# detected in the image.
my $matched_catalogue = $_CALCULATE_IMAGE_STATISTICS_{MATCHED_CATALOGUE};

my $match = ( defined( $matched_catalogue ) ? 1 : 0 );

if( defined( $image_catalogue ) ) {

  my %calhash;

  # Strip out any Astro::Catalog::Item objects that don't have a
  # quality of 0 (which means good), or a radius of 2.5 arcseconds or
  # an ellipticity greater than 0.25. This will eliminate any
  # galaxies, saturated stars, blended objects, etc. from the image
  # quality calculations.

  my @gooditems;
  my @catmatchitems;

  _GET_EXPANSION_RATIO_
  my $maxarea = 3.14159 * 6.25 * 6.25 * ( $_GET_EXPANSION_RATIO_{X_EXPANSION} ) ** 2;

  my $ell_step = 0.01;
  my $fwhm_step = 0.02;
  my %ell_hist;
  my %fwhm_hist;
  my $ell_total = 0;
  my $fwhm_total = 0;

  my $cat;
  if( $match ) {
    $cat = $matched_catalogue;
  } else {
    $cat = $image_catalogue;
  }

  # Retrieve the pixel scale.
  _GET_PLATE_SCALE_
  my $platescale = $_GET_PLATE_SCALE_{PLATESCALE};

  my $avg_x = 0;
  my $avg_y = 0;
  my $num_objs = 0;
  my $pi = 3.14159265359;

  # Use the image catalogue to get the FWHM and ellipticity numbers.
  foreach my $item ( $image_catalogue->stars ) {

    next if $item->quality;
    next if ( ! defined( $item->morphology->area ) );
    next if ( defined( $item->morphology->ellipticity ) &&
              $item->morphology->ellipticity->value > 0.25 );

    next if ( $item->morphology->area->value > $maxarea );
    push @gooditems, $item;

    my $fwhm = $item->morphology->fwhm_pixel->value * $platescale;
    $fwhm_total += $fwhm;
    $fwhm_hist{ int( $fwhm / $fwhm_step ) * $fwhm_step }++;

    my $ext_ell = $item->morphology->ellipticity->value;
    $ell_total += $ext_ell;
    $ell_hist{ int( $ext_ell / $ell_step ) * $ell_step }++;

    $avg_x += $item->morphology->major_axis_pixel->value
              * sin( $item->morphology->position_angle_pixel->value * $pi / 180 );
    $avg_y += $item->morphology->major_axis_pixel->value
              * cos( $item->morphology->position_angle_pixel->value * $pi / 180);
    $num_objs++;

  }

  if( $match ) {
#    use Data::Dumper;
#    print Dumper $matched_catalogue;
    foreach my $item ( $matched_catalogue->stars ) {

      next if $item->quality;
      next if ( ! defined( $item->morphology->area ) );
      next if ( defined( $item->morphology->ellipticity ) &&
                $item->morphology->ellipticity->value > 0.25 );
      next if ( $item->morphology->area->value > $maxarea );

      my $fluxes = $item->fluxes;
      my @allfluxes = $fluxes->allfluxes;
      my $cat_match = 0;
      my $waveband = new Astro::WaveBand( Filter => $Frm->uhdr( "ORAC_FILTER" ) );
      my %standard_filters;

      foreach my $flux ( @allfluxes ) {
        if( uc( $flux->type ) eq 'MAG_CATALOG' ) {
          $standard_filters{uc($flux->waveband)}++;
        }
      }
      if( $standard_filters{'U'} &&
          $standard_filters{'B'} &&
          $standard_filters{'V'} &&
          $standard_filters{'R'} &&
      	  $standard_filters{'I'} &&
      	  $standard_filters{'J'} &&
          $standard_filters{'K'} ) {
	orac_print("Matched\n");
        push @catmatchitems, $item;
      }
    }
  }

  # Set up a bunch of variables for later use.
  my ( $axialratio, $ext_ellipticity, $fwhm, $k_fwhm, $k_fwhm_zen, $orient, $zeropoint );
  my ( $zeropoint_variance, $limiting_magnitude, $extcor, $sky_value, $sky_value_variance );
  my ( $sky_brightness, @zps );

  # Calculate the "average" position angle.
  $orient = ( atan2( $avg_x, $avg_y ) / $pi * 180 );

  # Obtain the airmass from the FITS headers. Find the approximate
  # mean airmass from the start and end values. This should be
  # adequate unless it is a long integration with the source crossing
  # the meridian.
  my $amstart = $Obj->uhdr( "ORAC_AIRMASS_START" );
  my $amend   = $Obj->uhdr( "ORAC_AIRMASS_END" );
  my $airmass = 0.5 * ( $amstart + $amend );
  orac_print ("Mean airmass=$airmass\n");

  if( $num_objs == 0 ) {
    orac_err "Not enough objects were found to determine image quality statistics.\n";
  } elsif( $num_objs < $minhist ) {

    # Just do "normal" stats.
    $fwhm = $fwhm_total / $num_objs;
    $ext_ellipticity = $ell_total / $num_objs;

  } else {

    # Calculate the ellipticity from our histogram.
    my $maxell = 0;
    my $maxellbin = 0;
    foreach my $ell_bin ( sort keys %ell_hist ) {
      if( $ell_hist{$ell_bin} > $maxell ) {
        $maxell = $ell_hist{$ell_bin};
        $maxellbin = $ell_bin;
      }
    }
    # We have ellipticity bin that has the most counts in it, so take
    # two on either side and calculate the average of those.
    if( $maxellbin eq '0' ) {

      # Take 0, 0.01 and 0.02.
      my $sum_counts = $ell_hist{0} + $ell_hist{'0.01'} + $ell_hist{'0.02'};
      my $sum_ell = $ell_hist{'0.01'} * 0.01 + $ell_hist{'0.02'} * 0.02;
      $ext_ellipticity = $sum_ell / $sum_counts;

    } elsif( $maxellbin eq '0.01' ) {

      # Take 0, 0.01, 0.02, and 0.03.
      my $sum_counts = $ell_hist{0} + $ell_hist{'0.01'} + $ell_hist{'0.02'} + $ell_hist{'0.03'};
      my $sum_ell = $ell_hist{'0.01'} * 0.01 + $ell_hist{'0.02'} * 0.02 + $ell_hist{'0.03'} * 0.03;
      $ext_ellipticity = $sum_ell / $sum_counts;

    } else {

      my $first = $maxellbin - 0.02;
      my $second = $maxellbin - 0.01;
      my $third = $maxellbin + 0.01;
      my $fourth = $maxellbin + 0.02;
      if( ! defined( $ell_hist{"$first"} ) ) {
        $ell_hist{"$first"} = 0;
      }
      if( ! defined( $ell_hist{"$second"} ) ) {
        $ell_hist{"$second"} = 0;
      }
      if( ! defined( $ell_hist{"$third"} ) ) {
        $ell_hist{"$third"} = 0;
      }
      if( ! defined( $ell_hist{"$fourth"} ) ) {
        $ell_hist{"$fourth"} = 0;
      }
      my $sum_counts = $ell_hist{"$first"} + $ell_hist{"$second"} + $ell_hist{"$maxellbin"} + $ell_hist{"$third"} + $ell_hist{"$fourth"};
      my $sum_ell = $ell_hist{"$first"}  * $first
                  + $ell_hist{"$second"} * $second
                  + $ell_hist{"$maxellbin"} * $maxellbin
                  + $ell_hist{"$third"}  * $third
                  + $ell_hist{"$fourth"} * $fourth
                  ;
      $ext_ellipticity = $sum_ell / $sum_counts;
    }

    # Calculate the FWHM from our histogram.
    my $maxfwhm = 0;
    my $maxfwhmbin = 0;
    foreach my $fwhm_bin ( sort keys %fwhm_hist ) {
      if( $fwhm_hist{$fwhm_bin} > $maxfwhm ) {
        $maxfwhm = $fwhm_hist{$fwhm_bin};
        $maxfwhmbin = $fwhm_bin;
      }
    }
    # We have FWHM bin that has the most counts in it, so take
    # two on either side and calculate the average of those.
    if( $maxfwhmbin eq '0' ) {

      # Take 0, 0.01 and 0.02.
      my $sum_counts = $fwhm_hist{0} + $fwhm_hist{'0.01'} + $fwhm_hist{'0.02'};
      my $sum_fwhm = $fwhm_hist{'0.01'} * 0.01 + $fwhm_hist{'0.02'} * 0.02;
      $fwhm = $sum_fwhm / $sum_counts;

    } elsif( $maxfwhmbin eq '0.01' ) {

      # Take 0, 0.01, 0.02, and 0.03.
      my $sum_counts = $fwhm_hist{0} + $fwhm_hist{'0.01'} + $fwhm_hist{'0.02'} + $fwhm_hist{'0.03'};
      my $sum_fwhm = $fwhm_hist{'0.01'} * 0.01 + $fwhm_hist{'0.02'} * 0.02 + $fwhm_hist{'0.03'} * 0.03;
      $fwhm = $sum_fwhm / $sum_counts;

    } else {

      my $first = $maxfwhmbin - 0.02;
      my $second = $maxfwhmbin - 0.01;
      my $third = $maxfwhmbin + 0.01;
      my $fourth = $maxfwhmbin + 0.02;
      if( ! defined( $fwhm_hist{"$first"} ) ) {
        $fwhm_hist{"$first"} = 0;
      }
      if( ! defined( $fwhm_hist{"$second"} ) ) {
        $fwhm_hist{"$second"} = 0;
      }
      if( ! defined( $fwhm_hist{"$third"} ) ) {
        $fwhm_hist{"$third"} = 0;
      }
      if( ! defined( $fwhm_hist{"$fourth"} ) ) {
        $fwhm_hist{"$fourth"} = 0;
      }
      my $sum_counts = $fwhm_hist{"$first"} + $fwhm_hist{"$second"} + $fwhm_hist{"$maxfwhmbin"} + $fwhm_hist{"$third"} + $fwhm_hist{"$fourth"};
      my $sum_fwhm = $fwhm_hist{"$first"}  * $first
                   + $fwhm_hist{"$second"} * $second
                   + $fwhm_hist{"$maxfwhmbin"} * $maxfwhmbin
                   + $fwhm_hist{"$third"}  * $third
                   + $fwhm_hist{"$fourth"} * $fourth
                   ;
      $fwhm = $sum_fwhm / $sum_counts;
    }
  }

  if( $num_objs > 0 ) {

    # Calculate the K-band equivalent seeing. It goes as
    # (wavelength^(-0.2)), so we need to get the current wavelength
    # and the K wavelength, do the division and the power, and scale
    # the measured FWHM.
    _GET_FILTER_PARAMETERS_
    my $wavelength = $_GET_FILTER_PARAMETERS_{WAVELENGTH};
    my $k_wavelength = 2.25;
    my $scale = ( $wavelength / $k_wavelength ) ** ( 0.2 );
    $k_fwhm = $scale * $fwhm;
    $k_fwhm_zen = $k_fwhm * ( 1 / $airmass ) ** ( 0.6 );

    # Determine the sky background values.
    my $params = "ndf=" . $Obj->file . " clip=[2,3,3]";
    $Mon{'kappa_mon'}->obeyw( "stats", "$params" );
    ( my $ORAC_STATUS, $sky_value ) = $Mon{'kappa_mon'}->get( "stats", "mean" );
    ( $ORAC_STATUS, $sky_value_variance ) = $Mon{'kappa_mon'}->get( "stats",  "sigma" );

    # Set up defaults for photometric values.
    $zeropoint = 0;
    $zeropoint_variance = 0;
    $limiting_magnitude = 0;
    $sky_brightness = 0;

    # We can only do the following calculations (zeropoint, sky
    # brightness, etc). if we have a catalogue of objects that matched
    # between the NDF and SkyCat AND if the filter is Z, Y, J, H, or K.
    my $phot = 1;
    my $filter = $Frm->uhdr( "ORAC_FILTER" );

    $extcor = 0;
    if( $match && $phot ) {

      # Obtain the mean extinction coefficient.
      my $waveband = $_GET_FILTER_PARAMETERS_{WAVEBAND};
      my $extinction = $_GET_FILTER_PARAMETERS_{EXTINCTION};
      my $filter = $Frm->uhdr( "ORAC_FILTER" );

      # Derive the extinction correction using the IR standard of
      # one airmass.
      $extcor = ( $airmass - 1.0 ) * $extinction;
      orac_print ("Ext. correction, coeff= $extinction, $extcor\n");

      # Obtain the exposure time.
      my $exptime = $Frm->uhdr( "ORAC_EXPOSURE_TIME" );

      # Set up various arrays and hashes that will hold magnitude
      # information.
      my @image_mags;
      my @standard_mags;
      my %zp_hist;
      my %stdmag_hist;
      my %imgmag_hist;

      # Stepsizes for the zeropoint and limiting magnitude histograms.
      my $zp_step = 0.01;
      my $lm_step = 0.1;

      # Now, go through the list of objects that had catalogue magnitudes
      # and calculate the zeropoint.
      foreach my $catmatchitem ( @catmatchitems ) {

        my $jmag = $catmatchitem->get_flux_quantity( waveband => 'J',
                                                     type => 'MAG_CATALOG' );
        my $hmag = $catmatchitem->get_flux_quantity( waveband => 'H',
                                                     type => 'MAG_CATALOG' );
        my $kmag = $catmatchitem->get_flux_quantity( waveband => 'K',
                                                     type => 'MAG_CATALOG' );



        # Calculate the Z, Y, J, H, and K magnitudes in the MK system.
        my $mk_zmag = $jmag + 0.95  * ( $jmag - $hmag );
        my $mk_ymag = $jmag + 0.5   * ( $jmag - $hmag );
        my $mk_jmag = $jmag - 0.075 * ( $jmag - $hmag );
        my $mk_hmag = $hmag + 0.075 * ( $jmag - $hmag );
        my $mk_kmag = $kmag - 0.015 * ( $jmag - $kmag );

        # Get the magnitude in the current waveband.
        my $im_mag = $catmatchitem->get_flux_quantity( waveband => $filter,
                                                       type => $magnitude_type );

        # Skip if the magnitude is fainter than 10 (which denotes
        # something bad).
        next if $im_mag > 10;

        my $st_mag;
        if( $filter eq 'Z' ) {
          $st_mag = $mk_zmag;
        } elsif( $filter eq 'Y' ) {
          $st_mag = $mk_ymag;
        } elsif( $filter eq 'J' ) {
          $st_mag = $mk_jmag;
        } elsif( $filter eq 'H' ) {
          $st_mag = $mk_hmag;
        } elsif( $filter eq 'K' ) {
          $st_mag = $mk_kmag;
        }

        # Correct the measured magnitude for exposure time.
        $im_mag += 2.5 * log10( $exptime );

        # Correct the measured magnitude for extinction.
        $im_mag -= $extcor;

        # Push the magnitudes onto the arrays, correcting the
        # magnitude from the EXTRACTOR-based catalogue.
        push( @image_mags, $im_mag );
        push( @standard_mags, $st_mag );
        push( @zps, $st_mag - $im_mag );
        $zp_hist{ int( ( $st_mag - $im_mag ) / $zp_step ) * $zp_step }++;
      }

      if( $#image_mags != -1 ) {

        # Calculate the zeropoint from our histogram.
        my $max_zp = 0;
        my $max_zp_bin = 0;
        foreach my $zp_bin ( sort keys %zp_hist ) {
          if( $zp_hist{$zp_bin} > $max_zp ) {
            $max_zp = $zp_hist{$zp_bin};
            $max_zp_bin = $zp_bin;
          }
        }
        my $first = $max_zp_bin - ( 2 * $zp_step );
        my $second = $max_zp_bin - $zp_step;
        my $third = $max_zp_bin + $zp_step;
        my $fourth = $max_zp_bin + ( 2 * $zp_step );
        if( ! defined( $zp_hist{"$first"} ) ) {
          $zp_hist{"$first"} = 0;
        }
        if( ! defined( $zp_hist{"$second"} ) ) {
          $zp_hist{"$second"} = 0;
        }
        if( ! defined( $zp_hist{"$third"} ) ) {
          $zp_hist{"$third"} = 0;
        }
        if( ! defined( $zp_hist{"$fourth"} ) ) {
          $zp_hist{"$fourth"} = 0;
        }
        my $total_zps = $zp_hist{"$first"} + $zp_hist{"$second"} + $zp_hist{"$max_zp_bin"} + $zp_hist{"$third"} + $zp_hist{"$fourth"};
        my $sum_zp = $zp_hist{"$first"}  * $first
                   + $zp_hist{"$second"} * $second
                   + $zp_hist{"$max_zp_bin"} * $max_zp_bin
                   + $zp_hist{"$third"}  * $third
                   + $zp_hist{"$fourth"} * $fourth
                   ;
        $zeropoint = $sum_zp / $total_zps;

        # Calculate the mean difference and the variance in the
        # difference between the standard magnitudes and the measured
        # magnitudes.
        my $sum = 0;
        foreach my $zp ( @zps ) {
          $sum += $zp;
        }
        my $avg = $sum / ( $#zps + 1 );
        my $sumsqu = 0;
        foreach my $zp ( @zps ) {
          $sumsqu += ( $zp - $avg ) * ( $zp - $avg );
        }
        $zeropoint_variance = sqrt( $sumsqu / ( $#zps + 1 ) );

        # Calculate magnitudes for all detected objects.
        foreach my $item ( $image_catalogue->stars ) {
          my $im_mag = $item->get_flux_quantity( waveband => $filter,
                                                 type => $magnitude_type );
          next if $im_mag > 50;

          # Correct for exposure time, extinction, and zeropoint.
          $im_mag += 2.5 * log10( $exptime );
          $im_mag -= $extcor;
          $im_mag += $zeropoint;

          $imgmag_hist{ int( $im_mag / $lm_step ) * $lm_step }++;
        }

        my $maximgmag = 0;
        my $maximgmagbin = 0;
        foreach my $imgmag_bin ( sort keys %imgmag_hist ) {
          if( $imgmag_hist{$imgmag_bin} > $maximgmag ) {
            $maximgmag = $imgmag_hist{$imgmag_bin};
            $maximgmagbin = $imgmag_bin;
          }
        }

        $first = $maximgmagbin - ( 2 * $lm_step );
        $second = $maximgmagbin - $lm_step;
        $third = $maximgmagbin + $lm_step;
        $fourth = $maximgmagbin + ( 2 * $lm_step );
        if( ! defined( $imgmag_hist{"$first"} ) ) {
          $imgmag_hist{"$first"} = 0;
        }
        if( ! defined( $imgmag_hist{"$second"} ) ) {
          $imgmag_hist{"$second"} = 0;
        }
        if( ! defined( $imgmag_hist{"$third"} ) ) {
          $imgmag_hist{"$third"} = 0;
        }
        if( ! defined( $imgmag_hist{"$fourth"} ) ) {
          $imgmag_hist{"$fourth"} = 0;
        }
        my $sum_imgmags = $imgmag_hist{"$first"} + $imgmag_hist{"$second"} + $imgmag_hist{"$maximgmagbin"} + $imgmag_hist{"$third"} + $imgmag_hist{"$fourth"};
        my $sum_imgmag = $imgmag_hist{"$first"}  * $first
                       + $imgmag_hist{"$second"} * $second
                       + $imgmag_hist{"$maximgmagbin"} * $maximgmagbin
                       + $imgmag_hist{"$third"}  * $third
                       + $imgmag_hist{"$fourth"} * $fourth
                       ;
        $limiting_magnitude = $sum_imgmag / $sum_imgmags;

        # Now to calculate the sky level in magnitudes/arcsec^2.
        _GET_PLATE_SCALE_
        my $plate_scale = $_GET_PLATE_SCALE_{PLATESCALE};
        my $counts_per_square_arcsecond = $sky_value / ( $plate_scale * $plate_scale );
        $sky_brightness = $zeropoint - 2.5 * log10( $counts_per_square_arcsecond /
                                                    $exptime );

      } # end photometric calculations.
    }
  }

  if( $num_objs > 0 ) {

    $axialratio = 1 / ( 1 - $ext_ellipticity );

    # Create printable versions.
    my $p_axial = sprintf( "%.3f", $axialratio );
    my $p_ellipticity = sprintf( "%.3f", $ext_ellipticity );
    my $p_fwhm = sprintf( "%.3f", $fwhm );
    my $p_k_fwhm = sprintf( "%.3f", $k_fwhm );
    my $p_k_fwhm_zen = sprintf( "%.3f", $k_fwhm_zen );
    my $p_orient = sprintf( "%.3f", $orient );
    my $p_num_obj = sprintf( "%d", $#zps + 1 );
    my $p_zp = sprintf( "%.3f", $zeropoint );
#  my $p_zp_hist = sprintf( "%.3f", $diff_hist_avg );
    my $p_zp_var = sprintf( "%.3f", $zeropoint_variance );
    my $p_limmag = sprintf( "%.3f", $limiting_magnitude );
    my $p_ext = sprintf( "%.3f", $extcor );
    my $p_sky_value = sprintf( "%.2f", $sky_value );
    my $p_sky_value_variance = sprintf( "%.2f", $sky_value_variance );
    my $p_sky_brightness = sprintf( "%.2f", $sky_brightness );

    my $p_filter = $Frm->uhdr( "ORAC_FILTER" );
    my $p_exptime = sprintf( "%.1f", $Frm->uhdr( "ORAC_EXPOSURE_TIME" ) );
    my $p_object = $Frm->uhdr( "ORAC_OBJECT" );

    # Output statistics to the user.
    orac_print( "Image information for " .
                ( $group ? $Grp->file : $Frm->file ) .
                ":\n", "blue" );
    orac_print( " Filter:        $p_filter\n", "blue" );
#  orac_print( " Exposure time: $p_exptime seconds\n", "blue" );
    orac_print( " Object name:   $p_object\n", "blue" );
    orac_print( "\n" );
    orac_print( "Image quality statistics on " .
                ( $group ? $Grp->file : $Frm->file ) .
                ":\n", "blue" );
    orac_print( " Number of objects used in calculations: $num_objs\n", "blue" );
    if( $num_objs < $minhist ) {
      orac_print( " Number of objects fewer than $minhist. Standard mean calculated.\n", "white on_red" );
    }
    orac_print( " Axial ratio:   $p_axial\n", "blue" );
    orac_print( " Ellipticity:   $p_ellipticity\n", "blue" );
    orac_print( " FWHM:          $p_fwhm arcseconds\n", "blue" );
    orac_print( " K-band equiv:  $p_k_fwhm arcseconds\n", "blue" );
    orac_print( "  ...at zenith: $p_k_fwhm_zen arcseconds\n", "blue" );
    orac_print( " Orientation:   $p_orient degrees east of north\n", "blue" );
    orac_print( "\n" );
    orac_print( "Photometric statistics on " .
                ( $group ? $Grp->file : $Frm->file ) .
                ":\n", "blue" );
    orac_print( " Number of objects used in calculations: $p_num_obj\n", "blue" );

    orac_print( " Instrumental zero-point: $p_zp +/- $p_zp_var\n", "blue" );
    orac_print( " Limiting magnitude:      $p_limmag\n", "blue" );
    orac_print( " Background sky level:    $p_sky_value +/- $p_sky_value_variance counts.\n",
                "blue" );
    orac_print( " Sky brightness:          $p_sky_brightness magnitudes/arcsec^2.\n",
                "blue" );
    orac_print( "  Extinction coefficient of $p_ext was used.\n", "blue" );

    # For historical reasons.
    my $gamma = 0;

    # Read base coordinates and computes hour angle
    my $base_ra  = $Frm->hdr("RABASE");
    my $base_dec = $Frm->hdr("DECBASE");

    # File the whole shebang with the calibration system.
    %calhash = ( %{$Obj->hdr},
                 AIRMASS => $airmass,
                 AXIALRATIO => $axialratio,
                 ELLIPTICITY => $ext_ellipticity,
                 FWHM => $fwhm,
                 FWHM_K => $k_fwhm,
                 FWHM_K_ZEN => $k_fwhm_zen,
                 GAMMA => $gamma,
                 MAG_LIMIT => $limiting_magnitude,
                 ORIENT => $orient,
                 SKY_VALUE => $sky_value,
                 SKY_VALUE_ERROR => $sky_value_variance,
                 SKY_VALUE_MAG => $sky_brightness,
                 ZEROPOINT => $zeropoint,
                 ZEROPOINT_ERROR => $zeropoint_variance,
		 DECLINATION => $base_dec,
               );
    $Cal->zeropoint->add( $Obj->file, \%calhash );
  }

}
