=head1 NAME

_MAKE_HIPS_ - Covert a collection of JSA tiles to a HiPS structure

=head1 DESCRIPTION

This primitive rearranges the given HEALPix tiles into the directory
structure used by HiPS, converting them to FITS files with minimal
headers.

The output is written in the directory specified by the C<HIPS_DIR>
recipe parameter.

=head1 BUGS

=over 4

=item *

This primitive is extremely slow due to the amount of I/O performed.

=item *

This primitive assumes that it will be given 1024x1024 tiles (which
it then splits into 512x512 tiles as recommended for HiPS).
This behavior should be controlled via C<_MAKE_HIPS_STEER_> because
it sets up the C<jsadicer> options which control the tiling parameters.

=item *

This primitive uses newly-constructed names for files which will
overwrite any already present with those names.

=back

=head1 COPYRIGHT

Copyright (C) 2019-2024 East Asian Observatory
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA

=cut

use File::Spec;

my $input_jsa_tiles = $Frm->uhdr('HIPS_INPUT_JSA_TILES');

unless ($input_jsa_tiles) {
    _EXTRACT_JSA_TILES_

    # Remove provenance in case we have multiple files to co-add for each tile.
    _TURN_OFF_PROVENANCE_

    _DELETE_TEMP_FILES_ KEEP=_dice_ RETAINKEPT=1
}

if ($Grp->lastallmembers($Frm)) {
    # Read steering parameters.
    my $maxorder = $Frm->uhdr('HIPS_MAX_ORDER');
    my $root = $Frm->uhdr('HIPS_ROOT');

    my $untrim_bounds = sub {
        my ($bound, $size) = @_;
        $bound -= $size - 1 if $bound < 0;
        my $lower = $size * int($bound / $size);
        return ($lower, $lower + $size - 1);
    };

    # Co-add all files for the same tile.
    my %tiles = ();

    do {
        my %grouped = ();

        foreach my $Obj ($Grp->allmembers()) {
            for (my $i = 0; $i < $Obj->nfiles(); $i ++) {
                my $file = $Obj->file($i + 1);
                my $tile = $Obj->hdrval('TILENUM', $i);

                push @{$grouped{$tile}}, $file;
            }
        }

        while (my ($tile, $files) = each %grouped) {
            my $coadd;

            if (1 == scalar @$files) {
                $coadd = $files->[0];
            }
            else {
                orac_say("Co-adding tile $tile");
                $coadd  = sprintf('coadd_%i', $tile);

                my $mosfiles = write_file_list(@$files);

                $Mon{'ccdpack_reg'}->obeyw('makemos', "in=^$mosfiles out=$coadd method=mean usevar=true logto=neither");

                $Grp->push_intermediates($coadd);
            }

            $tiles{$tile} = $coadd;
        }
    };

    # Assume the our tiles are 1024x1024 and so are 1 order lower than
    # 512x512 tiles at $maxorder.
    my $inorder = $maxorder - 1;

    # Rearrange %tiles into a tree structure so that we can assemble
    # the HiPS tiles recursively.
    for (my $order = $inorder - 1; $order > -1; $order --) {
            my %grouped = ();

            while (my ($tile, $content) = each %tiles) {
                my $sub = int($tile / 4);
                push @{$grouped{$sub}}, [$tile, $content];
            }

            %tiles = %grouped;
    }

    # Construct the HiPS directory structure.
    mkdir $root;

    _MAKE_HIPS_PROPERTIES_

    for (my $order = $maxorder; $order > -1; $order --) {
        my $orderdir = File::Spec->catdir($root, sprintf('Norder%i', $order));
        mkdir $orderdir;
    }

    # Set up hashes to contain tiles for allsky files.
    $Frm->uhdr('HIPS_ALLSKY', {3 => {}});

    # Assemble the HiPS tiles.
    foreach my $tile (sort {$a <=> $b} keys %tiles) {
        orac_say("Creating HiPS facet $tile");

        my $content = $tiles{$tile};
        _MAKE_HIPS_TILE_ ORDER=0 TILE=$tile CONTENT=$content
    }

    # Finally construct the allsky files and place their inputs
    # in the intermediates list for clean up.
    foreach my $order (sort {$b <=> $a} keys %{$Frm->uhdr('HIPS_ALLSKY')}) {
        my $tiles = $Frm->uhdr('HIPS_ALLSKY')->{$order};

        _MAKE_HIPS_ALLSKY_ ORDER=$order TILES=$tiles

        $Grp->push_intermediates(values %$tiles);
    }
}
