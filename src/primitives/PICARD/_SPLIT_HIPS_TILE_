=head1 NAME

_SPLIT_HIPS_TILE_ - Split a JSA tile to make HiPS tiles

=head1 DESCRIPTION

This primitive splits the file in the frame into four pieces in order
to generate the next higher order HiPS tiles.

It is assumed that the input is a 1024x1024 JSA tile which should be split
into (up to) four 512x512 HiPS tiles (if they all contain data).

If the uhdr C<HIPS_INPUT_JSA_TILES> is not set, then the input must be
a map of size exactly 1024x1024, as should have been generated by SMURF jsadicer.
Otherwise if this uhdr is set, then the user will have provided pre-generated
JSA tiles as input, so allow for "trimmed" tiles (i.e. a size less than
1024x1024).

=head1 ARGUMENTS

=over 2

=item B<ORDER>

The order of the tile.

=item B<TILE>

The tile number.

=back

=head1 COPYRIGHT

Copyright (C) 2019-2024 East Asian Observatory
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA

=cut

my $order = get_prim_arg($_PRIM_ARGS_, 'ORDER', undef);
my $tile = get_prim_arg($_PRIM_ARGS_, 'TILE', undef);

my $input_jsa_tiles = $Frm->uhdr('HIPS_INPUT_JSA_TILES');

my $facet = $tile >> (2 * $order);

my $file = $Frm->file;

orac_say("Splitting file $file (tile $tile, order $order, facet $facet)");

my $untrim_bounds = sub {
    my ($bound, $size) = @_;
    $bound -= $size - 1 if $bound < 0;
    my $lower = $size * int($bound / $size);
    return ($lower, $lower + $size - 1);
};

my $ORAC_STATUS;
$Mon{'ndfpack_mon'}->obeyw('ndftrace', "ndf=$file quiet");
($ORAC_STATUS, my @lbnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'lbound');
($ORAC_STATUS, my @ubnd) = $Mon{'ndfpack_mon'}->get('ndftrace', 'ubound');
my $width = 1 + $ubnd[0] - $lbnd[0];
my $height = 1 + $ubnd[1] - $lbnd[1];
unless ($width == 1024 and $height == 1024) {
    unless ($input_jsa_tiles) {
        # Non-JSA tile input: we should have constructed
        # the correct size.
        die 'Unexpected width or height';
    }
    elsif ($width > 1024 or $height > 1024) {
        # In the case of JSA tile input, allow for trimmed tiles,
        # but they should not exceed the nominal tile size.
        die 'Excess width or height';
    }

    # We have a trimmed JSA tile: recompute @lbnd (and @ubnd
    # although it is not currently used) to take into account
    # what the bounds of the full tile would have been.
    my @xbnd = $untrim_bounds->($lbnd[0], 1024);
    my @ybnd = $untrim_bounds->($lbnd[1], 1024);
    if ($xbnd[1] < $ubnd[0] or $ybnd[1] < $ubnd[1]) {
        die 'Inconsistent tile bounds';
    }
    @lbnd = ($xbnd[0], $ybnd[0]);
    @ubnd = ($xbnd[1], $ybnd[1]);
}

my @output = ();
my $suborder = $order + 1;

foreach my $subtile (
            [0, 512, 0],
            [1, 0, 0],
            [2, 512, 512],
            [3, 0, 512],
        ) {
    my ($i, $x, $y) = @$subtile;
    $x += $lbnd[0];
    $y += $lbnd[1];
    my $xx = $x + 511;
    my $yy = $y + 511;

    my $section = "($x:$xx,$y:$yy)";
    $Mon{'kappa_mon'}->obeyw('stats',"ndf=$file$section");
    ($ORAC_STATUS, my $ngood) = $Mon{'kappa_mon'}->get('stats', 'numgood');
    next unless $ngood > 0;

    my $out = sprintf('%s_split%i', $file, $i);
    $Mon{'kappa_mon'}->obeyw('permaxes', "in=$file$section out=$out perm=[2,1]");

    # Tiles in facet 6 could be located at the lower left or upper right
    # corner of the plane.  Ensure they are all in the upper right
    # (positive x and y) to allow joining.
    if ($facet == 6 and $x < 0) {
        # Note: facet numbering is as follows:
        #        2 6
        #      3 7 A
        #    0 4 B
        #  1 5 8
        #  6 9

        # Move across by 4 facets (original 1024 pixel JSA tile size),
        # swapping x and y to take account of having done permaxes.
        my $shift = 1024 * (4 << $order);
        my $newx = $y + $shift;
        my $newy = $x + $shift;
        $Mon{'ndfpack_mon'}->obeyw('setorigin', "ndf=$out origin=[$newx, $newy]");
    }

    my $subtilenum = 4 * $tile + $i;
    _EXPORT_HIPS_TILE_ ORDER=$suborder TILE=$subtilenum FILE=$out

    push @output, $out;
}

$Frm->files(@output);
