# -*-cperl-*-

=head1 NAME

REDUCE_SCAN_SUMMIT - Summit recipe for processing SCAN data

=head1 DESCRIPTION

This recipe processes SCAN data with the iterative map-maker in the
summit pipeline. This recipe makes use of a percentage completion
parameter which delays the map-making step until a certain proportion
of the data exist on disk.

Flatfielded data are passed to the iterative map maker to produce a
Frame image, which is then calibrated and displayed. A new Group image
is created and displayed. The noise properties of the new Group image
are calculated and written to a log file, C<log.noise>.

Control in this recipe is handled by a series of Frame and Group uhdr
flags. These are NOCALIB, OBSEND, PERCENT_CMP and TCS_INDEX (Frame)
and LAST_INDEX and MAPMADE (Group). The TCS_INDEX and LAST_INDEX
values are used to determine if the scan pattern has been completed
since the last map was made. OBSEND is used to decide whether or not
to create a new Group coadd. The NOCALIB flag is used to bypass the
calibration step as raw timeseries data should not be calibrated.

The PERCENT_CMP entry is specified in this recipe as an argument to
_PROCESS_SCAN_DATA_. However, it is only used for observations which
consist of a single pass of the scan pattern.

=head1 NOTES

=over 2

=item *

The noise level estimated from the current Group file is stored in
C<log.noise>.

=back

=head1 DISPLAY

The Frame image is displayed in Gaia window 1 (though no image will be
displayed until the percentage completion or change in TCS index
criteria are satisfied).

The Group image is displayed in Gaia window 2; its variance is
displayed in window 3.

=head1 AUTHORS

Andy Gibb E<lt>agg@astro.ubc.caE<gt>

=head1 COPYRIGHT

Copyright (C) 2009-2010 University of British Columbia. All Rights
Reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA.

=cut

# Standard introduction
_SCUBA2_HELLO_

# Set process-control flags for the Summit pipeline
_SUMMIT_STEER_

# Obtain RMS-tracking data from header
_GET_CHECKRMS_DATA_FROM_HEADER_ GROUP=1

# Process fast-ramp flatfield files
_PROCESS_FASTFLAT_

# Process the scan data accordingly. The iterative map-maker will be
# used by default: the rebinning map-maker is not recommended.
_PROCESS_SCAN_DATA_ PERCENT_CMP=90

# Derive FCFs - the image is trimmed and (optionally) has a background
# subtracted before calculating FCFs. However, the original file
# created by _MAKEMAP_FRAME_ is stored again on completion.
_CALCULATE_FCFS_ VERBOSE=0

# Calibrate the data
_CALIBRATE_DATA_

# Calculate an NEFD from the current Frame image
_CALCULATE_NEFD_ GROUP=0 VERBOSE=0

# Display the calibrated current frame image
_DISPLAY_FRAME_
_CREATE_PREVIEW_SUMMIT_ GROUP=0 RUNNING_COADD=1

# Add the new frame mosaic into the group. Use nearest-neighbour
# resampling to obtain a robust estimate of the noise.
_MAKE_MOSAIC_GROUP_ METHOD=NEAREST COADD_MODE=RUNNING WAIT=1

# Calculate an NEFD from the current Group image
_CALCULATE_NEFD_ GROUP=1 VERBOSE=1

# Determine RMS/NEFD from Group image
_GET_CHECKRMS_DATA_FROM_IMAGE_ GROUP=1

# Write out log file with RMS/NEFD info
_WRITE_CHECKRMS_LOGFILE_ GROUP=1

# Display the group mosaic
_DISPLAY_GROUP_
_CREATE_PREVIEW_SUMMIT_ GROUP=1

# These next two steps are no-ops for non-calibrators. First, determine
# the beam size.
_FIND_BEAM_SIZE_ LOGFILE=0 GROUP=1

# Then write log file with calibrator
_WRITE_CALSTATS_LOGFILE_

# Write log file with map results
_WRITE_MAPSTATS_LOGFILE_ GROUP=1

# Tidy up and delete unnecessary files
_SCAN_TIDY_

# Finally free up memory by removing unnecessary Frame objects from
# the Group, keeping only the last one
_PURGE_FRAMES_ KEEPLAST=1
