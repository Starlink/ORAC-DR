#!/usr/local/bin/perl
#
# Change log is at the end of this file
# POD documentation is at end of file
#
# Usage: oracdr <recipe_name>
#------------------------------------------------------------------------

use 5.006;

use strict;
use warnings;
use vars qw/$VERSION/;
use File::Spec;
BEGIN {
    if (!$ENV{ORAC_PERL5LIB} && exists $ENV{ORAC_DIR}) {
	$ENV{ORAC_PERL5LIB} = File::Spec->catdir($ENV{ORAC_DIR}, "lib","perl5");
    }
}
use lib $ENV{"ORAC_PERL5LIB"};

# Version number - do this before anything else so that we dont have to
# wait for all the modules to load - very quick
BEGIN {

  # Deal with the version number first.
  use ORAC::Version;
  $VERSION = ORAC::Version->getVersion;

  # Check for version number request
  # - do this before real options handling to be quick and so that
  # it can run even if there are major modules missing from the installation...
  foreach (@ARGV) {
    if (/^-vers/) {
      print "ORAC-DR: Data reduction pipeline version $VERSION\n";
      exit;
    }
  }
}

# Make sure we catch as many signals as possible
# so that the END{} blocks work correctly and tidy up

# add a stack-trace for debugging
use sigtrap qw/die normal-signals error-signals/;

################# L O A D  M O D U L E S ####################################

#
#  ORAC modules
#
use ORAC::Basic;     # Helper routines
use ORAC::General;   # parse_* routines
use ORAC::Print;     # Printing messages or errors
use ORAC::Core;      # Core pipeline routines
use ORAC::Constants; # ORAC__OK et al
use ORAC::Event;     # Tk events
use ORAC::Error qw/:try/;
use ORAC::Inst::Defn qw/ orac_determine_inst_classes /;
use ORAC::BaseFile;  # To set header overrides.
use ORAC::Recipe;

#
#  General modules
#
use Pod::Usage;
use Getopt::Long;                       # command line arguments
use List::Util qw/all/;

#
#  Optional modules
#
my $HaveAudio = eval {require JAC::Audio; 1;};
if ($HaveAudio) {
    JAC::Audio::register_log_command(sub {
      orac_warn("JAC::Audio: $_") foreach @_;
    });
}

# check for starlink login
orac_exit_normally(message => "No starlink login", err => 1) unless exists $ENV{"STAR_LOGIN"};

####### C H E C K  E N V I R O N M E N T  V A R I A B L E S ################

# Need to determine module list from the ORAC_INSTRUMENT
# environment variable before we can include certain modules.

# Simply exit if the environment variable is not set.
unless (exists $ENV{ORAC_INSTRUMENT}) {
  orac_err("No intrument specified in \$ORAC_INSTRUMENT. Please set to one of IRCAM, UFTI, SCUBA\n");
  exit;
}

my $instrument = uc($ENV{ORAC_INSTRUMENT});

############# C O M M A N D  L I N E  A R G U M E N T S ###################

# Store them first so that we can print out the log message
my @ORAC_ARGS = @ARGV;

# Now parse the args

# Pass @_ directly to GetOpt::Long::GetOptions, no need to process
# an argument list as it would just complicate things.

my ( %opt );
$opt{calib} = []; # Want to support --calib a=b --calib c=d

my $status = GetOptions("nodisplay" => \$opt{nodisplay},
	  		"debug!"    => \$opt{debug},
		 	"verbose!"  => \$opt{verbose},
			"calib=s"   =>  $opt{calib},
		        "from=i"    => \$opt{from},
			"to=i"      => \$opt{to},
			"ut=i"      => \$opt{ut},
			"list=s"    => \$opt{list},
			"loop=s"    => \$opt{loop},
			"help"      => \$opt{help},
			"batch!"    => \$opt{batch},
			"skip!"     => \$opt{skip},
			"noeng"     => \$opt{noeng},
			"nomsgtmp"  => \$opt{nomsgtmp},
			"log=s"     => \$opt{log},
			"resume!"   => \$opt{resume},
			"warn!"     => \$opt{warn},
			"beep!"     => \$opt{beep},
			"showcurrent!" => \$opt{showcurrent},
			"files=s"   => \$opt{files},
			"man"       => \$opt{man},
                        "recsuffix=s" => \$opt{recsuffix},
                        "recpars=s" => \$opt{recpars},
                        "grptrans"  => \$opt{grptrans},
                        "onegroup" => \$opt{onegroup},
                        "groupid=s" => \$opt{groupid},
                        'headeroverride=s' => \$opt{header_override},
                        'skiperror' => \$opt{skip_error},
                        'audiosuffix=s' => \$opt{'audio_suffix'},
                        'preprocess!' => \$opt{'preproc'},
                        'rechelp' => \$opt{'rechelp'},
                        'flagsync' => \$opt{'flagsync'},
		       );

pod2usage(1) if $opt{help};
pod2usage(-exitstatus => 0, -verbose => 2) if $opt{man};

# Read recipe name, this will default to the RECIPE File method
my $Override_Recipe = shift(@ARGV);

if ($opt{'rechelp'}) {
    my $recipe = new ORAC::Recipe(
        NAME => $Override_Recipe,
        INSTRUMENT => $instrument,
        OPTIONS => {preproc => ($opt{'preproc'} // 0)});
    $recipe->_read_recipe();
    pod2usage(-exitstatus => 0, -verbose => 2, -input => $recipe->recipe->path);
}

# Turn on -w support
# This will twiddle with the warnings pragma
if ($opt{warn}) {
  $^W=1;
  if ($opt{verbose}) {
    eval "use diagnostics;";
  }
}

# configure prefix for print messages
unless ($opt{'preproc'}) {
  orac_print_prefix( "ORAC-DR Says: " );
}
else {
  ORAC::Version->setApp('WESLEY');
  orac_print_prefix('Wesley Says: ');
}

# This variable is used for error messages from exception handlers.
# undefine it before each try block
my $ErrText;

############### S I G N A L  H A N D L E R S ##############################

# signals and perl variables
$|=1;					# make unbuffered

$SIG{'INT'} = \&orac_exit_abnormally;
#$SIG{'PIPE'} = \&orac_exit_abnormally;
$SIG{'PIPE'} = 'IGNORE';
$SIG{'ABRT'} = \&orac_exit_normally;
########## O R A C - D R  C O N F I G U R A T I O N ########################

# constants - for the module

# Check for ORAC_DIR
unless (exists $ENV{ORAC_DIR}) {
  orac_err("ORAC_DIR environment variable not defined. Aborting.");
  orac_exit_normally( err => 1);
}

# Need to locate the recipe parameters file *before* we chdir to
# orac_data_out since people might get upset if they specify a file
# and we can't find it. Take this opportunity to parse the content.
# We can not issue a warning until the ORAC::Print system is enabled.
my $recpars_warning;
if (exists $opt{recpars} && defined $opt{recpars}) {
  my $file = $opt{recpars};
  $opt{recpars} = orac_parse_recparams( $opt{recpars} );
  $recpars_warning = "Could not find specified recipe parameter file named $file\n"
    unless defined $opt{recpars};
}

# If a header override file has been specified, give its name
# to ORAC::BaseFile.
if (exists $opt{'header_override'} && defined $opt{'header_override'}) {
  ORAC::BaseFile::header_override_file($opt{'header_override'});
}

# Similarly process the --files command line option before changing
# to ORAC_DATA_OUT.
my @obs;
if ( defined $opt{files} ) {
   try {
      @obs = orac_parse_files( $opt{files} );
   }
   catch ORAC::Error with
   {
      my $Error = shift;
      $ErrText = "$Error";
   }
   otherwise
   {
      # this should sucessfully catch croaks
      my $Error = shift;
      $ErrText = "$Error";
   };
   orac_exit_if_error( $ErrText );
}

######## C H A N G E   T O   O U T P U T   D I R E C TO R Y  ###############

orac_chdir_output_dir();

############### C H E C K  I N P U T  D I R E C T O R Y ####################
# Do not need ORAC_DATA_IN if we are in loop "task" mode

if (exists $opt{loop} && defined $opt{loop} && $opt{loop} eq 'task') {
  # no need to do anything
}
elsif (not ((exists $ENV{ORAC_DATA_IN}) and -d $ENV{ORAC_DATA_IN})) {
  # If in loop "file" mode, check whether all files are already absolute paths.
  # Use same test for files mode ($obs[0] being defined) as
  # orac_process_argument_list.
  # Rather than requiring absolute paths we could try to determine ORAC_DATA_IN,
  # e.g. as the parent directory of the file list?  For now just set a dummy
  # path in case anything still accesses ORAC_DATA_IN.
  if ((defined $obs[0]) and (all {File::Spec->file_name_is_absolute($_)} @obs)) {
    $ENV{'ORAC_DATA_IN'} = '/dummy/orac/data/in';
  }
  elsif (exists $ENV{ORAC_DATA_IN}) {
    orac_err("ORAC_DATA_IN directory ($ENV{ORAC_DATA_IN}) does not exist. Aborting\n");
    orac_exit_normally( err => 1);
  }
  else {
    orac_err("ORAC_DATA_IN environment variable not set. Aborting\n");
    orac_exit_normally( err => 1);
  }
}

######### O R A C  P R I N T  C O N F I G U R A T I O N #####################

# $CURRENT_RECIPE is used in Xoracdr and for the recipe progress window
my ( $CURRENT_RECIPE );

# Enable the logging system
my ( $orac_prt, $msg_prt, $msgerr_prt, $ORAC_MESSAGE,
     $PRIMITIVE_LIST, $CURRENT_PRIMITIVE );
try {
    ( $orac_prt, $msg_prt, $msgerr_prt, $ORAC_MESSAGE,
      $PRIMITIVE_LIST, $CURRENT_PRIMITIVE ) =
	orac_print_config_with_defaults(\$CURRENT_RECIPE,\@ORAC_ARGS, %opt,
                                        orac_instrument => $instrument );
} catch ORAC::Error with {
  my $Error = shift;
  $ErrText = "$Error";
} otherwise {
  # this should sucessfully catch croaks
  my $Error = shift;
  $ErrText = "$Error";
};

orac_exit_if_error( $ErrText );

# Issue any pending recipe parameters warning
orac_warn($recpars_warning)
  if defined $recpars_warning;

# Warn if audio requested by unavailable.
orac_warn("Audio warnings requested but the JAC::Audio module is unavailable.\n")
    if (defined $opt{'audio_suffix'}) && (not $HaveAudio);

$CURRENT_RECIPE = "Starting pipeline";

#########################   U  T    D A T E #################################

# if no UT date has been provided, default to current.
!($opt{ut}) && do {

  $opt{ut} = utdate;
  orac_print ("Orac says: No UT date supplied, using $opt{ut}\n","blue");

};

####################### B E E P I N G #######################################

# Beeping
if ($opt{beep}) {
  $orac_prt->errbeep(1);
  # Beep is for orac_exit_normally so must set global in the correct class
  $ORAC::Basic::Beep = 1;
}

######################## I N I T  D I S P L A Y #############################

# start the display
my $Display = orac_start_display( $opt{nodisplay},
                                  orac_instrument => $instrument,
                                  recsuffix => $opt{'recsuffix'});

################## P R O C E S S  A R G U M E N T  L I S T ##################

# Check -groupid and -onegroup. If -onegroup, set grptrans to -1.
# if -groupid set grptrans to "-$groupid". -groupid takes precedence.
if (exists $opt{groupid} && defined $opt{groupid}) {
  $opt{grptrans} = "-". $opt{groupid};
} elsif( exists( $opt{onegroup} ) && defined( $opt{onegroup} ) ) {
  $opt{grptrans} = -1;
}

# Set up location tracking
orac_declare_location( %opt );

##################### L O O P I N G  S C H E M E ############################

# We need the frame class to sort out the looping option
my $frameclass = orac_determine_inst_classes( $instrument );

# Generate list of observation numbers if @obs isn't defined to be processed
# This is related to looping scheme
my $loop =
    orac_process_argument_list($frameclass,\@obs, %opt);

die "Unable to determine looping scheme. Please specify -loop or -list/from/to"
  unless defined $loop;


die 'For preprocessing, the recipe name must be specified.'
  if ($opt{'preproc'} and not defined $Override_Recipe);

########################## D A T A   L O O P ################################

# Call the main data processing loop
my %Stats;
try {
  # Might want to consider simply passing all of %opt into this function
  %Stats = orac_main_data_loop( \%opt, $loop, $instrument, \@obs, $Display,
                                $orac_prt, $ORAC_MESSAGE,
                                \$CURRENT_RECIPE, $PRIMITIVE_LIST, $CURRENT_PRIMITIVE,
                                $Override_Recipe );
}
catch ORAC::Error with
{
   my $Error = shift;
   $ErrText = "$Error";
}
otherwise
{
   # this should sucessfully catch croaks
   my $Error = shift;
   $ErrText = "$Error";
};


# This is the same test as used by orac_exit_if_error.
if (defined $ErrText) {
    if ((defined $opt{'audio_suffix'}) and $HaveAudio) {
        my $audiofile = File::Spec->catfile(
            $ENV{'ORAC_DIR'}, 'audio', sprintf('stop_err_%s.wav', $opt{'audio_suffix'}));
        ORAC::Error->flush();
        JAC::Audio::play($audiofile) if -e $audiofile;
    }
}

orac_exit_if_error( $ErrText );

########################## T I D Y  U P #####################################

orac_print ("Pipeline processing complete\n", "green");
$CURRENT_RECIPE = "Pipeline processing complete";

# Print out the processing summary
my $exstat = orac_print_recipe_summary( "green", \%Stats );

# If $MW is defined, enter the Tk MainLoop
# So that the session can be examined before exiting
ORAC::Event->mainloop("Tk");

# Cleanup
if (exists $opt{'skip_error'} and defined $opt{'skip_error'}) {
  ORAC::Error->flush();
  $exstat = 0;
}
else {
  my $error = ORAC::Error->prior();
  if ((defined $error) && $error->isa('ORAC::Error::UserAbort')) {
    $error->flush();
  }
};

orac_exit_normally( ($exstat == 0 ? () : ( err => 1 ) ) );

# exit

#------------------------------------------------------------------------


=head1 Name

oracdr - ORAC Data Reduction pipeline

=head1 Synopsis

  oracdr [-options] [RECIPE]
  oracdr -from 5
  oracdr -ut 19990523 -list 15:35,40,44 -batch

=head1 DESCRIPTION

C<oracdr> is the actual ORAC-DR data reduction pipeline.
This document describes the command line options that
can be used to modify the pipeline operation.

=head1 Arguments

The following argument  is  supported:

=over 4

=item * RECIPE

By default, ORAC-DR looks in the file header for the name of the
recipe to be used on the data. If you specify the name of a recipe on
the command line, it will override the one specified in the
header. This override recipe is used for all data files regardless of
header contents or observation mode, so make sure you only only apply
it to appropriate data frames.

=back

=head1 Options

All ORAC-DR behaviour is controlled by the option
switches. These options may be abbreviated to a unique substring. It
is via command line switches that you (for example) control the range
of file numbers to be reduced, force the system to use a particular
calibration file when reducing (e.g. to try a different flat
exposure). This list needs to be read thoroughly by anyone wanting to
use the system.

=head2 General Options

=over 4

=item B<-help>

List help text. This prints a summary of this document.

=item B<-version>

Print the version number.

=item B<-verbose>

Print messages from the Starlink engines (rather than just ORAC-DR
messages).

=item B<-man>

Print the full documentation.

=item B<-debug>

Log debug messages to file C<ORACDR.DEBUG> in C<$ORAC_DATA_OUT>.

=item B<-warn>

Turn on perl level warning messages (C<perl -w>). This should be
used for debugging only. If C<-verbose> is also true then full
perl diagnostics are turned on (see L<diagnostics> for more information
on this perl pragma).

=item B<-beep>

Make as much noise as possible over errors and pipeline exit.
Default is not to beep.

=item B<-rechelp>

Show help text for the given recipe.

=back

=head2 Windows and output

=over 4

=item B<-nodisplay>

Do not launch the display system. No data will be displayed and GWM,
GAIA etc. windows will not be launched.

=item B<-showcurrent>

Launch a recipe viewer window along with the log Xwindow

=item B<-log s>

Log to terminal screen (standard out)

=item B<-log f>

Log to a file. The logfile is called C<.oracdr_NNNN.log> where NNNN
is the current process ID. It is written to C<$ORAC_DATA_OUT> and is
a hidden file.

=item B<-log h>

Log to a file using HTML to provide formatting. The logfile is
called C<.oracdr_NNNN.html> where NNNN is the current process
ID. It is written to C<$ORAC_DATA_OUT> and is a hidden file.

=item B<-log x>

Log to an X window. Has the advantage that warnings, errors and
results are written to different, independently scrollable windows.
The plus and minus keys can be used to adjust the font size.

=back

The three log options can be combined. The default is C<-log sx>

To run ORAC-DR using output only within the xterm that you used
to invoke it in, use C<-nodisplay -log s>. This is the fastest way
to run the pipeline if you are not interested in visually
inspecting the data as it is being reduced.

=head2 Observations

=over 4

=item B<-from>

Number of first observation.

=item B<-to>

Number of last observation.

=item B<-list>

Comma separated list of observation I<numbers>. Colons indicate a range.
For example, `1,2,4:6,10' means 1,2,4,5,6,10.

=item B<-files>

File name of a flat ASCII text file containing a list of observation
I<files> to be reduced, one file per line.  Path information should be
either relative to C<$ORAC_DATA_IN>, or the absolute path.

=back

=head2 UT date

=over 4

=item B<-ut>

UT date of observations (defaults to current yyyymmdd). When the
instrument specific setup scripts are run, oracdr is automatically
aliased to use the correct C<-ut> option. The UT is required for
UKIRT and JCMT instruments as it forms part of the file naming
convention for data files.

=back

=head2 Recipe Selection and Modification

=over 4

=item B<-recsuffix>

Modify the recipe search algorithm such that a recipe variant can be
selected if available. For example with `C<-recsuffix QL>' a recipe
named MYRECIPE_QL would be picked up in preference to MYRECIPE.

Multiple suffices can be supplied using a comma separator.

 -recsuffix QL1,QL2

=item B<-recpars>

Recipe behaviour can be controlled by specifying a recipe parameters
file. This is a file in INI format with a block per recipe name.

 [RECIPE_NAME]
 param1=value1
 param2=value2

Parameters to be supplied for all recipes can also be specified
explicity, overriding any parameters in the file.  Note however
that only one file may be specified.  For example:

 -recpars="tilenum=456356,recpars-M95AC34.ini"

=item B<-headeroverride>

Specify a file containing header information which should be
used to override that found in the data files.  Typically used only
for legacy data where headers are missing or incorrect.
The file is in INI format, with one block per file, e.g.:

 [x19990401_00009]
 DRRECIPE=REDUCE_DARK
 GRPNUM=9
 GRPMEM=T
 NOFFSETS=6

 [x19990401_00010]
 DRRECIPE=JITTER_SELF_FLAT
 GRPNUM=10
 GRPMEM=T
 NOFFSETS=41

=item B<--preprocess>

Enables "WESLEY" pre-processing mode.

=back

=head2 Calibration options.

=over 4

=item B<-calib>

Used to specify calibration overrides. Accepts comma separated key=value
pairs. (e.g. `C<-cal dark=file1>' or `C<-cal dark=file1,bias=file2>'). The
allowed options depends on the instrument that is in use.

=back

See L<Calibrating> for more information on how the pipeline deals
with calibrations.


=head2 Looping options


The C<-loop> option specifies the type of data detection loop. Allowed
values are `list', `inf', `wait', `flag' or 'file'. In almost all cases of
offline use, `inf' is most appropriate.

=over 4

=item  B<-loop list>

Default when using the C<-list> option. The pipeline will stop
once the observations in the list have been reduced.

=item  B<-loop wait>

Waits for data to appear before timing out. Data is reduced and the pipeline
waits for the next file.

=item  B<-loop inf>

Do not wait for data. Simply reduce data starting with observation
specified by C<-from> and continuing until no more files are present.
Implicitly used when C<-from> is specified. This is the fastest way
of reducing data offline.

=item  B<-loop flag>

Waits for completion files to appear (flags) before processing the data.
Data is reduced and the pipeline waits for more data by checking the
presence of a flag.

=item B<-loop file>

Works much like C<-loop list> except that looping is carried out over a
list of arbitarly named files input from the C<-files> command line option.

=item B<-loop task>

Obtain data from a remote (DRAMA) task.

=item B<-flagsync>

Read flag files "in sync".  I.e., if there are multiple flag files for
an observation, as is the case for SCUBA-2, only read matching numbers
of entries from these files.  Entries in any flag files in excess of
the minimum number will not be read, instead being left for potential
future processing.

=back

See L<DataLoops> for more
information on looping schemes.


=head2 Group processing options

=over 4

=item B<-batch>

Run in batch mode. Precalculate groups before processing
data. `wait' loop mode should not be used with this option.
B<NOTE> only JCMT recipes support this option.

=item B<-skip>

Allow the data detection loop to skip missing observations.
Default is to stop the loop when an expected file can not be found.

=item B<-skiperror>

Continue after errors thrown in processing.
This setting should not be used at the telescope.

=item B<-resume>

Allow the pipeline to resume midway through the processing
of a group. (so long as the recipe/instrument supports
this behaviour). Default is for the group file to be deleted
when a new group is created. When C<-resume> is set, the group
file is retained. B<NOTE> this option is not currently supported by
IRCAM, UFTI and SCUBA recipes.

=item B<-grptrans>

Groups are presumed to be transinet and no longer needed when a new
group is created.  This is useful when you know that groups can not be
broken up. Has no effect in batch mode. Memory usage will be
significantly lower if many hundreds of frames and groups are to be
processed.

This option is not the same as setting the ORAC_NOGROUPS environment
variable. That environment variable disables all group processing
whereas this command line option ensures that only a single group
is being processed.

=item B<-onegroup>

All given observations and files are processed in the same group. Be
careful in using this option, as sometimes this may not be what you
want (i.e. if you're processing ACSIS data at two different
frequencies).

The Frame grouping string is not affected.

=item B<-groupid>

Forces the grouping string to take the specified value. This means
that all frames will be combined into a single group as for "-onegroup"
but the grouping string in each Frame will take this value. This is
important if the string should end up in output group files (e.g.
the ASN_ID in JCMT Science Archive data).

=back

=head2 Engine Options

=over 4

=item B<-noeng>

Do not start algorithm engines. B<NOTE> this will cause
the vast majority of recipes to fail.

=item B<-nomsgtmp>

Do not create an invocation specific temporary directory for the
messaging systems but use whatever directory is the usual default. For
ADAM tasks this would mean that ~/adam or $ADAM_USER will be used
rather than a private ORAC-DR directory. This should only be used when
it is required for ORAC-DR to talk to tasks that were not started by
the pipeline and could lead to possible confusion if multiple
pipelines are running using this flag.

=back

=head1 AUTHORS

Frossie Economou (frossie@jach.hawaii.edu),
Tim Jenness (t.jenness@jach.hawaii.edu),
Alasdair Allan (aa@astro.ex.ac.uk),
Brad Cavanagh (b.cavanagh@jach.hawaii.edu)

=head1 COPYRIGHT

Copyright (C) 1998-2010 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut
