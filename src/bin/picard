#!/usr/local/bin/perl

=head1 NAME

picard - Pipeline for Combining and Analayzing Reduced Data

=head1 SYNOPSIS

 picard RECIPE  *.sdf
 picard -log sfx RECIPE  *.sdf

=head1 DESCRIPTION

C<picard> is a tool for analyzing and combining a batch of astronomical
data files that have previously had their instrumental signatures removed
(for example by running ORAC-DR on the raw data).

=head1 ARGUMENTS

The following arguments are required:

=over 4

=item * RECIPE

The recipe argument must be provided and will be applied to all input files.
If that recipe includes a combination step, then it is up to the recipe
to decide which input files can be combined.

=item * FILES

All remaining arguments refer to input filenames. Note that all files
must be in NDF format. Currently there is no automated conversion from
FITS.

=back

=head1 OPTIONS

=head2 General Options

=over 4

=item B<-help>

Lists help text summarizing the command usage.

=item B<-version>

Prints out the pipeline version information.

=item B<-man>

Displays the full manual page.

=item B<-debug>

Enable debugging output, listing primitive entry and exit points,
timing and calls to algorithm engines.

=item B<-verbose>

Enable verbose output from algorithm engines.

=item B<-files>

File name of a flat ASCII text file containing a list of files
to be processed, one file per line.  Files specified this way
are added to the list of files given as command line arguments.

=item B<-rechelp>

Show help text for the given recipe.

=back

=head2 Windows and Output

=over 4

=item B<-log sfhx>

Similar to ORAC-DR, this option controls whether the pipeline output is logged
to the terminal screen (C<s>), log file (C<f>), html log file (C<h>) or to an X-window (C<x>).
The default is C<fx>.  To avoid opening an X-window, C<sf> is recommended.

=item B<-nodisplay>

Do not launch the display system. No data will be displayed, and GWM,
GAIA, etc. windows will not be launched.

=back

=head2 Recipe Selection

=over 4

=item B<-recsuffix>

Modify the recipe search algorithm such that a recipe variant can be
selected if available. For example with `C<-recsuffix QL>' a recipe
named MYRECIPE_QL would be picked up in preference to MYRECIPE.

Multiple suffices can be supplied using a comma separator.

 -recsuffix QL1,QL2

=item B<-recpars>

Recipe behaviour can be controlled by specifying a recipe parameters
file. This is a file in INI format with a block per recipe name.

 [RECIPE_NAME]
 param1=value1
 param2=value2

=back

=cut

use strict;
use warnings;
use vars qw/ $VERSION /;
use File::Spec;

BEGIN {
    if (!$ENV{ORAC_PERL5LIB} && exists $ENV{ORAC_DIR}) {
	$ENV{ORAC_PERL5LIB} = File::Spec->catdir($ENV{ORAC_DIR}, "lib","perl5");
    }
}
use lib $ENV{ORAC_PERL5LIB};


$| = 1; # unbuffered

BEGIN {
    # Version handling. Do this early to minimize overhead when just
    # printing out a version (and the risk of a mis-installed pipeline)
    use ORAC::Version;
    $VERSION = ORAC::Version->getVersion;
    foreach (@ARGV) {
	if (/^-vers/) {
	    print "PICARD: Data reduction pipeline version $VERSION\n";
	    exit;
	}
    }
}

# Make sure we catch as many signals as possible
# so that the END{} blocks work correctly and tidy up

# add a stack-trace for debugging
use sigtrap qw/die normal-signals error-signals/;

# ORAC Classes
use ORAC::Error qw/:try/;
use ORAC::Basic;
use ORAC::Core;
use ORAC::Print;
use ORAC::Recipe;
use ORAC::Frame::PICARD;
use ORAC::Group::PICARD;
use ORAC::Inst::Defn qw/ orac_determine_inst_classes /;

# Option handling
use Pod::Usage;
use Getopt::Long;

# Store arguments for later reporting
my @ORAC_ARGS = @ARGV;

# Set the application name
ORAC::Version->setApp( "PICARD" );

# Configure prefix for print messages
orac_print_prefix( "Picard Says: " );

# Clear any previous $ORAC_INSTRUMENT values
$ENV{ORAC_INSTRUMENT} = "<not required>";

# Parse arguments
my %opt;
$opt{calib} = []; # Want to support multiple --calib options
my $status = GetOptions(
    "log=s" => \$opt{log},
    "man"   => \$opt{man},
    "nodisplay" => \$opt{nodisplay},
    "help"  => \$opt{help},
    "debug" => \$opt{debug},
    "verbose" => \$opt{verbose},
    "recsuffix=s" => \$opt{recsuffix},
    "recpars=s" => \$opt{recpars},
    "calib=s"   => \$opt{calib},
    "files=s"   => \$opt{'files'},
    'rechelp' => \$opt{'rechelp'},
    );

pod2usage(1) if $opt{help};
pod2usage(-exitstatus => 0, -verbose => 2) if $opt{man};

# Sanity check since we can assume a Starlink requirement
orac_exit_normally( message => "No starlink login", err => 1) unless exists $ENV{"STAR_LOGIN"};

# Register signal handlers
$SIG{INT} = \&orac_exit_abnormally;
$SIG{PIPE} = 'IGNORE';

# Abort if we do not have an ORAC_DIR
orac_exit_normally(message => "ORAC_DIR environment variable not defined. Aborting", err => 1)
  unless exists $ENV{ORAC_DIR};

# Get the recipe name
my $Recipe = shift(@ARGV);

if ($opt{'rechelp'}) {
    my $recipe = new ORAC::Recipe(
        NAME => $Recipe,
        INSTRUMENT => 'PICARD');
    $recipe->_read_recipe();
    pod2usage(-exitstatus => 0, -verbose => 2, -input => $recipe->recipe->path);
}

# Files to be processed
my @Files = @ARGV;

if (defined $opt{'files'}) {
    my $ErrText;
    try {
        push @Files, orac_parse_files($opt{'files'});
    }
    catch ORAC::Error with
    {
        my $Error = shift;
        $ErrText = "$Error";
    }
    otherwise
    {
        my $Error = shift;
        $ErrText = "$Error";
    };
    orac_exit_if_error($ErrText);
}

orac_exit_normally(message => "Must provide names of files to process", err => 1)
  unless @Files;

# Files are relative to the current directory and not necessarily the
# output directory so we have to convert them to absolute path
@Files = map { File::Spec->rel2abs( $_ ) } @Files;

# Need to locate the recipe parameters file *before* we chdir to
# orac_data_out since people might get upset if they specify a file
# and we can't find it. Take this opportunity to parse the content.
# We can not issue a warning until the ORAC::Print system is enabled.
my $recpars_warning;
if (exists $opt{recpars} && defined $opt{recpars}) {
  my $file = $opt{recpars};
  $opt{recpars} = orac_parse_recparams( $opt{recpars} );
  $recpars_warning = "Could not find specified recipe parameter file named $file\n"
    unless defined $opt{recpars};
}

# Make sure we can change to the output directory
$ENV{ORAC_DATA_OUT} = File::Spec->curdir
  unless exists $ENV{ORAC_DATA_OUT};
orac_chdir_output_dir();

# Global variables for XORAC-DR (if we ever enable it from picard)
my $CURRENT_RECIPE = 'Initializing';

# Enable the logging system
my ( $orac_prt, $msg_prt, $msgerr_prt, $ORAC_MESSAGE,
     $PRIMITIVE_LIST, $CURRENT_PRIMITIVE, $ErrText );
try  {
    ( $orac_prt, $msg_prt, $msgerr_prt, $ORAC_MESSAGE,
      $PRIMITIVE_LIST, $CURRENT_PRIMITIVE ) =
	  orac_print_config_with_defaults(\$CURRENT_RECIPE,
					  \@ORAC_ARGS, %opt,
                                          picard_recipe => $Recipe );
} catch ORAC::Error with {
    my $Error = shift;
    $ErrText = "$Error";
} otherwise {
    # this should sucessfully catch croaks
    my $Error = shift;
    $ErrText = "$Error";
};
orac_exit_if_error( $ErrText );

# Issue any pending recipe parameters warning
orac_warn($recpars_warning)
  if defined $recpars_warning;

$CURRENT_RECIPE = "Starting pipeline";

######################## I N I T  D I S P L A Y #############################

# start the display
my $Display = orac_start_display( $opt{nodisplay},
                                  picard_recipe => $Recipe,
                                  recsuffix => $opt{'recsuffix'});

# Add special PICARD options
%opt = (%opt,
        batch => 1,
        resume => 0, # Do not resume group processing
        skip => 0,   # No need to skip
        nomsgtmp => 0,
        noeng => 0,
        grptrans => -1, # everything goes in one group
);

my %Stats;
# Enter the main data processing loop. We use the standard
# ORAC-DR infrastructure but we configure it to suit picard usage
try {
  %Stats = orac_main_data_loop( \%opt,
		       "orac_loop_file", # We already know the files
		       "PICARD", # Instrument name
		       \@Files,  # The files to be processed
		       $Display,
		       $orac_prt,
		       $ORAC_MESSAGE,
		       \$CURRENT_RECIPE,
		       $PRIMITIVE_LIST,
		       $CURRENT_PRIMITIVE,
		       $Recipe
    );
} catch ORAC::Error::UserAbort with {
   my $Error = shift;
   $ErrText = "$Error";
} otherwise {
   my $Error = shift;
   $ErrText = "$Error";
};
orac_exit_if_error( $ErrText );


orac_print ("Picard processing complete\n", "green");

# Print out the processing summary
my $exstat = orac_print_recipe_summary( "green", \%Stats );

# If $MW is defined, enter the Tk MainLoop
# So that the session can be examined before exiting
ORAC::Event->mainloop("Tk");

# Cleanup
do {
  my $error = ORAC::Error->prior();
  if ((defined $error) && $error->isa('ORAC::Error::UserAbort')) {
    $error->flush();
  }
};

orac_exit_normally( ($exstat == 0 ? () : ( err => 1 ) ) );

=head1 ENVIRONMENT

Picard requires the following environment variables

=over 4

=item B<ORAC_DIR>

Location of the pipeline root directory. Same definition as used for
ORAC-DR.

=item B<ORAC_PERL5LIB>

Location of the pipeline infrastructure. Will default to
$ORAC_DIR/lib/perl5 if it is not set explicitly.

=item B<ORAC_DATA_OUT>

Can be used to control where the output files go. If this variable
is not defined files are written to the current working directory.

=back

=head1 AUTHORS

Tim Jenness E<lt>t.jenness@jach.hawaii.eduE<gt>

=head1 COPYRIGHT

Copyright (C) 2007-2010 Science and Technology Facilities Council.
All Rights Reserved.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful,but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place,Suite 330, Boston, MA  02111-1307, USA

=cut

1;
